
OTA-FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003930  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08003abc  08003abc  00013abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c08  08003c08  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08003c08  08003c08  00013c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c10  08003c10  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c10  08003c10  00013c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c14  08003c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  10000000  08003c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c8  20000000  20000000  00030000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  10000090  10000090  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c434  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002011  00000000  00000000  0002c4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002e508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002ef80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ff2a  00000000  00000000  0002f930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce34  00000000  00000000  0004f85a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf1e7  00000000  00000000  0005c68e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b875  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a58  00000000  00000000  0011b8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000000 	.word	0x20000000
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003aa4 	.word	0x08003aa4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000004 	.word	0x20000004
 80001c8:	08003aa4 	.word	0x08003aa4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fc84 	bl	8000de2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f82d 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f8c3 	bl	8000668 <MX_GPIO_Init>
  MX_CRC_Init();
 80004e2:	f000 f86f 	bl	80005c4 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80004e6:	f000 f88f 	bl	8000608 <MX_USART1_UART_Init>
  flash_mass_erase();
 80004ea:	f000 fb2a 	bl	8000b42 <flash_mass_erase>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  unsigned char c = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	c = 's';
 80004f2:	2373      	movs	r3, #115	; 0x73
 80004f4:	71fb      	strb	r3, [r7, #7]
    /* USER CODE END WHILE */
	UART_putc(&huart1, &c);
 80004f6:	1dfb      	adds	r3, r7, #7
 80004f8:	4619      	mov	r1, r3
 80004fa:	480e      	ldr	r0, [pc, #56]	; (8000534 <main+0x64>)
 80004fc:	f000 f920 	bl	8000740 <UART_putc>
	UART_getc(&huart1, &c);
 8000500:	1dfb      	adds	r3, r7, #7
 8000502:	4619      	mov	r1, r3
 8000504:	480b      	ldr	r0, [pc, #44]	; (8000534 <main+0x64>)
 8000506:	f000 f92a 	bl	800075e <UART_getc>
	if(c == 'a')
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	2b61      	cmp	r3, #97	; 0x61
 800050e:	d102      	bne.n	8000516 <main+0x46>
		FW_Upgrade();
 8000510:	f000 f954 	bl	80007bc <FW_Upgrade>
 8000514:	e7ed      	b.n	80004f2 <main+0x22>
	else if (c == 'b')
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	2b62      	cmp	r3, #98	; 0x62
 800051a:	d102      	bne.n	8000522 <main+0x52>
		Delta_FW_Upgrade();
 800051c:	f000 f9e0 	bl	80008e0 <Delta_FW_Upgrade>
 8000520:	e7e7      	b.n	80004f2 <main+0x22>
	else if (c == 'c')
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	2b63      	cmp	r3, #99	; 0x63
 8000526:	d102      	bne.n	800052e <main+0x5e>
		start_app();
 8000528:	f000 fb30 	bl	8000b8c <start_app>
 800052c:	e7e1      	b.n	80004f2 <main+0x22>
	else
		continue;
 800052e:	bf00      	nop
	c = 's';
 8000530:	e7df      	b.n	80004f2 <main+0x22>
 8000532:	bf00      	nop
 8000534:	20000040 	.word	0x20000040

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b096      	sub	sp, #88	; 0x58
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	2244      	movs	r2, #68	; 0x44
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f003 fa18 	bl	800397c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	463b      	mov	r3, r7
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800055a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800055e:	f001 facb 	bl	8001af8 <HAL_PWREx_ControlVoltageScaling>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000568:	f000 fb34 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800056c:	2310      	movs	r3, #16
 800056e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000578:	2360      	movs	r3, #96	; 0x60
 800057a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800057c:	2300      	movs	r3, #0
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	4618      	mov	r0, r3
 8000586:	f001 fb0d 	bl	8001ba4 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000590:	f000 fb20 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a8:	463b      	mov	r3, r7
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 ff0d 	bl	80023cc <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005b8:	f000 fb0c 	bl	8000bd4 <Error_Handler>
  }
}
 80005bc:	bf00      	nop
 80005be:	3758      	adds	r7, #88	; 0x58
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80005c8:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <MX_CRC_Init+0x3c>)
 80005ca:	4a0e      	ldr	r2, [pc, #56]	; (8000604 <MX_CRC_Init+0x40>)
 80005cc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_CRC_Init+0x3c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <MX_CRC_Init+0x3c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_CRC_Init+0x3c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <MX_CRC_Init+0x3c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_CRC_Init+0x3c>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005ec:	4804      	ldr	r0, [pc, #16]	; (8000600 <MX_CRC_Init+0x3c>)
 80005ee:	f000 fd77 	bl	80010e0 <HAL_CRC_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80005f8:	f000 faec 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	2000001c 	.word	0x2000001c
 8000604:	40023000 	.word	0x40023000

08000608 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_USART1_UART_Init+0x58>)
 800060e:	4a15      	ldr	r2, [pc, #84]	; (8000664 <MX_USART1_UART_Init+0x5c>)
 8000610:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000612:	4b13      	ldr	r3, [pc, #76]	; (8000660 <MX_USART1_UART_Init+0x58>)
 8000614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000618:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_USART1_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_USART1_UART_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_USART1_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_USART1_UART_Init+0x58>)
 800062e:	220c      	movs	r2, #12
 8000630:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <MX_USART1_UART_Init+0x58>)
 8000634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000638:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_USART1_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MX_USART1_UART_Init+0x58>)
 8000642:	2200      	movs	r2, #0
 8000644:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_USART1_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_USART1_UART_Init+0x58>)
 800064e:	f002 fbc9 	bl	8002de4 <HAL_UART_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000658:	f000 fabc 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000040 	.word	0x20000040
 8000664:	40013800 	.word	0x40013800

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08c      	sub	sp, #48	; 0x30
 800066c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <MX_GPIO_Init+0x80>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	4a1d      	ldr	r2, [pc, #116]	; (80006e8 <MX_GPIO_Init+0x80>)
 8000674:	f043 0301 	orr.w	r3, r3, #1
 8000678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_GPIO_Init+0x80>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	f003 0301 	and.w	r3, r3, #1
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <MX_GPIO_Init+0x80>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	4a17      	ldr	r2, [pc, #92]	; (80006e8 <MX_GPIO_Init+0x80>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_GPIO_Init+0x80>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitTypeDef GPIO_InitStructure2;
  GPIO_InitStructure.Pin = GPIO_PIN_12;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a4:	2303      	movs	r3, #3
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate = GPIO_AF7_USART1;
 80006b0:	2307      	movs	r3, #7
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure2.Pin = LED_PIN;
 80006b4:	2308      	movs	r3, #8
 80006b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure2.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure2.Mode = GPIO_MODE_OUTPUT_PP;
 80006bc:	2301      	movs	r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure2.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ce:	f001 f869 	bl	80017a4 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_PORT, &GPIO_InitStructure2);
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	4619      	mov	r1, r3
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_GPIO_Init+0x84>)
 80006da:	f001 f863 	bl	80017a4 <HAL_GPIO_Init>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006de:	bf00      	nop
 80006e0:	3730      	adds	r7, #48	; 0x30
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40021000 	.word	0x40021000
 80006ec:	48000400 	.word	0x48000400

080006f0 <UART_gets>:

/* USER CODE BEGIN 4 */
static uint16_t UART_gets(uint8_t * buf)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	unsigned char c = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	737b      	strb	r3, [r7, #13]
	uint16_t index = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	81fb      	strh	r3, [r7, #14]
	while(c != '\n')
 8000700:	e00e      	b.n	8000720 <UART_gets+0x30>
	{
		HAL_UART_Receive(&huart1, &c, 1, 100);
 8000702:	f107 010d 	add.w	r1, r7, #13
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2201      	movs	r2, #1
 800070a:	480c      	ldr	r0, [pc, #48]	; (800073c <UART_gets+0x4c>)
 800070c:	f002 fc4c 	bl	8002fa8 <HAL_UART_Receive>
		buf[index++] = c;
 8000710:	89fb      	ldrh	r3, [r7, #14]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	81fa      	strh	r2, [r7, #14]
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4413      	add	r3, r2
 800071c:	7b7a      	ldrb	r2, [r7, #13]
 800071e:	701a      	strb	r2, [r3, #0]
	while(c != '\n')
 8000720:	7b7b      	ldrb	r3, [r7, #13]
 8000722:	2b0a      	cmp	r3, #10
 8000724:	d1ed      	bne.n	8000702 <UART_gets+0x12>
	}
	buf[index] = '\0';
 8000726:	89fb      	ldrh	r3, [r7, #14]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	4413      	add	r3, r2
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
	return index;
 8000730:	89fb      	ldrh	r3, [r7, #14]
}
 8000732:	4618      	mov	r0, r3
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000040 	.word	0x20000040

08000740 <UART_putc>:
static void UART_putc(UART_HandleTypeDef *huart, uint8_t * ch)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, ch, 1, 100);
 800074a:	2364      	movs	r3, #100	; 0x64
 800074c:	2201      	movs	r2, #1
 800074e:	6839      	ldr	r1, [r7, #0]
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f002 fb95 	bl	8002e80 <HAL_UART_Transmit>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <UART_getc>:
static void UART_getc(UART_HandleTypeDef *huart, uint8_t * ch)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
 8000766:	6039      	str	r1, [r7, #0]
	HAL_UART_Receive(huart, ch, 1, 500);
 8000768:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800076c:	2201      	movs	r2, #1
 800076e:	6839      	ldr	r1, [r7, #0]
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f002 fc19 	bl	8002fa8 <HAL_UART_Receive>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}

0800077e <UART_getChunk>:
static void UART_getChunk(UART_HandleTypeDef *huart, uint8_t * buf, uint16_t len)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b086      	sub	sp, #24
 8000782:	af00      	add	r7, sp, #0
 8000784:	60f8      	str	r0, [r7, #12]
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	4613      	mov	r3, r2
 800078a:	80fb      	strh	r3, [r7, #6]
	uint16_t index = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	82fb      	strh	r3, [r7, #22]
	while(len > 0)
 8000790:	e00c      	b.n	80007ac <UART_getChunk+0x2e>
	{
		UART_getc(huart, buf+index);
 8000792:	8afb      	ldrh	r3, [r7, #22]
 8000794:	68ba      	ldr	r2, [r7, #8]
 8000796:	4413      	add	r3, r2
 8000798:	4619      	mov	r1, r3
 800079a:	68f8      	ldr	r0, [r7, #12]
 800079c:	f7ff ffdf 	bl	800075e <UART_getc>
		index++;
 80007a0:	8afb      	ldrh	r3, [r7, #22]
 80007a2:	3301      	adds	r3, #1
 80007a4:	82fb      	strh	r3, [r7, #22]
		len--;
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	3b01      	subs	r3, #1
 80007aa:	80fb      	strh	r3, [r7, #6]
	while(len > 0)
 80007ac:	88fb      	ldrh	r3, [r7, #6]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1ef      	bne.n	8000792 <UART_getChunk+0x14>
	}
}
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <FW_Upgrade>:
static void FW_Upgrade()
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af02      	add	r7, sp, #8
	unsigned char c = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	72bb      	strb	r3, [r7, #10]
	uint32_t app_sz = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
	uint16_t chars_read = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	81bb      	strh	r3, [r7, #12]
	uint8_t current_page = 255;
 80007ce:	23ff      	movs	r3, #255	; 0xff
 80007d0:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef ret_code = HAL_OK;
 80007d2:	2300      	movs	r3, #0
 80007d4:	72fb      	strb	r3, [r7, #11]
	uint32_t current_address = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
	uint16_t chunk_sz = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	81fb      	strh	r3, [r7, #14]
	while(1)
	{
		UART_getc(&huart1, &c);
 80007de:	f107 030a 	add.w	r3, r7, #10
 80007e2:	4619      	mov	r1, r3
 80007e4:	483a      	ldr	r0, [pc, #232]	; (80008d0 <FW_Upgrade+0x114>)
 80007e6:	f7ff ffba 	bl	800075e <UART_getc>
		if(c == 'l')
 80007ea:	7abb      	ldrb	r3, [r7, #10]
 80007ec:	2b6c      	cmp	r3, #108	; 0x6c
 80007ee:	d16d      	bne.n	80008cc <FW_Upgrade+0x110>
		{
			chars_read = UART_gets(transaction_buf);
 80007f0:	4838      	ldr	r0, [pc, #224]	; (80008d4 <FW_Upgrade+0x118>)
 80007f2:	f7ff ff7d 	bl	80006f0 <UART_gets>
 80007f6:	4603      	mov	r3, r0
 80007f8:	81bb      	strh	r3, [r7, #12]
			app_sz = atoi(transaction_buf);
 80007fa:	4836      	ldr	r0, [pc, #216]	; (80008d4 <FW_Upgrade+0x118>)
 80007fc:	f003 f881 	bl	8003902 <atoi>
 8000800:	4603      	mov	r3, r0
 8000802:	607b      	str	r3, [r7, #4]
			current_page = APP_INFO_PAGE_NUM;
 8000804:	2310      	movs	r3, #16
 8000806:	75fb      	strb	r3, [r7, #23]
			current_address = APP_INFO_ADDR;
 8000808:	4b33      	ldr	r3, [pc, #204]	; (80008d8 <FW_Upgrade+0x11c>)
 800080a:	613b      	str	r3, [r7, #16]
			ret_code = program_flash((uint8_t *)&app_sz, sizeof(uint32_t), current_page, 1, current_address);
 800080c:	7dfa      	ldrb	r2, [r7, #23]
 800080e:	1d38      	adds	r0, r7, #4
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	2301      	movs	r3, #1
 8000816:	2104      	movs	r1, #4
 8000818:	f000 f916 	bl	8000a48 <program_flash>
 800081c:	4603      	mov	r3, r0
 800081e:	72fb      	strb	r3, [r7, #11]
			current_page = 255;
 8000820:	23ff      	movs	r3, #255	; 0xff
 8000822:	75fb      	strb	r3, [r7, #23]
			current_address = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
			memset(transaction_buf, 0, MAX_BLOCK_SZ);
 8000828:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800082c:	2100      	movs	r1, #0
 800082e:	4829      	ldr	r0, [pc, #164]	; (80008d4 <FW_Upgrade+0x118>)
 8000830:	f003 f8a4 	bl	800397c <memset>
			chunk_sz = (app_sz > MAX_BLOCK_SZ) ? MAX_BLOCK_SZ : app_sz;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800083a:	bf28      	it	cs
 800083c:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8000840:	81fb      	strh	r3, [r7, #14]
			current_page = APP_PAGE_NUM_LOW;
 8000842:	2311      	movs	r3, #17
 8000844:	75fb      	strb	r3, [r7, #23]
			current_address = APP_START_ADDR;
 8000846:	4b25      	ldr	r3, [pc, #148]	; (80008dc <FW_Upgrade+0x120>)
 8000848:	613b      	str	r3, [r7, #16]
			c = 'c';
 800084a:	2363      	movs	r3, #99	; 0x63
 800084c:	72bb      	strb	r3, [r7, #10]
			UART_putc(&huart1, &c);
 800084e:	f107 030a 	add.w	r3, r7, #10
 8000852:	4619      	mov	r1, r3
 8000854:	481e      	ldr	r0, [pc, #120]	; (80008d0 <FW_Upgrade+0x114>)
 8000856:	f7ff ff73 	bl	8000740 <UART_putc>
			c = 'r';
 800085a:	2372      	movs	r3, #114	; 0x72
 800085c:	72bb      	strb	r3, [r7, #10]
			HAL_Delay(100);
 800085e:	2064      	movs	r0, #100	; 0x64
 8000860:	f000 fb34 	bl	8000ecc <HAL_Delay>
			while(app_sz)
 8000864:	e02c      	b.n	80008c0 <FW_Upgrade+0x104>
			{
				UART_putc(&huart1, &c);
 8000866:	f107 030a 	add.w	r3, r7, #10
 800086a:	4619      	mov	r1, r3
 800086c:	4818      	ldr	r0, [pc, #96]	; (80008d0 <FW_Upgrade+0x114>)
 800086e:	f7ff ff67 	bl	8000740 <UART_putc>
				UART_getChunk(&huart1, transaction_buf, chunk_sz);
 8000872:	89fb      	ldrh	r3, [r7, #14]
 8000874:	461a      	mov	r2, r3
 8000876:	4917      	ldr	r1, [pc, #92]	; (80008d4 <FW_Upgrade+0x118>)
 8000878:	4815      	ldr	r0, [pc, #84]	; (80008d0 <FW_Upgrade+0x114>)
 800087a:	f7ff ff80 	bl	800077e <UART_getChunk>
				ret_code = program_flash(transaction_buf, chunk_sz, current_page, 1, current_address);
 800087e:	7dfa      	ldrb	r2, [r7, #23]
 8000880:	89f9      	ldrh	r1, [r7, #14]
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	4812      	ldr	r0, [pc, #72]	; (80008d4 <FW_Upgrade+0x118>)
 800088a:	f000 f8dd 	bl	8000a48 <program_flash>
 800088e:	4603      	mov	r3, r0
 8000890:	72fb      	strb	r3, [r7, #11]
				current_page++;
 8000892:	7dfb      	ldrb	r3, [r7, #23]
 8000894:	3301      	adds	r3, #1
 8000896:	75fb      	strb	r3, [r7, #23]
				current_address+=chunk_sz;
 8000898:	89fb      	ldrh	r3, [r7, #14]
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	4413      	add	r3, r2
 800089e:	613b      	str	r3, [r7, #16]
				app_sz -= app_sz > MAX_BLOCK_SZ ? MAX_BLOCK_SZ : app_sz;
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008a8:	bf28      	it	cs
 80008aa:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80008ae:	1ad3      	subs	r3, r2, r3
 80008b0:	607b      	str	r3, [r7, #4]
				chunk_sz = app_sz > MAX_BLOCK_SZ ? MAX_BLOCK_SZ : app_sz;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008b8:	bf28      	it	cs
 80008ba:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80008be:	81fb      	strh	r3, [r7, #14]
			while(app_sz)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1cf      	bne.n	8000866 <FW_Upgrade+0xaa>
//					c = 'r';
//					UART_putc(&huart1, &c);
			}
			start_app();
 80008c6:	f000 f961 	bl	8000b8c <start_app>
 80008ca:	e788      	b.n	80007de <FW_Upgrade+0x22>

		}
		else
			continue;
 80008cc:	bf00      	nop
		UART_getc(&huart1, &c);
 80008ce:	e786      	b.n	80007de <FW_Upgrade+0x22>
 80008d0:	20000040 	.word	0x20000040
 80008d4:	200000c4 	.word	0x200000c4
 80008d8:	08008000 	.word	0x08008000
 80008dc:	08008800 	.word	0x08008800

080008e0 <Delta_FW_Upgrade>:
	}
}

static void Delta_FW_Upgrade()
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	f5ad 6d02 	sub.w	sp, sp, #2080	; 0x820
 80008e6:	af02      	add	r7, sp, #8
	unsigned char c = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f887 3807 	strb.w	r3, [r7, #2055]	; 0x807
	uint8_t start_page = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f887 3817 	strb.w	r3, [r7, #2071]	; 0x817
	uint16_t offset = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f8a7 3814 	strh.w	r3, [r7, #2068]	; 0x814
	uint16_t chars_read = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
	uint16_t delta_sz = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	f8a7 3812 	strh.w	r3, [r7, #2066]	; 0x812
	HAL_StatusTypeDef ret_code = HAL_OK;
 8000906:	2300      	movs	r3, #0
 8000908:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
	while(1)
		{
			UART_getc(&huart1, &c);
 800090c:	f607 0307 	addw	r3, r7, #2055	; 0x807
 8000910:	4619      	mov	r1, r3
 8000912:	484b      	ldr	r0, [pc, #300]	; (8000a40 <Delta_FW_Upgrade+0x160>)
 8000914:	f7ff ff23 	bl	800075e <UART_getc>
			if(c == 'l')
 8000918:	f897 3807 	ldrb.w	r3, [r7, #2055]	; 0x807
 800091c:	2b6c      	cmp	r3, #108	; 0x6c
 800091e:	d10b      	bne.n	8000938 <Delta_FW_Upgrade+0x58>
			{
				chars_read = UART_gets(transaction_buf);
 8000920:	4848      	ldr	r0, [pc, #288]	; (8000a44 <Delta_FW_Upgrade+0x164>)
 8000922:	f7ff fee5 	bl	80006f0 <UART_gets>
 8000926:	4603      	mov	r3, r0
 8000928:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
				start_page = atoi(transaction_buf);
 800092c:	4845      	ldr	r0, [pc, #276]	; (8000a44 <Delta_FW_Upgrade+0x164>)
 800092e:	f002 ffe8 	bl	8003902 <atoi>
 8000932:	4603      	mov	r3, r0
 8000934:	f887 3817 	strb.w	r3, [r7, #2071]	; 0x817
			}
			if( c == 'm')
 8000938:	f897 3807 	ldrb.w	r3, [r7, #2055]	; 0x807
 800093c:	2b6d      	cmp	r3, #109	; 0x6d
 800093e:	d10b      	bne.n	8000958 <Delta_FW_Upgrade+0x78>
			{
				chars_read = UART_gets(transaction_buf);
 8000940:	4840      	ldr	r0, [pc, #256]	; (8000a44 <Delta_FW_Upgrade+0x164>)
 8000942:	f7ff fed5 	bl	80006f0 <UART_gets>
 8000946:	4603      	mov	r3, r0
 8000948:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
				offset = atoi(transaction_buf);
 800094c:	483d      	ldr	r0, [pc, #244]	; (8000a44 <Delta_FW_Upgrade+0x164>)
 800094e:	f002 ffd8 	bl	8003902 <atoi>
 8000952:	4603      	mov	r3, r0
 8000954:	f8a7 3814 	strh.w	r3, [r7, #2068]	; 0x814
			}
			if( c == 'n')
 8000958:	f897 3807 	ldrb.w	r3, [r7, #2055]	; 0x807
 800095c:	2b6e      	cmp	r3, #110	; 0x6e
 800095e:	d1d5      	bne.n	800090c <Delta_FW_Upgrade+0x2c>
			{
				chars_read = UART_gets(transaction_buf);
 8000960:	4838      	ldr	r0, [pc, #224]	; (8000a44 <Delta_FW_Upgrade+0x164>)
 8000962:	f7ff fec5 	bl	80006f0 <UART_gets>
 8000966:	4603      	mov	r3, r0
 8000968:	f8a7 380e 	strh.w	r3, [r7, #2062]	; 0x80e
				delta_sz = atoi(transaction_buf);
 800096c:	4835      	ldr	r0, [pc, #212]	; (8000a44 <Delta_FW_Upgrade+0x164>)
 800096e:	f002 ffc8 	bl	8003902 <atoi>
 8000972:	4603      	mov	r3, r0
 8000974:	f8a7 3812 	strh.w	r3, [r7, #2066]	; 0x812
				c = 'f';
 8000978:	2366      	movs	r3, #102	; 0x66
 800097a:	f887 3807 	strb.w	r3, [r7, #2055]	; 0x807
				UART_putc(&huart1, &c);
 800097e:	f607 0307 	addw	r3, r7, #2055	; 0x807
 8000982:	4619      	mov	r1, r3
 8000984:	482e      	ldr	r0, [pc, #184]	; (8000a40 <Delta_FW_Upgrade+0x160>)
 8000986:	f7ff fedb 	bl	8000740 <UART_putc>
				while(delta_sz)
 800098a:	e051      	b.n	8000a30 <Delta_FW_Upgrade+0x150>
				{
					c = 'r';
 800098c:	2372      	movs	r3, #114	; 0x72
 800098e:	f887 3807 	strb.w	r3, [r7, #2055]	; 0x807
					UART_putc(&huart1, &c);
 8000992:	f607 0307 	addw	r3, r7, #2055	; 0x807
 8000996:	4619      	mov	r1, r3
 8000998:	4829      	ldr	r0, [pc, #164]	; (8000a40 <Delta_FW_Upgrade+0x160>)
 800099a:	f7ff fed1 	bl	8000740 <UART_putc>
					UART_getChunk(&huart1, transaction_buf, delta_sz);
 800099e:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	; 0x812
 80009a2:	461a      	mov	r2, r3
 80009a4:	4927      	ldr	r1, [pc, #156]	; (8000a44 <Delta_FW_Upgrade+0x164>)
 80009a6:	4826      	ldr	r0, [pc, #152]	; (8000a40 <Delta_FW_Upgrade+0x160>)
 80009a8:	f7ff fee9 	bl	800077e <UART_getChunk>
					uint8_t page_buffer [MAX_BLOCK_SZ];
					uint32_t page_start_addr = FLASH_START + (start_page * MAX_BLOCK_SZ);
 80009ac:	f897 3817 	ldrb.w	r3, [r7, #2071]	; 0x817
 80009b0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80009b4:	02db      	lsls	r3, r3, #11
 80009b6:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
					memcpy(page_buffer, page_start_addr, MAX_BLOCK_SZ);
 80009ba:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 80009be:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80009c2:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 80009c6:	4618      	mov	r0, r3
 80009c8:	4611      	mov	r1, r2
 80009ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009ce:	461a      	mov	r2, r3
 80009d0:	f002 ffc6 	bl	8003960 <memcpy>
					uint16_t index = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	f8a7 3810 	strh.w	r3, [r7, #2064]	; 0x810
					for(; index < delta_sz; index++)
 80009da:	e012      	b.n	8000a02 <Delta_FW_Upgrade+0x122>
						page_buffer[index + offset] = transaction_buf[index];
 80009dc:	f8b7 2810 	ldrh.w	r2, [r7, #2064]	; 0x810
 80009e0:	f8b7 1810 	ldrh.w	r1, [r7, #2064]	; 0x810
 80009e4:	f8b7 3814 	ldrh.w	r3, [r7, #2068]	; 0x814
 80009e8:	440b      	add	r3, r1
 80009ea:	4916      	ldr	r1, [pc, #88]	; (8000a44 <Delta_FW_Upgrade+0x164>)
 80009ec:	5c89      	ldrb	r1, [r1, r2]
 80009ee:	f607 0218 	addw	r2, r7, #2072	; 0x818
 80009f2:	f6a2 0214 	subw	r2, r2, #2068	; 0x814
 80009f6:	54d1      	strb	r1, [r2, r3]
					for(; index < delta_sz; index++)
 80009f8:	f8b7 3810 	ldrh.w	r3, [r7, #2064]	; 0x810
 80009fc:	3301      	adds	r3, #1
 80009fe:	f8a7 3810 	strh.w	r3, [r7, #2064]	; 0x810
 8000a02:	f8b7 2810 	ldrh.w	r2, [r7, #2064]	; 0x810
 8000a06:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	; 0x812
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d3e6      	bcc.n	80009dc <Delta_FW_Upgrade+0xfc>
					ret_code = program_flash(page_buffer, MAX_BLOCK_SZ, start_page, 1, page_start_addr);
 8000a0e:	f897 2817 	ldrb.w	r2, [r7, #2071]	; 0x817
 8000a12:	1d38      	adds	r0, r7, #4
 8000a14:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8000a18:	9300      	str	r3, [sp, #0]
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a20:	f000 f812 	bl	8000a48 <program_flash>
 8000a24:	4603      	mov	r3, r0
 8000a26:	f887 380d 	strb.w	r3, [r7, #2061]	; 0x80d
					delta_sz = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f8a7 3812 	strh.w	r3, [r7, #2066]	; 0x812
				while(delta_sz)
 8000a30:	f8b7 3812 	ldrh.w	r3, [r7, #2066]	; 0x812
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1a9      	bne.n	800098c <Delta_FW_Upgrade+0xac>


				}
				start_app();
 8000a38:	f000 f8a8 	bl	8000b8c <start_app>
			UART_getc(&huart1, &c);
 8000a3c:	e766      	b.n	800090c <Delta_FW_Upgrade+0x2c>
 8000a3e:	bf00      	nop
 8000a40:	20000040 	.word	0x20000040
 8000a44:	200000c4 	.word	0x200000c4

08000a48 <program_flash>:
		}

}

static HAL_StatusTypeDef program_flash(uint8_t * data, uint16_t len, uint8_t page_num, uint8_t num_pages, uint32_t start_addr)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	4608      	mov	r0, r1
 8000a52:	4611      	mov	r1, r2
 8000a54:	461a      	mov	r2, r3
 8000a56:	4603      	mov	r3, r0
 8000a58:	807b      	strh	r3, [r7, #2]
 8000a5a:	460b      	mov	r3, r1
 8000a5c:	707b      	strb	r3, [r7, #1]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	703b      	strb	r3, [r7, #0]
	HAL_StatusTypeDef code;
	uint32_t Page_Error;
	uint64_t Program_Buf;
	uint16_t index = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	84fb      	strh	r3, [r7, #38]	; 0x26
	code = HAL_FLASH_Unlock();
 8000a66:	f000 fc91 	bl	800138c <HAL_FLASH_Unlock>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	if(code != HAL_OK)
 8000a70:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d004      	beq.n	8000a82 <program_flash+0x3a>
	{
		//const char * s = "FLASH UNLOCK FAILED!\n";
		Error();
 8000a78:	f000 f87a 	bl	8000b70 <Error>
		return code;
 8000a7c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000a80:	e05b      	b.n	8000b3a <program_flash+0xf2>
	}

	FLASH_EraseInitTypeDef EStruct;
	EStruct.Banks = FLASH_BANK_1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
	EStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
	EStruct.Page = (uint32_t)page_num;
 8000a8a:	787b      	ldrb	r3, [r7, #1]
 8000a8c:	613b      	str	r3, [r7, #16]
	EStruct.NbPages = (uint32_t) num_pages;
 8000a8e:	783b      	ldrb	r3, [r7, #0]
 8000a90:	617b      	str	r3, [r7, #20]
	code = HAL_FLASHEx_Erase(&EStruct, &Page_Error);
 8000a92:	f107 0220 	add.w	r2, r7, #32
 8000a96:	f107 0308 	add.w	r3, r7, #8
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 fd5b 	bl	8001558 <HAL_FLASHEx_Erase>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	if(code != HAL_OK)
 8000aa8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d030      	beq.n	8000b12 <program_flash+0xca>
	{
		//const char * s = "ERASE FLASH FAILED!\n";
		Error();
 8000ab0:	f000 f85e 	bl	8000b70 <Error>
		return code;
 8000ab4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000ab8:	e03f      	b.n	8000b3a <program_flash+0xf2>
 8000aba:	f04f 0200 	mov.w	r2, #0
 8000abe:	f04f 0300 	mov.w	r3, #0
 8000ac2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}
	for(; index < len; index+=8)
	{
		memset(&Program_Buf, 0, sizeof(uint64_t));
		memcpy(&Program_Buf, data+index, sizeof(uint64_t) > len - index ? len - index : sizeof(uint64_t));
 8000ac6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	18d1      	adds	r1, r2, r3
 8000acc:	887a      	ldrh	r2, [r7, #2]
 8000ace:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	2b08      	cmp	r3, #8
 8000ad4:	bf28      	it	cs
 8000ad6:	2308      	movcs	r3, #8
 8000ad8:	461a      	mov	r2, r3
 8000ada:	f107 0318 	add.w	r3, r7, #24
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f002 ff3e 	bl	8003960 <memcpy>
		code = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, start_addr+index, Program_Buf);
 8000ae4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ae8:	18d1      	adds	r1, r2, r3
 8000aea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 fbe0 	bl	80012b4 <HAL_FLASH_Program>
 8000af4:	4603      	mov	r3, r0
 8000af6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if(code != HAL_OK)
 8000afa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d004      	beq.n	8000b0c <program_flash+0xc4>
		{
			//const char * s = "PROGRAM FLASH FAILED!\n";
			Error();
 8000b02:	f000 f835 	bl	8000b70 <Error>
			return code;
 8000b06:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000b0a:	e016      	b.n	8000b3a <program_flash+0xf2>
	for(; index < len; index+=8)
 8000b0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b0e:	3308      	adds	r3, #8
 8000b10:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000b12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000b14:	887b      	ldrh	r3, [r7, #2]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d3cf      	bcc.n	8000aba <program_flash+0x72>
		}

	}
	code = HAL_FLASH_Lock();
 8000b1a:	f000 fc59 	bl	80013d0 <HAL_FLASH_Lock>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	if(code != HAL_OK)
 8000b24:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d004      	beq.n	8000b36 <program_flash+0xee>
	{
		//const char * s = "FLASH LOCK FAILED!\n";
		Error();
 8000b2c:	f000 f820 	bl	8000b70 <Error>
		return code;
 8000b30:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000b34:	e001      	b.n	8000b3a <program_flash+0xf2>
	}
	return code;
 8000b36:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25

}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3728      	adds	r7, #40	; 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <flash_mass_erase>:
static void flash_mass_erase()
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef EStruct;
	HAL_StatusTypeDef code;
	uint32_t Page_Error;
	EStruct.Banks = FLASH_BANK_1;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
	EStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
	EStruct.Page = (uint32_t)APP_INFO_PAGE_NUM;
 8000b50:	2310      	movs	r3, #16
 8000b52:	60fb      	str	r3, [r7, #12]
	EStruct.NbPages = 112;
 8000b54:	2370      	movs	r3, #112	; 0x70
 8000b56:	613b      	str	r3, [r7, #16]
	code = HAL_FLASHEx_Erase(&EStruct, &Page_Error);
 8000b58:	463a      	mov	r2, r7
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 fcfa 	bl	8001558 <HAL_FLASHEx_Erase>
 8000b64:	4603      	mov	r3, r0
 8000b66:	75fb      	strb	r3, [r7, #23]
}
 8000b68:	bf00      	nop
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <Error>:
static void Error()
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 8000b74:	2108      	movs	r1, #8
 8000b76:	4804      	ldr	r0, [pc, #16]	; (8000b88 <Error+0x18>)
 8000b78:	f000 ff96 	bl	8001aa8 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000b7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b80:	f000 f9a4 	bl	8000ecc <HAL_Delay>
		HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 8000b84:	e7f6      	b.n	8000b74 <Error+0x4>
 8000b86:	bf00      	nop
 8000b88:	48000400 	.word	0x48000400

08000b8c <start_app>:
	}
}

static void start_app(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
	void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*)(APP_START_ADDR + 4U)));
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <start_app+0x3c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	607b      	str	r3, [r7, #4]
	if( app_reset_handler == (void*)0xFFFFFFFF )
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b9e:	d101      	bne.n	8000ba4 <start_app+0x18>
	{
		Error();
 8000ba0:	f7ff ffe6 	bl	8000b70 <Error>
	}
	__set_MSP(*(volatile uint32_t*) APP_START_ADDR);
 8000ba4:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <start_app+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	f383 8808 	msr	MSP, r3
}
 8000bb0:	bf00      	nop
	HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET );
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2108      	movs	r1, #8
 8000bb6:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <start_app+0x44>)
 8000bb8:	f000 ff5e 	bl	8001a78 <HAL_GPIO_WritePin>
	app_reset_handler();
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4798      	blx	r3

}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	08008804 	.word	0x08008804
 8000bcc:	08008800 	.word	0x08008800
 8000bd0:	48000400 	.word	0x48000400

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <Error_Handler+0x8>
	...

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <HAL_MspInit+0x44>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <HAL_MspInit+0x44>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <HAL_MspInit+0x44>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_MspInit+0x44>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_MspInit+0x44>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	6593      	str	r3, [r2, #88]	; 0x58
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_MspInit+0x44>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40021000 	.word	0x40021000

08000c28 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <HAL_CRC_MspInit+0x38>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d10b      	bne.n	8000c52 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <HAL_CRC_MspInit+0x3c>)
 8000c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c3e:	4a09      	ldr	r2, [pc, #36]	; (8000c64 <HAL_CRC_MspInit+0x3c>)
 8000c40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c44:	6493      	str	r3, [r2, #72]	; 0x48
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <HAL_CRC_MspInit+0x3c>)
 8000c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000c52:	bf00      	nop
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40023000 	.word	0x40023000
 8000c64:	40021000 	.word	0x40021000

08000c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b09e      	sub	sp, #120	; 0x78
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	2254      	movs	r2, #84	; 0x54
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f002 fe77 	bl	800397c <memset>
  if(huart->Instance==USART1)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a1f      	ldr	r2, [pc, #124]	; (8000d10 <HAL_UART_MspInit+0xa8>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d137      	bne.n	8000d08 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 fdb5 	bl	8002814 <HAL_RCCEx_PeriphCLKConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cb0:	f7ff ff90 	bl	8000bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <HAL_UART_MspInit+0xac>)
 8000cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cb8:	4a16      	ldr	r2, [pc, #88]	; (8000d14 <HAL_UART_MspInit+0xac>)
 8000cba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbe:	6613      	str	r3, [r2, #96]	; 0x60
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <HAL_UART_MspInit+0xac>)
 8000cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_UART_MspInit+0xac>)
 8000cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd0:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <HAL_UART_MspInit+0xac>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_UART_MspInit+0xac>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8000ce4:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8000ce8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cf6:	2307      	movs	r3, #7
 8000cf8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d04:	f000 fd4e 	bl	80017a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d08:	bf00      	nop
 8000d0a:	3778      	adds	r7, #120	; 0x78
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40013800 	.word	0x40013800
 8000d14:	40021000 	.word	0x40021000

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <NMI_Handler+0x4>

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d64:	f000 f892 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <SystemInit+0x20>)
 8000d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <SystemInit+0x20>)
 8000d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d94:	f7ff ffea 	bl	8000d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d98:	480c      	ldr	r0, [pc, #48]	; (8000dcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000d9a:	490d      	ldr	r1, [pc, #52]	; (8000dd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <LoopForever+0xe>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000db0:	4c0a      	ldr	r4, [pc, #40]	; (8000ddc <LoopForever+0x16>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dbe:	f002 fdab 	bl	8003918 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dc2:	f7ff fb85 	bl	80004d0 <main>

08000dc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc6:	e7fe      	b.n	8000dc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000dcc:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8000dd0:	10000090 	.word	0x10000090
  ldr r2, =_sidata
 8000dd4:	08003c18 	.word	0x08003c18
  ldr r2, =_sbss
 8000dd8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ddc:	200008c8 	.word	0x200008c8

08000de0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC1_IRQHandler>

08000de2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 f943 	bl	8001078 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000df2:	200f      	movs	r0, #15
 8000df4:	f000 f80e 	bl	8000e14 <HAL_InitTick>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d002      	beq.n	8000e04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	71fb      	strb	r3, [r7, #7]
 8000e02:	e001      	b.n	8000e08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e04:	f7ff feec 	bl	8000be0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e08:	79fb      	ldrb	r3, [r7, #7]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_InitTick+0x6c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d023      	beq.n	8000e70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <HAL_InitTick+0x70>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_InitTick+0x6c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f941 	bl	80010c6 <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d10f      	bne.n	8000e6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b0f      	cmp	r3, #15
 8000e4e:	d809      	bhi.n	8000e64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e50:	2200      	movs	r2, #0
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	f000 f919 	bl	800108e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_InitTick+0x74>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	e007      	b.n	8000e74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]
 8000e68:	e004      	b.n	8000e74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	73fb      	strb	r3, [r7, #15]
 8000e6e:	e001      	b.n	8000e74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	10000008 	.word	0x10000008
 8000e84:	10000000 	.word	0x10000000
 8000e88:	10000004 	.word	0x10000004

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	10000008 	.word	0x10000008
 8000eb0:	200008c4 	.word	0x200008c4

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200008c4 	.word	0x200008c4

08000ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff ffee 	bl	8000eb4 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee4:	d005      	beq.n	8000ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_Delay+0x44>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ef2:	bf00      	nop
 8000ef4:	f7ff ffde 	bl	8000eb4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f7      	bhi.n	8000ef4 <HAL_Delay+0x28>
  {
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	10000008 	.word	0x10000008

08000f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <__NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db0a      	blt.n	8000fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	490c      	ldr	r1, [pc, #48]	; (8000fc4 <__NVIC_SetPriority+0x4c>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	0112      	lsls	r2, r2, #4
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa0:	e00a      	b.n	8000fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <__NVIC_SetPriority+0x50>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	761a      	strb	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43da      	mvns	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43d9      	mvns	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	4313      	orrs	r3, r2
         );
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001044:	d301      	bcc.n	800104a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001046:	2301      	movs	r3, #1
 8001048:	e00f      	b.n	800106a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <SysTick_Config+0x40>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001052:	210f      	movs	r1, #15
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f7ff ff8e 	bl	8000f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <SysTick_Config+0x40>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <SysTick_Config+0x40>)
 8001064:	2207      	movs	r2, #7
 8001066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	e000e010 	.word	0xe000e010

08001078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff47 	bl	8000f14 <__NVIC_SetPriorityGrouping>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010a0:	f7ff ff5c 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 80010a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	68b9      	ldr	r1, [r7, #8]
 80010aa:	6978      	ldr	r0, [r7, #20]
 80010ac:	f7ff ff8e 	bl	8000fcc <NVIC_EncodePriority>
 80010b0:	4602      	mov	r2, r0
 80010b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff5d 	bl	8000f78 <__NVIC_SetPriority>
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ffb0 	bl	8001034 <SysTick_Config>
 80010d4:	4603      	mov	r3, r0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e054      	b.n	800119c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	7f5b      	ldrb	r3, [r3, #29]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d105      	bne.n	8001108 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff fd90 	bl	8000c28 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2202      	movs	r2, #2
 800110c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	791b      	ldrb	r3, [r3, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10c      	bne.n	8001130 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a22      	ldr	r2, [pc, #136]	; (80011a4 <HAL_CRC_Init+0xc4>)
 800111c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 0218 	bic.w	r2, r2, #24
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	e00c      	b.n	800114a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6899      	ldr	r1, [r3, #8]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	461a      	mov	r2, r3
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f834 	bl	80011a8 <HAL_CRCEx_Polynomial_Set>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e028      	b.n	800119c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	795b      	ldrb	r3, [r3, #5]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d105      	bne.n	800115e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f04f 32ff 	mov.w	r2, #4294967295
 800115a:	611a      	str	r2, [r3, #16]
 800115c:	e004      	b.n	8001168 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	6912      	ldr	r2, [r2, #16]
 8001166:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	695a      	ldr	r2, [r3, #20]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	430a      	orrs	r2, r1
 800117c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	699a      	ldr	r2, [r3, #24]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	430a      	orrs	r2, r1
 8001192:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2201      	movs	r2, #1
 8001198:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	04c11db7 	.word	0x04c11db7

080011a8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011b4:	2300      	movs	r3, #0
 80011b6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80011b8:	231f      	movs	r3, #31
 80011ba:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80011bc:	bf00      	nop
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1e5a      	subs	r2, r3, #1
 80011c2:	613a      	str	r2, [r7, #16]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d009      	beq.n	80011dc <HAL_CRCEx_Polynomial_Set+0x34>
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	f003 031f 	and.w	r3, r3, #31
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	fa22 f303 	lsr.w	r3, r2, r3
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0f0      	beq.n	80011be <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b18      	cmp	r3, #24
 80011e0:	d846      	bhi.n	8001270 <HAL_CRCEx_Polynomial_Set+0xc8>
 80011e2:	a201      	add	r2, pc, #4	; (adr r2, 80011e8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80011e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e8:	08001277 	.word	0x08001277
 80011ec:	08001271 	.word	0x08001271
 80011f0:	08001271 	.word	0x08001271
 80011f4:	08001271 	.word	0x08001271
 80011f8:	08001271 	.word	0x08001271
 80011fc:	08001271 	.word	0x08001271
 8001200:	08001271 	.word	0x08001271
 8001204:	08001271 	.word	0x08001271
 8001208:	08001265 	.word	0x08001265
 800120c:	08001271 	.word	0x08001271
 8001210:	08001271 	.word	0x08001271
 8001214:	08001271 	.word	0x08001271
 8001218:	08001271 	.word	0x08001271
 800121c:	08001271 	.word	0x08001271
 8001220:	08001271 	.word	0x08001271
 8001224:	08001271 	.word	0x08001271
 8001228:	08001259 	.word	0x08001259
 800122c:	08001271 	.word	0x08001271
 8001230:	08001271 	.word	0x08001271
 8001234:	08001271 	.word	0x08001271
 8001238:	08001271 	.word	0x08001271
 800123c:	08001271 	.word	0x08001271
 8001240:	08001271 	.word	0x08001271
 8001244:	08001271 	.word	0x08001271
 8001248:	0800124d 	.word	0x0800124d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	2b06      	cmp	r3, #6
 8001250:	d913      	bls.n	800127a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001256:	e010      	b.n	800127a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	2b07      	cmp	r3, #7
 800125c:	d90f      	bls.n	800127e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001262:	e00c      	b.n	800127e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	2b0f      	cmp	r3, #15
 8001268:	d90b      	bls.n	8001282 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800126e:	e008      	b.n	8001282 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	75fb      	strb	r3, [r7, #23]
      break;
 8001274:	e006      	b.n	8001284 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001276:	bf00      	nop
 8001278:	e004      	b.n	8001284 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800127a:	bf00      	nop
 800127c:	e002      	b.n	8001284 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800127e:	bf00      	nop
 8001280:	e000      	b.n	8001284 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001282:	bf00      	nop
  }
  if (status == HAL_OK)
 8001284:	7dfb      	ldrb	r3, [r7, #23]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10d      	bne.n	80012a6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f023 0118 	bic.w	r1, r3, #24
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	430a      	orrs	r2, r1
 80012a4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80012a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	371c      	adds	r7, #28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80012c6:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <HAL_FLASH_Program+0xd0>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d101      	bne.n	80012d2 <HAL_FLASH_Program+0x1e>
 80012ce:	2302      	movs	r3, #2
 80012d0:	e053      	b.n	800137a <HAL_FLASH_Program+0xc6>
 80012d2:	4b2c      	ldr	r3, [pc, #176]	; (8001384 <HAL_FLASH_Program+0xd0>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012dc:	f000 f888 	bl	80013f0 <FLASH_WaitForLastOperation>
 80012e0:	4603      	mov	r3, r0
 80012e2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d143      	bne.n	8001372 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <HAL_FLASH_Program+0xd0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80012f0:	4b25      	ldr	r3, [pc, #148]	; (8001388 <HAL_FLASH_Program+0xd4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d009      	beq.n	8001310 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <HAL_FLASH_Program+0xd4>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a21      	ldr	r2, [pc, #132]	; (8001388 <HAL_FLASH_Program+0xd4>)
 8001302:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001306:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001308:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <HAL_FLASH_Program+0xd0>)
 800130a:	2202      	movs	r2, #2
 800130c:	771a      	strb	r2, [r3, #28]
 800130e:	e002      	b.n	8001316 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001310:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <HAL_FLASH_Program+0xd0>)
 8001312:	2200      	movs	r2, #0
 8001314:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d107      	bne.n	800132c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800131c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001320:	68b8      	ldr	r0, [r7, #8]
 8001322:	f000 f8bd 	bl	80014a0 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8001326:	2301      	movs	r3, #1
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	e010      	b.n	800134e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d002      	beq.n	8001338 <HAL_FLASH_Program+0x84>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d10a      	bne.n	800134e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	4619      	mov	r1, r3
 800133c:	68b8      	ldr	r0, [r7, #8]
 800133e:	f000 f8d5 	bl	80014ec <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d102      	bne.n	800134e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001348:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800134c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800134e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001352:	f000 f84d 	bl	80013f0 <FLASH_WaitForLastOperation>
 8001356:	4603      	mov	r3, r0
 8001358:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001360:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HAL_FLASH_Program+0xd4>)
 8001362:	695a      	ldr	r2, [r3, #20]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	4907      	ldr	r1, [pc, #28]	; (8001388 <HAL_FLASH_Program+0xd4>)
 800136a:	4013      	ands	r3, r2
 800136c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800136e:	f000 f9cf 	bl	8001710 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <HAL_FLASH_Program+0xd0>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]

  return status;
 8001378:	7dfb      	ldrb	r3, [r7, #23]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	1000000c 	.word	0x1000000c
 8001388:	40022000 	.word	0x40022000

0800138c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_FLASH_Unlock+0x38>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	2b00      	cmp	r3, #0
 800139c:	da0b      	bge.n	80013b6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <HAL_FLASH_Unlock+0x38>)
 80013a0:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <HAL_FLASH_Unlock+0x3c>)
 80013a2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <HAL_FLASH_Unlock+0x38>)
 80013a6:	4a09      	ldr	r2, [pc, #36]	; (80013cc <HAL_FLASH_Unlock+0x40>)
 80013a8:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_FLASH_Unlock+0x38>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	da01      	bge.n	80013b6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80013b6:	79fb      	ldrb	r3, [r7, #7]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	40022000 	.word	0x40022000
 80013c8:	45670123 	.word	0x45670123
 80013cc:	cdef89ab 	.word	0xcdef89ab

080013d0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <HAL_FLASH_Lock+0x1c>)
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_FLASH_Lock+0x1c>)
 80013da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80013de:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	40022000 	.word	0x40022000

080013f0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80013f8:	f7ff fd5c 	bl	8000eb4 <HAL_GetTick>
 80013fc:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80013fe:	e00d      	b.n	800141c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001406:	d009      	beq.n	800141c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001408:	f7ff fd54 	bl	8000eb4 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	d801      	bhi.n	800141c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e036      	b.n	800148a <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <FLASH_WaitForLastOperation+0xa4>)
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1eb      	bne.n	8001400 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <FLASH_WaitForLastOperation+0xa4>)
 800142a:	691a      	ldr	r2, [r3, #16]
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <FLASH_WaitForLastOperation+0xa8>)
 800142e:	4013      	ands	r3, r2
 8001430:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d01e      	beq.n	8001476 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8001438:	4b18      	ldr	r3, [pc, #96]	; (800149c <FLASH_WaitForLastOperation+0xac>)
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	4313      	orrs	r3, r2
 8001440:	4a16      	ldr	r2, [pc, #88]	; (800149c <FLASH_WaitForLastOperation+0xac>)
 8001442:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d007      	beq.n	800145e <FLASH_WaitForLastOperation+0x6e>
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <FLASH_WaitForLastOperation+0xa4>)
 8001450:	699a      	ldr	r2, [r3, #24]
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001458:	490e      	ldr	r1, [pc, #56]	; (8001494 <FLASH_WaitForLastOperation+0xa4>)
 800145a:	4313      	orrs	r3, r2
 800145c:	618b      	str	r3, [r1, #24]
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d004      	beq.n	8001472 <FLASH_WaitForLastOperation+0x82>
 8001468:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <FLASH_WaitForLastOperation+0xa4>)
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001470:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e009      	b.n	800148a <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <FLASH_WaitForLastOperation+0xa4>)
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d002      	beq.n	8001488 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <FLASH_WaitForLastOperation+0xa4>)
 8001484:	2201      	movs	r2, #1
 8001486:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40022000 	.word	0x40022000
 8001498:	0002c3fa 	.word	0x0002c3fa
 800149c:	1000000c 	.word	0x1000000c

080014a0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80014ac:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <FLASH_Program_DoubleWord+0x48>)
 80014ae:	695b      	ldr	r3, [r3, #20]
 80014b0:	4a0d      	ldr	r2, [pc, #52]	; (80014e8 <FLASH_Program_DoubleWord+0x48>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80014be:	f3bf 8f6f 	isb	sy
}
 80014c2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80014c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	000a      	movs	r2, r1
 80014d2:	2300      	movs	r3, #0
 80014d4:	68f9      	ldr	r1, [r7, #12]
 80014d6:	3104      	adds	r1, #4
 80014d8:	4613      	mov	r3, r2
 80014da:	600b      	str	r3, [r1, #0]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	40022000 	.word	0x40022000

080014ec <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80014f6:	2340      	movs	r3, #64	; 0x40
 80014f8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <FLASH_Program_Fast+0x68>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	4a13      	ldr	r2, [pc, #76]	; (8001554 <FLASH_Program_Fast+0x68>)
 8001508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800150c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800150e:	f3ef 8310 	mrs	r3, PRIMASK
 8001512:	60fb      	str	r3, [r7, #12]
  return(result);
 8001514:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8001516:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001518:	b672      	cpsid	i
}
 800151a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	3304      	adds	r3, #4
 8001528:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	3304      	adds	r3, #4
 800152e:	617b      	str	r3, [r7, #20]
    row_index--;
 8001530:	7ffb      	ldrb	r3, [r7, #31]
 8001532:	3b01      	subs	r3, #1
 8001534:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8001536:	7ffb      	ldrb	r3, [r7, #31]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1ef      	bne.n	800151c <FLASH_Program_Fast+0x30>
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	f383 8810 	msr	PRIMASK, r3
}
 8001546:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8001548:	bf00      	nop
 800154a:	3724      	adds	r7, #36	; 0x24
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40022000 	.word	0x40022000

08001558 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001562:	4b48      	ldr	r3, [pc, #288]	; (8001684 <HAL_FLASHEx_Erase+0x12c>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <HAL_FLASHEx_Erase+0x16>
 800156a:	2302      	movs	r3, #2
 800156c:	e085      	b.n	800167a <HAL_FLASHEx_Erase+0x122>
 800156e:	4b45      	ldr	r3, [pc, #276]	; (8001684 <HAL_FLASHEx_Erase+0x12c>)
 8001570:	2201      	movs	r2, #1
 8001572:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001574:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001578:	f7ff ff3a 	bl	80013f0 <FLASH_WaitForLastOperation>
 800157c:	4603      	mov	r3, r0
 800157e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d175      	bne.n	8001672 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001586:	4b3f      	ldr	r3, [pc, #252]	; (8001684 <HAL_FLASHEx_Erase+0x12c>)
 8001588:	2200      	movs	r2, #0
 800158a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800158c:	4b3e      	ldr	r3, [pc, #248]	; (8001688 <HAL_FLASHEx_Erase+0x130>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001594:	2b00      	cmp	r3, #0
 8001596:	d013      	beq.n	80015c0 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001598:	4b3b      	ldr	r3, [pc, #236]	; (8001688 <HAL_FLASHEx_Erase+0x130>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d009      	beq.n	80015b8 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80015a4:	4b38      	ldr	r3, [pc, #224]	; (8001688 <HAL_FLASHEx_Erase+0x130>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a37      	ldr	r2, [pc, #220]	; (8001688 <HAL_FLASHEx_Erase+0x130>)
 80015aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015ae:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80015b0:	4b34      	ldr	r3, [pc, #208]	; (8001684 <HAL_FLASHEx_Erase+0x12c>)
 80015b2:	2203      	movs	r2, #3
 80015b4:	771a      	strb	r2, [r3, #28]
 80015b6:	e016      	b.n	80015e6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80015b8:	4b32      	ldr	r3, [pc, #200]	; (8001684 <HAL_FLASHEx_Erase+0x12c>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	771a      	strb	r2, [r3, #28]
 80015be:	e012      	b.n	80015e6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80015c0:	4b31      	ldr	r3, [pc, #196]	; (8001688 <HAL_FLASHEx_Erase+0x130>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d009      	beq.n	80015e0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80015cc:	4b2e      	ldr	r3, [pc, #184]	; (8001688 <HAL_FLASHEx_Erase+0x130>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a2d      	ldr	r2, [pc, #180]	; (8001688 <HAL_FLASHEx_Erase+0x130>)
 80015d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015d6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80015d8:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <HAL_FLASHEx_Erase+0x12c>)
 80015da:	2202      	movs	r2, #2
 80015dc:	771a      	strb	r2, [r3, #28]
 80015de:	e002      	b.n	80015e6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80015e0:	4b28      	ldr	r3, [pc, #160]	; (8001684 <HAL_FLASHEx_Erase+0x12c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d111      	bne.n	8001612 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f84a 	bl	800168c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015fc:	f7ff fef8 	bl	80013f0 <FLASH_WaitForLastOperation>
 8001600:	4603      	mov	r3, r0
 8001602:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8001604:	4b20      	ldr	r3, [pc, #128]	; (8001688 <HAL_FLASHEx_Erase+0x130>)
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	4a1f      	ldr	r2, [pc, #124]	; (8001688 <HAL_FLASHEx_Erase+0x130>)
 800160a:	f023 0304 	bic.w	r3, r3, #4
 800160e:	6153      	str	r3, [r2, #20]
 8001610:	e02d      	b.n	800166e <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	f04f 32ff 	mov.w	r2, #4294967295
 8001618:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	e01d      	b.n	800165e <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	4619      	mov	r1, r3
 8001628:	68b8      	ldr	r0, [r7, #8]
 800162a:	f000 f84d 	bl	80016c8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800162e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001632:	f7ff fedd 	bl	80013f0 <FLASH_WaitForLastOperation>
 8001636:	4603      	mov	r3, r0
 8001638:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <HAL_FLASHEx_Erase+0x130>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	4a12      	ldr	r2, [pc, #72]	; (8001688 <HAL_FLASHEx_Erase+0x130>)
 8001640:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8001644:	f023 0302 	bic.w	r3, r3, #2
 8001648:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	601a      	str	r2, [r3, #0]
          break;
 8001656:	e00a      	b.n	800166e <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	3301      	adds	r3, #1
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	4413      	add	r3, r2
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	429a      	cmp	r2, r3
 800166c:	d3d9      	bcc.n	8001622 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800166e:	f000 f84f 	bl	8001710 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001672:	4b04      	ldr	r3, [pc, #16]	; (8001684 <HAL_FLASHEx_Erase+0x12c>)
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]

  return status;
 8001678:	7bfb      	ldrb	r3, [r7, #15]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	1000000c 	.word	0x1000000c
 8001688:	40022000 	.word	0x40022000

0800168c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d005      	beq.n	80016aa <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <FLASH_MassErase+0x38>)
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <FLASH_MassErase+0x38>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <FLASH_MassErase+0x38>)
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <FLASH_MassErase+0x38>)
 80016b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b4:	6153      	str	r3, [r2, #20]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40022000 	.word	0x40022000

080016c8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <FLASH_PageErase+0x44>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80016e2:	490a      	ldr	r1, [pc, #40]	; (800170c <FLASH_PageErase+0x44>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <FLASH_PageErase+0x44>)
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	4a07      	ldr	r2, [pc, #28]	; (800170c <FLASH_PageErase+0x44>)
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <FLASH_PageErase+0x44>)
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	4a04      	ldr	r2, [pc, #16]	; (800170c <FLASH_PageErase+0x44>)
 80016fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fe:	6153      	str	r3, [r2, #20]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40022000 	.word	0x40022000

08001710 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8001716:	4b21      	ldr	r3, [pc, #132]	; (800179c <FLASH_FlushCaches+0x8c>)
 8001718:	7f1b      	ldrb	r3, [r3, #28]
 800171a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d002      	beq.n	8001728 <FLASH_FlushCaches+0x18>
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	2b03      	cmp	r3, #3
 8001726:	d117      	bne.n	8001758 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001728:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <FLASH_FlushCaches+0x90>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1c      	ldr	r2, [pc, #112]	; (80017a0 <FLASH_FlushCaches+0x90>)
 800172e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001732:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <FLASH_FlushCaches+0x90>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a19      	ldr	r2, [pc, #100]	; (80017a0 <FLASH_FlushCaches+0x90>)
 800173a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <FLASH_FlushCaches+0x90>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a16      	ldr	r2, [pc, #88]	; (80017a0 <FLASH_FlushCaches+0x90>)
 8001746:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800174a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <FLASH_FlushCaches+0x90>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <FLASH_FlushCaches+0x90>)
 8001752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001756:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d002      	beq.n	8001764 <FLASH_FlushCaches+0x54>
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b03      	cmp	r3, #3
 8001762:	d111      	bne.n	8001788 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <FLASH_FlushCaches+0x90>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <FLASH_FlushCaches+0x90>)
 800176a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <FLASH_FlushCaches+0x90>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <FLASH_FlushCaches+0x90>)
 8001776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800177a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <FLASH_FlushCaches+0x90>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <FLASH_FlushCaches+0x90>)
 8001782:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001786:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <FLASH_FlushCaches+0x8c>)
 800178a:	2200      	movs	r2, #0
 800178c:	771a      	strb	r2, [r3, #28]
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	1000000c 	.word	0x1000000c
 80017a0:	40022000 	.word	0x40022000

080017a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b087      	sub	sp, #28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b2:	e148      	b.n	8001a46 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2101      	movs	r1, #1
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	4013      	ands	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 813a 	beq.w	8001a40 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d005      	beq.n	80017e4 <HAL_GPIO_Init+0x40>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d130      	bne.n	8001846 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800181a:	2201      	movs	r2, #1
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	091b      	lsrs	r3, r3, #4
 8001830:	f003 0201 	and.w	r2, r3, #1
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b03      	cmp	r3, #3
 8001850:	d017      	beq.n	8001882 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	2203      	movs	r2, #3
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d123      	bne.n	80018d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	08da      	lsrs	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3208      	adds	r2, #8
 8001896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	220f      	movs	r2, #15
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	691a      	ldr	r2, [r3, #16]
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	08da      	lsrs	r2, r3, #3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3208      	adds	r2, #8
 80018d0:	6939      	ldr	r1, [r7, #16]
 80018d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	2203      	movs	r2, #3
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 0203 	and.w	r2, r3, #3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 8094 	beq.w	8001a40 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001918:	4b52      	ldr	r3, [pc, #328]	; (8001a64 <HAL_GPIO_Init+0x2c0>)
 800191a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191c:	4a51      	ldr	r2, [pc, #324]	; (8001a64 <HAL_GPIO_Init+0x2c0>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6613      	str	r3, [r2, #96]	; 0x60
 8001924:	4b4f      	ldr	r3, [pc, #316]	; (8001a64 <HAL_GPIO_Init+0x2c0>)
 8001926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001930:	4a4d      	ldr	r2, [pc, #308]	; (8001a68 <HAL_GPIO_Init+0x2c4>)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	3302      	adds	r3, #2
 8001938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	220f      	movs	r2, #15
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800195a:	d00d      	beq.n	8001978 <HAL_GPIO_Init+0x1d4>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a43      	ldr	r2, [pc, #268]	; (8001a6c <HAL_GPIO_Init+0x2c8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d007      	beq.n	8001974 <HAL_GPIO_Init+0x1d0>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a42      	ldr	r2, [pc, #264]	; (8001a70 <HAL_GPIO_Init+0x2cc>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d101      	bne.n	8001970 <HAL_GPIO_Init+0x1cc>
 800196c:	2302      	movs	r3, #2
 800196e:	e004      	b.n	800197a <HAL_GPIO_Init+0x1d6>
 8001970:	2307      	movs	r3, #7
 8001972:	e002      	b.n	800197a <HAL_GPIO_Init+0x1d6>
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <HAL_GPIO_Init+0x1d6>
 8001978:	2300      	movs	r3, #0
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	f002 0203 	and.w	r2, r2, #3
 8001980:	0092      	lsls	r2, r2, #2
 8001982:	4093      	lsls	r3, r2
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800198a:	4937      	ldr	r1, [pc, #220]	; (8001a68 <HAL_GPIO_Init+0x2c4>)
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	089b      	lsrs	r3, r3, #2
 8001990:	3302      	adds	r3, #2
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001998:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019bc:	4a2d      	ldr	r2, [pc, #180]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019c2:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019e6:	4a23      	ldr	r2, [pc, #140]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019ec:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a10:	4a18      	ldr	r2, [pc, #96]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a3a:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <HAL_GPIO_Init+0x2d0>)
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	3301      	adds	r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f47f aeaf 	bne.w	80017b4 <HAL_GPIO_Init+0x10>
  }
}
 8001a56:	bf00      	nop
 8001a58:	bf00      	nop
 8001a5a:	371c      	adds	r7, #28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010000 	.word	0x40010000
 8001a6c:	48000400 	.word	0x48000400
 8001a70:	48000800 	.word	0x48000800
 8001a74:	40010400 	.word	0x40010400

08001a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
 8001a84:	4613      	mov	r3, r2
 8001a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a88:	787b      	ldrb	r3, [r7, #1]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a8e:	887a      	ldrh	r2, [r7, #2]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a94:	e002      	b.n	8001a9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a96:	887a      	ldrh	r2, [r7, #2]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aba:	887a      	ldrh	r2, [r7, #2]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	041a      	lsls	r2, r3, #16
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	43d9      	mvns	r1, r3
 8001ac6:	887b      	ldrh	r3, [r7, #2]
 8001ac8:	400b      	ands	r3, r1
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	619a      	str	r2, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40007000 	.word	0x40007000

08001af8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b06:	d130      	bne.n	8001b6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b08:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b14:	d038      	beq.n	8001b88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b16:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b26:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2232      	movs	r2, #50	; 0x32
 8001b2c:	fb02 f303 	mul.w	r3, r2, r3
 8001b30:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	0c9b      	lsrs	r3, r3, #18
 8001b38:	3301      	adds	r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b3c:	e002      	b.n	8001b44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b44:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b50:	d102      	bne.n	8001b58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f2      	bne.n	8001b3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b64:	d110      	bne.n	8001b88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e00f      	b.n	8001b8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b76:	d007      	beq.n	8001b88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b80:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	10000000 	.word	0x10000000
 8001ba0:	431bde83 	.word	0x431bde83

08001ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d102      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	f000 bc02 	b.w	80023bc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb8:	4b96      	ldr	r3, [pc, #600]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 030c 	and.w	r3, r3, #12
 8001bc0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bc2:	4b94      	ldr	r3, [pc, #592]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 80e4 	beq.w	8001da2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d007      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x4c>
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2b0c      	cmp	r3, #12
 8001be4:	f040 808b 	bne.w	8001cfe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	f040 8087 	bne.w	8001cfe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bf0:	4b88      	ldr	r3, [pc, #544]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_OscConfig+0x64>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e3d9      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a1a      	ldr	r2, [r3, #32]
 8001c0c:	4b81      	ldr	r3, [pc, #516]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0308 	and.w	r3, r3, #8
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <HAL_RCC_OscConfig+0x7e>
 8001c18:	4b7e      	ldr	r3, [pc, #504]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c20:	e005      	b.n	8001c2e <HAL_RCC_OscConfig+0x8a>
 8001c22:	4b7c      	ldr	r3, [pc, #496]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d223      	bcs.n	8001c7a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 fd8c 	bl	8002754 <RCC_SetFlashLatencyFromMSIRange>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e3ba      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c46:	4b73      	ldr	r3, [pc, #460]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a72      	ldr	r2, [pc, #456]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c4c:	f043 0308 	orr.w	r3, r3, #8
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b70      	ldr	r3, [pc, #448]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	496d      	ldr	r1, [pc, #436]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c64:	4b6b      	ldr	r3, [pc, #428]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	4968      	ldr	r1, [pc, #416]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]
 8001c78:	e025      	b.n	8001cc6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c7a:	4b66      	ldr	r3, [pc, #408]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a65      	ldr	r2, [pc, #404]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c80:	f043 0308 	orr.w	r3, r3, #8
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4b63      	ldr	r3, [pc, #396]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	4960      	ldr	r1, [pc, #384]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c98:	4b5e      	ldr	r3, [pc, #376]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	495b      	ldr	r1, [pc, #364]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d109      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 fd4c 	bl	8002754 <RCC_SetFlashLatencyFromMSIRange>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e37a      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cc6:	f000 fc81 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	4b51      	ldr	r3, [pc, #324]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	4950      	ldr	r1, [pc, #320]	; (8001e18 <HAL_RCC_OscConfig+0x274>)
 8001cd8:	5ccb      	ldrb	r3, [r1, r3]
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce2:	4a4e      	ldr	r2, [pc, #312]	; (8001e1c <HAL_RCC_OscConfig+0x278>)
 8001ce4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ce6:	4b4e      	ldr	r3, [pc, #312]	; (8001e20 <HAL_RCC_OscConfig+0x27c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff f892 	bl	8000e14 <HAL_InitTick>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d052      	beq.n	8001da0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	e35e      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d032      	beq.n	8001d6c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d06:	4b43      	ldr	r3, [pc, #268]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a42      	ldr	r2, [pc, #264]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d12:	f7ff f8cf 	bl	8000eb4 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d1a:	f7ff f8cb 	bl	8000eb4 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e347      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d2c:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d38:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a35      	ldr	r2, [pc, #212]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d3e:	f043 0308 	orr.w	r3, r3, #8
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	4b33      	ldr	r3, [pc, #204]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	4930      	ldr	r1, [pc, #192]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d56:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	492b      	ldr	r1, [pc, #172]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
 8001d6a:	e01a      	b.n	8001da2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d6c:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a28      	ldr	r2, [pc, #160]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d72:	f023 0301 	bic.w	r3, r3, #1
 8001d76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d78:	f7ff f89c 	bl	8000eb4 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d80:	f7ff f898 	bl	8000eb4 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e314      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d92:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x1dc>
 8001d9e:	e000      	b.n	8001da2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001da0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d073      	beq.n	8001e96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d005      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x21c>
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	2b0c      	cmp	r3, #12
 8001db8:	d10e      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d10b      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d063      	beq.n	8001e94 <HAL_RCC_OscConfig+0x2f0>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d15f      	bne.n	8001e94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e2f1      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de0:	d106      	bne.n	8001df0 <HAL_RCC_OscConfig+0x24c>
 8001de2:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a0b      	ldr	r2, [pc, #44]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e025      	b.n	8001e3c <HAL_RCC_OscConfig+0x298>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001df8:	d114      	bne.n	8001e24 <HAL_RCC_OscConfig+0x280>
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a02      	ldr	r2, [pc, #8]	; (8001e14 <HAL_RCC_OscConfig+0x270>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e013      	b.n	8001e3c <HAL_RCC_OscConfig+0x298>
 8001e14:	40021000 	.word	0x40021000
 8001e18:	08003abc 	.word	0x08003abc
 8001e1c:	10000000 	.word	0x10000000
 8001e20:	10000004 	.word	0x10000004
 8001e24:	4ba0      	ldr	r3, [pc, #640]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a9f      	ldr	r2, [pc, #636]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	4b9d      	ldr	r3, [pc, #628]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a9c      	ldr	r2, [pc, #624]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d013      	beq.n	8001e6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff f836 	bl	8000eb4 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e4c:	f7ff f832 	bl	8000eb4 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	; 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e2ae      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e5e:	4b92      	ldr	r3, [pc, #584]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x2a8>
 8001e6a:	e014      	b.n	8001e96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f822 	bl	8000eb4 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e74:	f7ff f81e 	bl	8000eb4 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	; 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e29a      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e86:	4b88      	ldr	r3, [pc, #544]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0x2d0>
 8001e92:	e000      	b.n	8001e96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d060      	beq.n	8001f64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x310>
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2b0c      	cmp	r3, #12
 8001eac:	d119      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d116      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb4:	4b7c      	ldr	r3, [pc, #496]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_OscConfig+0x328>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e277      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ecc:	4b76      	ldr	r3, [pc, #472]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	061b      	lsls	r3, r3, #24
 8001eda:	4973      	ldr	r1, [pc, #460]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ee0:	e040      	b.n	8001f64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d023      	beq.n	8001f32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eea:	4b6f      	ldr	r3, [pc, #444]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a6e      	ldr	r2, [pc, #440]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef6:	f7fe ffdd 	bl	8000eb4 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001efe:	f7fe ffd9 	bl	8000eb4 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e255      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f10:	4b65      	ldr	r3, [pc, #404]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1c:	4b62      	ldr	r3, [pc, #392]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	061b      	lsls	r3, r3, #24
 8001f2a:	495f      	ldr	r1, [pc, #380]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	604b      	str	r3, [r1, #4]
 8001f30:	e018      	b.n	8001f64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f32:	4b5d      	ldr	r3, [pc, #372]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a5c      	ldr	r2, [pc, #368]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7fe ffb9 	bl	8000eb4 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f46:	f7fe ffb5 	bl	8000eb4 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e231      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f58:	4b53      	ldr	r3, [pc, #332]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d03c      	beq.n	8001fea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d01c      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f78:	4b4b      	ldr	r3, [pc, #300]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f7e:	4a4a      	ldr	r2, [pc, #296]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f88:	f7fe ff94 	bl	8000eb4 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f90:	f7fe ff90 	bl	8000eb4 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e20c      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fa2:	4b41      	ldr	r3, [pc, #260]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0ef      	beq.n	8001f90 <HAL_RCC_OscConfig+0x3ec>
 8001fb0:	e01b      	b.n	8001fea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb8:	4a3b      	ldr	r2, [pc, #236]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001fba:	f023 0301 	bic.w	r3, r3, #1
 8001fbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc2:	f7fe ff77 	bl	8000eb4 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fca:	f7fe ff73 	bl	8000eb4 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e1ef      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fdc:	4b32      	ldr	r3, [pc, #200]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1ef      	bne.n	8001fca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 80a6 	beq.w	8002144 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ffc:	4b2a      	ldr	r3, [pc, #168]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10d      	bne.n	8002024 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002008:	4b27      	ldr	r3, [pc, #156]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	4a26      	ldr	r2, [pc, #152]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 800200e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002012:	6593      	str	r3, [r2, #88]	; 0x58
 8002014:	4b24      	ldr	r3, [pc, #144]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8002016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002020:	2301      	movs	r3, #1
 8002022:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002024:	4b21      	ldr	r3, [pc, #132]	; (80020ac <HAL_RCC_OscConfig+0x508>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202c:	2b00      	cmp	r3, #0
 800202e:	d118      	bne.n	8002062 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002030:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <HAL_RCC_OscConfig+0x508>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1d      	ldr	r2, [pc, #116]	; (80020ac <HAL_RCC_OscConfig+0x508>)
 8002036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800203c:	f7fe ff3a 	bl	8000eb4 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002044:	f7fe ff36 	bl	8000eb4 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e1b2      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <HAL_RCC_OscConfig+0x508>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d108      	bne.n	800207c <HAL_RCC_OscConfig+0x4d8>
 800206a:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002070:	4a0d      	ldr	r2, [pc, #52]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800207a:	e029      	b.n	80020d0 <HAL_RCC_OscConfig+0x52c>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b05      	cmp	r3, #5
 8002082:	d115      	bne.n	80020b0 <HAL_RCC_OscConfig+0x50c>
 8002084:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	4a07      	ldr	r2, [pc, #28]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209a:	4a03      	ldr	r2, [pc, #12]	; (80020a8 <HAL_RCC_OscConfig+0x504>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020a4:	e014      	b.n	80020d0 <HAL_RCC_OscConfig+0x52c>
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40007000 	.word	0x40007000
 80020b0:	4b9a      	ldr	r3, [pc, #616]	; (800231c <HAL_RCC_OscConfig+0x778>)
 80020b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b6:	4a99      	ldr	r2, [pc, #612]	; (800231c <HAL_RCC_OscConfig+0x778>)
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020c0:	4b96      	ldr	r3, [pc, #600]	; (800231c <HAL_RCC_OscConfig+0x778>)
 80020c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c6:	4a95      	ldr	r2, [pc, #596]	; (800231c <HAL_RCC_OscConfig+0x778>)
 80020c8:	f023 0304 	bic.w	r3, r3, #4
 80020cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d016      	beq.n	8002106 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d8:	f7fe feec 	bl	8000eb4 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020de:	e00a      	b.n	80020f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e0:	f7fe fee8 	bl	8000eb4 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e162      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020f6:	4b89      	ldr	r3, [pc, #548]	; (800231c <HAL_RCC_OscConfig+0x778>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0ed      	beq.n	80020e0 <HAL_RCC_OscConfig+0x53c>
 8002104:	e015      	b.n	8002132 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002106:	f7fe fed5 	bl	8000eb4 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800210c:	e00a      	b.n	8002124 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210e:	f7fe fed1 	bl	8000eb4 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	f241 3288 	movw	r2, #5000	; 0x1388
 800211c:	4293      	cmp	r3, r2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e14b      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002124:	4b7d      	ldr	r3, [pc, #500]	; (800231c <HAL_RCC_OscConfig+0x778>)
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1ed      	bne.n	800210e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002132:	7ffb      	ldrb	r3, [r7, #31]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d105      	bne.n	8002144 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002138:	4b78      	ldr	r3, [pc, #480]	; (800231c <HAL_RCC_OscConfig+0x778>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213c:	4a77      	ldr	r2, [pc, #476]	; (800231c <HAL_RCC_OscConfig+0x778>)
 800213e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002142:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0320 	and.w	r3, r3, #32
 800214c:	2b00      	cmp	r3, #0
 800214e:	d03c      	beq.n	80021ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	2b00      	cmp	r3, #0
 8002156:	d01c      	beq.n	8002192 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002158:	4b70      	ldr	r3, [pc, #448]	; (800231c <HAL_RCC_OscConfig+0x778>)
 800215a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800215e:	4a6f      	ldr	r2, [pc, #444]	; (800231c <HAL_RCC_OscConfig+0x778>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002168:	f7fe fea4 	bl	8000eb4 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002170:	f7fe fea0 	bl	8000eb4 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e11c      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002182:	4b66      	ldr	r3, [pc, #408]	; (800231c <HAL_RCC_OscConfig+0x778>)
 8002184:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0ef      	beq.n	8002170 <HAL_RCC_OscConfig+0x5cc>
 8002190:	e01b      	b.n	80021ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002192:	4b62      	ldr	r3, [pc, #392]	; (800231c <HAL_RCC_OscConfig+0x778>)
 8002194:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002198:	4a60      	ldr	r2, [pc, #384]	; (800231c <HAL_RCC_OscConfig+0x778>)
 800219a:	f023 0301 	bic.w	r3, r3, #1
 800219e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a2:	f7fe fe87 	bl	8000eb4 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021aa:	f7fe fe83 	bl	8000eb4 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e0ff      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021bc:	4b57      	ldr	r3, [pc, #348]	; (800231c <HAL_RCC_OscConfig+0x778>)
 80021be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1ef      	bne.n	80021aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 80f3 	beq.w	80023ba <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	2b02      	cmp	r3, #2
 80021da:	f040 80c9 	bne.w	8002370 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021de:	4b4f      	ldr	r3, [pc, #316]	; (800231c <HAL_RCC_OscConfig+0x778>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f003 0203 	and.w	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d12c      	bne.n	800224c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	3b01      	subs	r3, #1
 80021fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002200:	429a      	cmp	r2, r3
 8002202:	d123      	bne.n	800224c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002210:	429a      	cmp	r2, r3
 8002212:	d11b      	bne.n	800224c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d113      	bne.n	800224c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222e:	085b      	lsrs	r3, r3, #1
 8002230:	3b01      	subs	r3, #1
 8002232:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002234:	429a      	cmp	r2, r3
 8002236:	d109      	bne.n	800224c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	085b      	lsrs	r3, r3, #1
 8002244:	3b01      	subs	r3, #1
 8002246:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002248:	429a      	cmp	r2, r3
 800224a:	d06b      	beq.n	8002324 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d062      	beq.n	8002318 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002252:	4b32      	ldr	r3, [pc, #200]	; (800231c <HAL_RCC_OscConfig+0x778>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0ac      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002262:	4b2e      	ldr	r3, [pc, #184]	; (800231c <HAL_RCC_OscConfig+0x778>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a2d      	ldr	r2, [pc, #180]	; (800231c <HAL_RCC_OscConfig+0x778>)
 8002268:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800226c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800226e:	f7fe fe21 	bl	8000eb4 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002276:	f7fe fe1d 	bl	8000eb4 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e099      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002288:	4b24      	ldr	r3, [pc, #144]	; (800231c <HAL_RCC_OscConfig+0x778>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d1f0      	bne.n	8002276 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002294:	4b21      	ldr	r3, [pc, #132]	; (800231c <HAL_RCC_OscConfig+0x778>)
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	4b21      	ldr	r3, [pc, #132]	; (8002320 <HAL_RCC_OscConfig+0x77c>)
 800229a:	4013      	ands	r3, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022a4:	3a01      	subs	r2, #1
 80022a6:	0112      	lsls	r2, r2, #4
 80022a8:	4311      	orrs	r1, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022ae:	0212      	lsls	r2, r2, #8
 80022b0:	4311      	orrs	r1, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022b6:	0852      	lsrs	r2, r2, #1
 80022b8:	3a01      	subs	r2, #1
 80022ba:	0552      	lsls	r2, r2, #21
 80022bc:	4311      	orrs	r1, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022c2:	0852      	lsrs	r2, r2, #1
 80022c4:	3a01      	subs	r2, #1
 80022c6:	0652      	lsls	r2, r2, #25
 80022c8:	4311      	orrs	r1, r2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022ce:	06d2      	lsls	r2, r2, #27
 80022d0:	430a      	orrs	r2, r1
 80022d2:	4912      	ldr	r1, [pc, #72]	; (800231c <HAL_RCC_OscConfig+0x778>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022d8:	4b10      	ldr	r3, [pc, #64]	; (800231c <HAL_RCC_OscConfig+0x778>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0f      	ldr	r2, [pc, #60]	; (800231c <HAL_RCC_OscConfig+0x778>)
 80022de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022e4:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HAL_RCC_OscConfig+0x778>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4a0c      	ldr	r2, [pc, #48]	; (800231c <HAL_RCC_OscConfig+0x778>)
 80022ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022f0:	f7fe fde0 	bl	8000eb4 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f8:	f7fe fddc 	bl	8000eb4 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e058      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800230a:	4b04      	ldr	r3, [pc, #16]	; (800231c <HAL_RCC_OscConfig+0x778>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002316:	e050      	b.n	80023ba <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e04f      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
 800231c:	40021000 	.word	0x40021000
 8002320:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002324:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <HAL_RCC_OscConfig+0x820>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d144      	bne.n	80023ba <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002330:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <HAL_RCC_OscConfig+0x820>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a23      	ldr	r2, [pc, #140]	; (80023c4 <HAL_RCC_OscConfig+0x820>)
 8002336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800233a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800233c:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <HAL_RCC_OscConfig+0x820>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a20      	ldr	r2, [pc, #128]	; (80023c4 <HAL_RCC_OscConfig+0x820>)
 8002342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002346:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002348:	f7fe fdb4 	bl	8000eb4 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002350:	f7fe fdb0 	bl	8000eb4 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e02c      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <HAL_RCC_OscConfig+0x820>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x7ac>
 800236e:	e024      	b.n	80023ba <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	2b0c      	cmp	r3, #12
 8002374:	d01f      	beq.n	80023b6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002376:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <HAL_RCC_OscConfig+0x820>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <HAL_RCC_OscConfig+0x820>)
 800237c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002382:	f7fe fd97 	bl	8000eb4 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238a:	f7fe fd93 	bl	8000eb4 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e00f      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <HAL_RCC_OscConfig+0x820>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f0      	bne.n	800238a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_RCC_OscConfig+0x820>)
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	4905      	ldr	r1, [pc, #20]	; (80023c4 <HAL_RCC_OscConfig+0x820>)
 80023ae:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_RCC_OscConfig+0x824>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	60cb      	str	r3, [r1, #12]
 80023b4:	e001      	b.n	80023ba <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3720      	adds	r7, #32
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000
 80023c8:	feeefffc 	.word	0xfeeefffc

080023cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0e7      	b.n	80025b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023e0:	4b75      	ldr	r3, [pc, #468]	; (80025b8 <HAL_RCC_ClockConfig+0x1ec>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d910      	bls.n	8002410 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ee:	4b72      	ldr	r3, [pc, #456]	; (80025b8 <HAL_RCC_ClockConfig+0x1ec>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 0207 	bic.w	r2, r3, #7
 80023f6:	4970      	ldr	r1, [pc, #448]	; (80025b8 <HAL_RCC_ClockConfig+0x1ec>)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b6e      	ldr	r3, [pc, #440]	; (80025b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0cf      	b.n	80025b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d010      	beq.n	800243e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	4b66      	ldr	r3, [pc, #408]	; (80025bc <HAL_RCC_ClockConfig+0x1f0>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002428:	429a      	cmp	r2, r3
 800242a:	d908      	bls.n	800243e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800242c:	4b63      	ldr	r3, [pc, #396]	; (80025bc <HAL_RCC_ClockConfig+0x1f0>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	4960      	ldr	r1, [pc, #384]	; (80025bc <HAL_RCC_ClockConfig+0x1f0>)
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d04c      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b03      	cmp	r3, #3
 8002450:	d107      	bne.n	8002462 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002452:	4b5a      	ldr	r3, [pc, #360]	; (80025bc <HAL_RCC_ClockConfig+0x1f0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d121      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e0a6      	b.n	80025b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d107      	bne.n	800247a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800246a:	4b54      	ldr	r3, [pc, #336]	; (80025bc <HAL_RCC_ClockConfig+0x1f0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d115      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e09a      	b.n	80025b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d107      	bne.n	8002492 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002482:	4b4e      	ldr	r3, [pc, #312]	; (80025bc <HAL_RCC_ClockConfig+0x1f0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d109      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e08e      	b.n	80025b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002492:	4b4a      	ldr	r3, [pc, #296]	; (80025bc <HAL_RCC_ClockConfig+0x1f0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e086      	b.n	80025b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024a2:	4b46      	ldr	r3, [pc, #280]	; (80025bc <HAL_RCC_ClockConfig+0x1f0>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f023 0203 	bic.w	r2, r3, #3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4943      	ldr	r1, [pc, #268]	; (80025bc <HAL_RCC_ClockConfig+0x1f0>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b4:	f7fe fcfe 	bl	8000eb4 <HAL_GetTick>
 80024b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ba:	e00a      	b.n	80024d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024bc:	f7fe fcfa 	bl	8000eb4 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e06e      	b.n	80025b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	4b3a      	ldr	r3, [pc, #232]	; (80025bc <HAL_RCC_ClockConfig+0x1f0>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 020c 	and.w	r2, r3, #12
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d1eb      	bne.n	80024bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d010      	beq.n	8002512 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	4b31      	ldr	r3, [pc, #196]	; (80025bc <HAL_RCC_ClockConfig+0x1f0>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d208      	bcs.n	8002512 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002500:	4b2e      	ldr	r3, [pc, #184]	; (80025bc <HAL_RCC_ClockConfig+0x1f0>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	492b      	ldr	r1, [pc, #172]	; (80025bc <HAL_RCC_ClockConfig+0x1f0>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002512:	4b29      	ldr	r3, [pc, #164]	; (80025b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d210      	bcs.n	8002542 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002520:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f023 0207 	bic.w	r2, r3, #7
 8002528:	4923      	ldr	r1, [pc, #140]	; (80025b8 <HAL_RCC_ClockConfig+0x1ec>)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002530:	4b21      	ldr	r3, [pc, #132]	; (80025b8 <HAL_RCC_ClockConfig+0x1ec>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d001      	beq.n	8002542 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e036      	b.n	80025b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b00      	cmp	r3, #0
 800254c:	d008      	beq.n	8002560 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800254e:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <HAL_RCC_ClockConfig+0x1f0>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	4918      	ldr	r1, [pc, #96]	; (80025bc <HAL_RCC_ClockConfig+0x1f0>)
 800255c:	4313      	orrs	r3, r2
 800255e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b00      	cmp	r3, #0
 800256a:	d009      	beq.n	8002580 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800256c:	4b13      	ldr	r3, [pc, #76]	; (80025bc <HAL_RCC_ClockConfig+0x1f0>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4910      	ldr	r1, [pc, #64]	; (80025bc <HAL_RCC_ClockConfig+0x1f0>)
 800257c:	4313      	orrs	r3, r2
 800257e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002580:	f000 f824 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8002584:	4602      	mov	r2, r0
 8002586:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <HAL_RCC_ClockConfig+0x1f0>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	091b      	lsrs	r3, r3, #4
 800258c:	f003 030f 	and.w	r3, r3, #15
 8002590:	490b      	ldr	r1, [pc, #44]	; (80025c0 <HAL_RCC_ClockConfig+0x1f4>)
 8002592:	5ccb      	ldrb	r3, [r1, r3]
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	fa22 f303 	lsr.w	r3, r2, r3
 800259c:	4a09      	ldr	r2, [pc, #36]	; (80025c4 <HAL_RCC_ClockConfig+0x1f8>)
 800259e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_RCC_ClockConfig+0x1fc>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe fc35 	bl	8000e14 <HAL_InitTick>
 80025aa:	4603      	mov	r3, r0
 80025ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80025ae:	7afb      	ldrb	r3, [r7, #11]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40022000 	.word	0x40022000
 80025bc:	40021000 	.word	0x40021000
 80025c0:	08003abc 	.word	0x08003abc
 80025c4:	10000000 	.word	0x10000000
 80025c8:	10000004 	.word	0x10000004

080025cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b089      	sub	sp, #36	; 0x24
 80025d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025da:	4b3e      	ldr	r3, [pc, #248]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025e4:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_GetSysClockFreq+0x34>
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	2b0c      	cmp	r3, #12
 80025f8:	d121      	bne.n	800263e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d11e      	bne.n	800263e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002600:	4b34      	ldr	r3, [pc, #208]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d107      	bne.n	800261c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800260c:	4b31      	ldr	r3, [pc, #196]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800260e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002612:	0a1b      	lsrs	r3, r3, #8
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	e005      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800261c:	4b2d      	ldr	r3, [pc, #180]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002628:	4a2b      	ldr	r2, [pc, #172]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002630:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10d      	bne.n	8002654 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800263c:	e00a      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	2b04      	cmp	r3, #4
 8002642:	d102      	bne.n	800264a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002644:	4b25      	ldr	r3, [pc, #148]	; (80026dc <HAL_RCC_GetSysClockFreq+0x110>)
 8002646:	61bb      	str	r3, [r7, #24]
 8002648:	e004      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	2b08      	cmp	r3, #8
 800264e:	d101      	bne.n	8002654 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002650:	4b23      	ldr	r3, [pc, #140]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002652:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	2b0c      	cmp	r3, #12
 8002658:	d134      	bne.n	80026c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800265a:	4b1e      	ldr	r3, [pc, #120]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d003      	beq.n	8002672 <HAL_RCC_GetSysClockFreq+0xa6>
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2b03      	cmp	r3, #3
 800266e:	d003      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0xac>
 8002670:	e005      	b.n	800267e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002672:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <HAL_RCC_GetSysClockFreq+0x110>)
 8002674:	617b      	str	r3, [r7, #20]
      break;
 8002676:	e005      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800267a:	617b      	str	r3, [r7, #20]
      break;
 800267c:	e002      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	617b      	str	r3, [r7, #20]
      break;
 8002682:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	091b      	lsrs	r3, r3, #4
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	3301      	adds	r3, #1
 8002690:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	0a1b      	lsrs	r3, r3, #8
 8002698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	fb03 f202 	mul.w	r2, r3, r2
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	0e5b      	lsrs	r3, r3, #25
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	3301      	adds	r3, #1
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026c4:	69bb      	ldr	r3, [r7, #24]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3724      	adds	r7, #36	; 0x24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000
 80026d8:	08003ad4 	.word	0x08003ad4
 80026dc:	00f42400 	.word	0x00f42400
 80026e0:	007a1200 	.word	0x007a1200

080026e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	10000000 	.word	0x10000000

080026fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002700:	f7ff fff0 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 8002704:	4602      	mov	r2, r0
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	4904      	ldr	r1, [pc, #16]	; (8002724 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002712:	5ccb      	ldrb	r3, [r1, r3]
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800271c:	4618      	mov	r0, r3
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40021000 	.word	0x40021000
 8002724:	08003acc 	.word	0x08003acc

08002728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800272c:	f7ff ffda 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 8002730:	4602      	mov	r2, r0
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	0adb      	lsrs	r3, r3, #11
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	4904      	ldr	r1, [pc, #16]	; (8002750 <HAL_RCC_GetPCLK2Freq+0x28>)
 800273e:	5ccb      	ldrb	r3, [r1, r3]
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002748:	4618      	mov	r0, r3
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40021000 	.word	0x40021000
 8002750:	08003acc 	.word	0x08003acc

08002754 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800275c:	2300      	movs	r3, #0
 800275e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002760:	4b2a      	ldr	r3, [pc, #168]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800276c:	f7ff f9b6 	bl	8001adc <HAL_PWREx_GetVoltageRange>
 8002770:	6178      	str	r0, [r7, #20]
 8002772:	e014      	b.n	800279e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002774:	4b25      	ldr	r3, [pc, #148]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002778:	4a24      	ldr	r2, [pc, #144]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800277a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277e:	6593      	str	r3, [r2, #88]	; 0x58
 8002780:	4b22      	ldr	r3, [pc, #136]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800278c:	f7ff f9a6 	bl	8001adc <HAL_PWREx_GetVoltageRange>
 8002790:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002792:	4b1e      	ldr	r3, [pc, #120]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002796:	4a1d      	ldr	r2, [pc, #116]	; (800280c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800279c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027a4:	d10b      	bne.n	80027be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b80      	cmp	r3, #128	; 0x80
 80027aa:	d919      	bls.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2ba0      	cmp	r3, #160	; 0xa0
 80027b0:	d902      	bls.n	80027b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027b2:	2302      	movs	r3, #2
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	e013      	b.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027b8:	2301      	movs	r3, #1
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	e010      	b.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b80      	cmp	r3, #128	; 0x80
 80027c2:	d902      	bls.n	80027ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027c4:	2303      	movs	r3, #3
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	e00a      	b.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b80      	cmp	r3, #128	; 0x80
 80027ce:	d102      	bne.n	80027d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027d0:	2302      	movs	r3, #2
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	e004      	b.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b70      	cmp	r3, #112	; 0x70
 80027da:	d101      	bne.n	80027e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027dc:	2301      	movs	r3, #1
 80027de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f023 0207 	bic.w	r2, r3, #7
 80027e8:	4909      	ldr	r1, [pc, #36]	; (8002810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027f0:	4b07      	ldr	r3, [pc, #28]	; (8002810 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d001      	beq.n	8002802 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40021000 	.word	0x40021000
 8002810:	40022000 	.word	0x40022000

08002814 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800281c:	2300      	movs	r3, #0
 800281e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002820:	2300      	movs	r3, #0
 8002822:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800282c:	2b00      	cmp	r3, #0
 800282e:	d031      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002834:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002838:	d01a      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800283a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800283e:	d814      	bhi.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002840:	2b00      	cmp	r3, #0
 8002842:	d009      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002844:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002848:	d10f      	bne.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800284a:	4b5d      	ldr	r3, [pc, #372]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	4a5c      	ldr	r2, [pc, #368]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002854:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002856:	e00c      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3304      	adds	r3, #4
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f000 f9ce 	bl	8002c00 <RCCEx_PLLSAI1_Config>
 8002864:	4603      	mov	r3, r0
 8002866:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002868:	e003      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	74fb      	strb	r3, [r7, #19]
      break;
 800286e:	e000      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002872:	7cfb      	ldrb	r3, [r7, #19]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10b      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002878:	4b51      	ldr	r3, [pc, #324]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002886:	494e      	ldr	r1, [pc, #312]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800288e:	e001      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002890:	7cfb      	ldrb	r3, [r7, #19]
 8002892:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 809e 	beq.w	80029de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a2:	2300      	movs	r3, #0
 80028a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028a6:	4b46      	ldr	r3, [pc, #280]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80028b6:	2300      	movs	r3, #0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00d      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028bc:	4b40      	ldr	r3, [pc, #256]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c0:	4a3f      	ldr	r2, [pc, #252]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c6:	6593      	str	r3, [r2, #88]	; 0x58
 80028c8:	4b3d      	ldr	r3, [pc, #244]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d4:	2301      	movs	r3, #1
 80028d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028d8:	4b3a      	ldr	r3, [pc, #232]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a39      	ldr	r2, [pc, #228]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80028de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028e4:	f7fe fae6 	bl	8000eb4 <HAL_GetTick>
 80028e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028ea:	e009      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ec:	f7fe fae2 	bl	8000eb4 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d902      	bls.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	74fb      	strb	r3, [r7, #19]
        break;
 80028fe:	e005      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002900:	4b30      	ldr	r3, [pc, #192]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0ef      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800290c:	7cfb      	ldrb	r3, [r7, #19]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d15a      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002912:	4b2b      	ldr	r3, [pc, #172]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800291c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d01e      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	429a      	cmp	r2, r3
 800292c:	d019      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800292e:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002938:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800293a:	4b21      	ldr	r3, [pc, #132]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800293c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002940:	4a1f      	ldr	r2, [pc, #124]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800294a:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800294c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002950:	4a1b      	ldr	r2, [pc, #108]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002956:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800295a:	4a19      	ldr	r2, [pc, #100]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d016      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe faa2 	bl	8000eb4 <HAL_GetTick>
 8002970:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002972:	e00b      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002974:	f7fe fa9e 	bl	8000eb4 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002982:	4293      	cmp	r3, r2
 8002984:	d902      	bls.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	74fb      	strb	r3, [r7, #19]
            break;
 800298a:	e006      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800298e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0ec      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800299a:	7cfb      	ldrb	r3, [r7, #19]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10b      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029a0:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ae:	4904      	ldr	r1, [pc, #16]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029b6:	e009      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029b8:	7cfb      	ldrb	r3, [r7, #19]
 80029ba:	74bb      	strb	r3, [r7, #18]
 80029bc:	e006      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c8:	7cfb      	ldrb	r3, [r7, #19]
 80029ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029cc:	7c7b      	ldrb	r3, [r7, #17]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d105      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d2:	4b8a      	ldr	r3, [pc, #552]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d6:	4a89      	ldr	r2, [pc, #548]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029ea:	4b84      	ldr	r3, [pc, #528]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f0:	f023 0203 	bic.w	r2, r3, #3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	4980      	ldr	r1, [pc, #512]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00a      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a0c:	4b7b      	ldr	r3, [pc, #492]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	f023 020c 	bic.w	r2, r3, #12
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1a:	4978      	ldr	r1, [pc, #480]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00a      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a2e:	4b73      	ldr	r3, [pc, #460]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a34:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3c:	496f      	ldr	r1, [pc, #444]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a50:	4b6a      	ldr	r3, [pc, #424]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a56:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5e:	4967      	ldr	r1, [pc, #412]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a72:	4b62      	ldr	r3, [pc, #392]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	495e      	ldr	r1, [pc, #376]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00a      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a94:	4b59      	ldr	r3, [pc, #356]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	4956      	ldr	r1, [pc, #344]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ab6:	4b51      	ldr	r3, [pc, #324]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	494d      	ldr	r1, [pc, #308]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d028      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ad8:	4b48      	ldr	r3, [pc, #288]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ade:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	4945      	ldr	r1, [pc, #276]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002af6:	d106      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af8:	4b40      	ldr	r3, [pc, #256]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4a3f      	ldr	r2, [pc, #252]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b02:	60d3      	str	r3, [r2, #12]
 8002b04:	e011      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b0e:	d10c      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3304      	adds	r3, #4
 8002b14:	2101      	movs	r1, #1
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f872 	bl	8002c00 <RCCEx_PLLSAI1_Config>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b20:	7cfb      	ldrb	r3, [r7, #19]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002b26:	7cfb      	ldrb	r3, [r7, #19]
 8002b28:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d028      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b36:	4b31      	ldr	r3, [pc, #196]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b44:	492d      	ldr	r1, [pc, #180]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b54:	d106      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b56:	4b29      	ldr	r3, [pc, #164]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4a28      	ldr	r2, [pc, #160]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b60:	60d3      	str	r3, [r2, #12]
 8002b62:	e011      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3304      	adds	r3, #4
 8002b72:	2101      	movs	r1, #1
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 f843 	bl	8002c00 <RCCEx_PLLSAI1_Config>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b7e:	7cfb      	ldrb	r3, [r7, #19]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01c      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b94:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba2:	4916      	ldr	r1, [pc, #88]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bb2:	d10c      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	2102      	movs	r1, #2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 f820 	bl	8002c00 <RCCEx_PLLSAI1_Config>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bc4:	7cfb      	ldrb	r3, [r7, #19]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002bca:	7cfb      	ldrb	r3, [r7, #19]
 8002bcc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002bda:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be8:	4904      	ldr	r1, [pc, #16]	; (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bf0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000

08002c00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c0e:	4b74      	ldr	r3, [pc, #464]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d018      	beq.n	8002c4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c1a:	4b71      	ldr	r3, [pc, #452]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f003 0203 	and.w	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d10d      	bne.n	8002c46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d009      	beq.n	8002c46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c32:	4b6b      	ldr	r3, [pc, #428]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
       ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d047      	beq.n	8002cd6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
 8002c4a:	e044      	b.n	8002cd6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d018      	beq.n	8002c86 <RCCEx_PLLSAI1_Config+0x86>
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d825      	bhi.n	8002ca4 <RCCEx_PLLSAI1_Config+0xa4>
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d002      	beq.n	8002c62 <RCCEx_PLLSAI1_Config+0x62>
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d009      	beq.n	8002c74 <RCCEx_PLLSAI1_Config+0x74>
 8002c60:	e020      	b.n	8002ca4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c62:	4b5f      	ldr	r3, [pc, #380]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d11d      	bne.n	8002caa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c72:	e01a      	b.n	8002caa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c74:	4b5a      	ldr	r3, [pc, #360]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d116      	bne.n	8002cae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c84:	e013      	b.n	8002cae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c86:	4b56      	ldr	r3, [pc, #344]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10f      	bne.n	8002cb2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c92:	4b53      	ldr	r3, [pc, #332]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ca2:	e006      	b.n	8002cb2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca8:	e004      	b.n	8002cb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002caa:	bf00      	nop
 8002cac:	e002      	b.n	8002cb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e000      	b.n	8002cb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10d      	bne.n	8002cd6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cba:	4b49      	ldr	r3, [pc, #292]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6819      	ldr	r1, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	430b      	orrs	r3, r1
 8002cd0:	4943      	ldr	r1, [pc, #268]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d17c      	bne.n	8002dd6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002cdc:	4b40      	ldr	r3, [pc, #256]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a3f      	ldr	r2, [pc, #252]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ce2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ce6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce8:	f7fe f8e4 	bl	8000eb4 <HAL_GetTick>
 8002cec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cee:	e009      	b.n	8002d04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cf0:	f7fe f8e0 	bl	8000eb4 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d902      	bls.n	8002d04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	73fb      	strb	r3, [r7, #15]
        break;
 8002d02:	e005      	b.n	8002d10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d04:	4b36      	ldr	r3, [pc, #216]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1ef      	bne.n	8002cf0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d15f      	bne.n	8002dd6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d110      	bne.n	8002d3e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d1c:	4b30      	ldr	r3, [pc, #192]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002d24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6892      	ldr	r2, [r2, #8]
 8002d2c:	0211      	lsls	r1, r2, #8
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68d2      	ldr	r2, [r2, #12]
 8002d32:	06d2      	lsls	r2, r2, #27
 8002d34:	430a      	orrs	r2, r1
 8002d36:	492a      	ldr	r1, [pc, #168]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	610b      	str	r3, [r1, #16]
 8002d3c:	e027      	b.n	8002d8e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d112      	bne.n	8002d6a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d44:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6892      	ldr	r2, [r2, #8]
 8002d54:	0211      	lsls	r1, r2, #8
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6912      	ldr	r2, [r2, #16]
 8002d5a:	0852      	lsrs	r2, r2, #1
 8002d5c:	3a01      	subs	r2, #1
 8002d5e:	0552      	lsls	r2, r2, #21
 8002d60:	430a      	orrs	r2, r1
 8002d62:	491f      	ldr	r1, [pc, #124]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	610b      	str	r3, [r1, #16]
 8002d68:	e011      	b.n	8002d8e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d6a:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6892      	ldr	r2, [r2, #8]
 8002d7a:	0211      	lsls	r1, r2, #8
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6952      	ldr	r2, [r2, #20]
 8002d80:	0852      	lsrs	r2, r2, #1
 8002d82:	3a01      	subs	r2, #1
 8002d84:	0652      	lsls	r2, r2, #25
 8002d86:	430a      	orrs	r2, r1
 8002d88:	4915      	ldr	r1, [pc, #84]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d8e:	4b14      	ldr	r3, [pc, #80]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a13      	ldr	r2, [pc, #76]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9a:	f7fe f88b 	bl	8000eb4 <HAL_GetTick>
 8002d9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002da0:	e009      	b.n	8002db6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002da2:	f7fe f887 	bl	8000eb4 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d902      	bls.n	8002db6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	73fb      	strb	r3, [r7, #15]
          break;
 8002db4:	e005      	b.n	8002dc2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002db6:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0ef      	beq.n	8002da2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d106      	bne.n	8002dd6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	4903      	ldr	r1, [pc, #12]	; (8002de0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021000 	.word	0x40021000

08002de4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e040      	b.n	8002e78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fd ff2e 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2224      	movs	r2, #36	; 0x24
 8002e10:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0201 	bic.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f992 	bl	800314c <UART_SetConfig>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d101      	bne.n	8002e32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e022      	b.n	8002e78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fbb2 	bl	80035a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fc39 	bl	80036e8 <UART_CheckIdleState>
 8002e76:	4603      	mov	r3, r0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08a      	sub	sp, #40	; 0x28
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	f040 8082 	bne.w	8002f9e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <HAL_UART_Transmit+0x26>
 8002ea0:	88fb      	ldrh	r3, [r7, #6]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e07a      	b.n	8002fa0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_UART_Transmit+0x38>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e073      	b.n	8002fa0 <HAL_UART_Transmit+0x120>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2221      	movs	r2, #33	; 0x21
 8002ecc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ece:	f7fd fff1 	bl	8000eb4 <HAL_GetTick>
 8002ed2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	88fa      	ldrh	r2, [r7, #6]
 8002ed8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	88fa      	ldrh	r2, [r7, #6]
 8002ee0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eec:	d108      	bne.n	8002f00 <HAL_UART_Transmit+0x80>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d104      	bne.n	8002f00 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	e003      	b.n	8002f08 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f10:	e02d      	b.n	8002f6e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	2180      	movs	r1, #128	; 0x80
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 fc2c 	bl	800377a <UART_WaitOnFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e039      	b.n	8002fa0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10b      	bne.n	8002f4a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	881a      	ldrh	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f3e:	b292      	uxth	r2, r2
 8002f40:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	3302      	adds	r3, #2
 8002f46:	61bb      	str	r3, [r7, #24]
 8002f48:	e008      	b.n	8002f5c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	781a      	ldrb	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	b292      	uxth	r2, r2
 8002f54:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1cb      	bne.n	8002f12 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2200      	movs	r2, #0
 8002f82:	2140      	movs	r1, #64	; 0x40
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 fbf8 	bl	800377a <UART_WaitOnFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e005      	b.n	8002fa0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e000      	b.n	8002fa0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002f9e:	2302      	movs	r3, #2
  }
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3720      	adds	r7, #32
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08a      	sub	sp, #40	; 0x28
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	f040 80bf 	bne.w	8003140 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <HAL_UART_Receive+0x26>
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e0b7      	b.n	8003142 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_UART_Receive+0x38>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e0b0      	b.n	8003142 <HAL_UART_Receive+0x19a>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2222      	movs	r2, #34	; 0x22
 8002ff4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ffc:	f7fd ff5a 	bl	8000eb4 <HAL_GetTick>
 8003000:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	88fa      	ldrh	r2, [r7, #6]
 8003006:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	88fa      	ldrh	r2, [r7, #6]
 800300e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301a:	d10e      	bne.n	800303a <HAL_UART_Receive+0x92>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d105      	bne.n	8003030 <HAL_UART_Receive+0x88>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f240 12ff 	movw	r2, #511	; 0x1ff
 800302a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800302e:	e02d      	b.n	800308c <HAL_UART_Receive+0xe4>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	22ff      	movs	r2, #255	; 0xff
 8003034:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003038:	e028      	b.n	800308c <HAL_UART_Receive+0xe4>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10d      	bne.n	800305e <HAL_UART_Receive+0xb6>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d104      	bne.n	8003054 <HAL_UART_Receive+0xac>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	22ff      	movs	r2, #255	; 0xff
 800304e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003052:	e01b      	b.n	800308c <HAL_UART_Receive+0xe4>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	227f      	movs	r2, #127	; 0x7f
 8003058:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800305c:	e016      	b.n	800308c <HAL_UART_Receive+0xe4>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003066:	d10d      	bne.n	8003084 <HAL_UART_Receive+0xdc>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d104      	bne.n	800307a <HAL_UART_Receive+0xd2>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	227f      	movs	r2, #127	; 0x7f
 8003074:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003078:	e008      	b.n	800308c <HAL_UART_Receive+0xe4>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	223f      	movs	r2, #63	; 0x3f
 800307e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003082:	e003      	b.n	800308c <HAL_UART_Receive+0xe4>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003092:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309c:	d108      	bne.n	80030b0 <HAL_UART_Receive+0x108>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d104      	bne.n	80030b0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	61bb      	str	r3, [r7, #24]
 80030ae:	e003      	b.n	80030b8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80030c0:	e033      	b.n	800312a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2200      	movs	r2, #0
 80030ca:	2120      	movs	r1, #32
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 fb54 	bl	800377a <UART_WaitOnFlagUntilTimeout>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e032      	b.n	8003142 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10c      	bne.n	80030fc <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	8a7b      	ldrh	r3, [r7, #18]
 80030ec:	4013      	ands	r3, r2
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	3302      	adds	r3, #2
 80030f8:	61bb      	str	r3, [r7, #24]
 80030fa:	e00d      	b.n	8003118 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003102:	b29b      	uxth	r3, r3
 8003104:	b2da      	uxtb	r2, r3
 8003106:	8a7b      	ldrh	r3, [r7, #18]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	4013      	ands	r3, r2
 800310c:	b2da      	uxtb	r2, r3
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3301      	adds	r3, #1
 8003116:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800311e:	b29b      	uxth	r3, r3
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1c5      	bne.n	80030c2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	e000      	b.n	8003142 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003140:	2302      	movs	r3, #2
  }
}
 8003142:	4618      	mov	r0, r3
 8003144:	3720      	adds	r7, #32
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800314c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003150:	b08a      	sub	sp, #40	; 0x28
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	431a      	orrs	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	431a      	orrs	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	4313      	orrs	r3, r2
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4bb4      	ldr	r3, [pc, #720]	; (800344c <UART_SetConfig+0x300>)
 800317c:	4013      	ands	r3, r2
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003184:	430b      	orrs	r3, r1
 8003186:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4aa9      	ldr	r2, [pc, #676]	; (8003450 <UART_SetConfig+0x304>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d004      	beq.n	80031b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b4:	4313      	orrs	r3, r2
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c8:	430a      	orrs	r2, r1
 80031ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4aa0      	ldr	r2, [pc, #640]	; (8003454 <UART_SetConfig+0x308>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d126      	bne.n	8003224 <UART_SetConfig+0xd8>
 80031d6:	4ba0      	ldr	r3, [pc, #640]	; (8003458 <UART_SetConfig+0x30c>)
 80031d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d81b      	bhi.n	800321c <UART_SetConfig+0xd0>
 80031e4:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <UART_SetConfig+0xa0>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	080031fd 	.word	0x080031fd
 80031f0:	0800320d 	.word	0x0800320d
 80031f4:	08003205 	.word	0x08003205
 80031f8:	08003215 	.word	0x08003215
 80031fc:	2301      	movs	r3, #1
 80031fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003202:	e080      	b.n	8003306 <UART_SetConfig+0x1ba>
 8003204:	2302      	movs	r3, #2
 8003206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320a:	e07c      	b.n	8003306 <UART_SetConfig+0x1ba>
 800320c:	2304      	movs	r3, #4
 800320e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003212:	e078      	b.n	8003306 <UART_SetConfig+0x1ba>
 8003214:	2308      	movs	r3, #8
 8003216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800321a:	e074      	b.n	8003306 <UART_SetConfig+0x1ba>
 800321c:	2310      	movs	r3, #16
 800321e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003222:	e070      	b.n	8003306 <UART_SetConfig+0x1ba>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a8c      	ldr	r2, [pc, #560]	; (800345c <UART_SetConfig+0x310>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d138      	bne.n	80032a0 <UART_SetConfig+0x154>
 800322e:	4b8a      	ldr	r3, [pc, #552]	; (8003458 <UART_SetConfig+0x30c>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b0c      	cmp	r3, #12
 800323a:	d82d      	bhi.n	8003298 <UART_SetConfig+0x14c>
 800323c:	a201      	add	r2, pc, #4	; (adr r2, 8003244 <UART_SetConfig+0xf8>)
 800323e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003242:	bf00      	nop
 8003244:	08003279 	.word	0x08003279
 8003248:	08003299 	.word	0x08003299
 800324c:	08003299 	.word	0x08003299
 8003250:	08003299 	.word	0x08003299
 8003254:	08003289 	.word	0x08003289
 8003258:	08003299 	.word	0x08003299
 800325c:	08003299 	.word	0x08003299
 8003260:	08003299 	.word	0x08003299
 8003264:	08003281 	.word	0x08003281
 8003268:	08003299 	.word	0x08003299
 800326c:	08003299 	.word	0x08003299
 8003270:	08003299 	.word	0x08003299
 8003274:	08003291 	.word	0x08003291
 8003278:	2300      	movs	r3, #0
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327e:	e042      	b.n	8003306 <UART_SetConfig+0x1ba>
 8003280:	2302      	movs	r3, #2
 8003282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003286:	e03e      	b.n	8003306 <UART_SetConfig+0x1ba>
 8003288:	2304      	movs	r3, #4
 800328a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800328e:	e03a      	b.n	8003306 <UART_SetConfig+0x1ba>
 8003290:	2308      	movs	r3, #8
 8003292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003296:	e036      	b.n	8003306 <UART_SetConfig+0x1ba>
 8003298:	2310      	movs	r3, #16
 800329a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800329e:	e032      	b.n	8003306 <UART_SetConfig+0x1ba>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a6a      	ldr	r2, [pc, #424]	; (8003450 <UART_SetConfig+0x304>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d12a      	bne.n	8003300 <UART_SetConfig+0x1b4>
 80032aa:	4b6b      	ldr	r3, [pc, #428]	; (8003458 <UART_SetConfig+0x30c>)
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032b8:	d01a      	beq.n	80032f0 <UART_SetConfig+0x1a4>
 80032ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032be:	d81b      	bhi.n	80032f8 <UART_SetConfig+0x1ac>
 80032c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032c4:	d00c      	beq.n	80032e0 <UART_SetConfig+0x194>
 80032c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ca:	d815      	bhi.n	80032f8 <UART_SetConfig+0x1ac>
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <UART_SetConfig+0x18c>
 80032d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d4:	d008      	beq.n	80032e8 <UART_SetConfig+0x19c>
 80032d6:	e00f      	b.n	80032f8 <UART_SetConfig+0x1ac>
 80032d8:	2300      	movs	r3, #0
 80032da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032de:	e012      	b.n	8003306 <UART_SetConfig+0x1ba>
 80032e0:	2302      	movs	r3, #2
 80032e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e6:	e00e      	b.n	8003306 <UART_SetConfig+0x1ba>
 80032e8:	2304      	movs	r3, #4
 80032ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ee:	e00a      	b.n	8003306 <UART_SetConfig+0x1ba>
 80032f0:	2308      	movs	r3, #8
 80032f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032f6:	e006      	b.n	8003306 <UART_SetConfig+0x1ba>
 80032f8:	2310      	movs	r3, #16
 80032fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fe:	e002      	b.n	8003306 <UART_SetConfig+0x1ba>
 8003300:	2310      	movs	r3, #16
 8003302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a51      	ldr	r2, [pc, #324]	; (8003450 <UART_SetConfig+0x304>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d17a      	bne.n	8003406 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003310:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003314:	2b08      	cmp	r3, #8
 8003316:	d824      	bhi.n	8003362 <UART_SetConfig+0x216>
 8003318:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <UART_SetConfig+0x1d4>)
 800331a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331e:	bf00      	nop
 8003320:	08003345 	.word	0x08003345
 8003324:	08003363 	.word	0x08003363
 8003328:	0800334d 	.word	0x0800334d
 800332c:	08003363 	.word	0x08003363
 8003330:	08003353 	.word	0x08003353
 8003334:	08003363 	.word	0x08003363
 8003338:	08003363 	.word	0x08003363
 800333c:	08003363 	.word	0x08003363
 8003340:	0800335b 	.word	0x0800335b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003344:	f7ff f9da 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 8003348:	61f8      	str	r0, [r7, #28]
        break;
 800334a:	e010      	b.n	800336e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800334c:	4b44      	ldr	r3, [pc, #272]	; (8003460 <UART_SetConfig+0x314>)
 800334e:	61fb      	str	r3, [r7, #28]
        break;
 8003350:	e00d      	b.n	800336e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003352:	f7ff f93b 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8003356:	61f8      	str	r0, [r7, #28]
        break;
 8003358:	e009      	b.n	800336e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800335a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800335e:	61fb      	str	r3, [r7, #28]
        break;
 8003360:	e005      	b.n	800336e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800336c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 8107 	beq.w	8003584 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	4413      	add	r3, r2
 8003380:	69fa      	ldr	r2, [r7, #28]
 8003382:	429a      	cmp	r2, r3
 8003384:	d305      	bcc.n	8003392 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800338c:	69fa      	ldr	r2, [r7, #28]
 800338e:	429a      	cmp	r2, r3
 8003390:	d903      	bls.n	800339a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003398:	e0f4      	b.n	8003584 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	2200      	movs	r2, #0
 800339e:	461c      	mov	r4, r3
 80033a0:	4615      	mov	r5, r2
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	022b      	lsls	r3, r5, #8
 80033ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80033b0:	0222      	lsls	r2, r4, #8
 80033b2:	68f9      	ldr	r1, [r7, #12]
 80033b4:	6849      	ldr	r1, [r1, #4]
 80033b6:	0849      	lsrs	r1, r1, #1
 80033b8:	2000      	movs	r0, #0
 80033ba:	4688      	mov	r8, r1
 80033bc:	4681      	mov	r9, r0
 80033be:	eb12 0a08 	adds.w	sl, r2, r8
 80033c2:	eb43 0b09 	adc.w	fp, r3, r9
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	603b      	str	r3, [r7, #0]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033d4:	4650      	mov	r0, sl
 80033d6:	4659      	mov	r1, fp
 80033d8:	f7fc fef8 	bl	80001cc <__aeabi_uldivmod>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4613      	mov	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ea:	d308      	bcc.n	80033fe <UART_SetConfig+0x2b2>
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033f2:	d204      	bcs.n	80033fe <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	60da      	str	r2, [r3, #12]
 80033fc:	e0c2      	b.n	8003584 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003404:	e0be      	b.n	8003584 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800340e:	d16a      	bne.n	80034e6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003410:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003414:	2b08      	cmp	r3, #8
 8003416:	d834      	bhi.n	8003482 <UART_SetConfig+0x336>
 8003418:	a201      	add	r2, pc, #4	; (adr r2, 8003420 <UART_SetConfig+0x2d4>)
 800341a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341e:	bf00      	nop
 8003420:	08003445 	.word	0x08003445
 8003424:	08003465 	.word	0x08003465
 8003428:	0800346d 	.word	0x0800346d
 800342c:	08003483 	.word	0x08003483
 8003430:	08003473 	.word	0x08003473
 8003434:	08003483 	.word	0x08003483
 8003438:	08003483 	.word	0x08003483
 800343c:	08003483 	.word	0x08003483
 8003440:	0800347b 	.word	0x0800347b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003444:	f7ff f95a 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 8003448:	61f8      	str	r0, [r7, #28]
        break;
 800344a:	e020      	b.n	800348e <UART_SetConfig+0x342>
 800344c:	efff69f3 	.word	0xefff69f3
 8003450:	40008000 	.word	0x40008000
 8003454:	40013800 	.word	0x40013800
 8003458:	40021000 	.word	0x40021000
 800345c:	40004400 	.word	0x40004400
 8003460:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003464:	f7ff f960 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 8003468:	61f8      	str	r0, [r7, #28]
        break;
 800346a:	e010      	b.n	800348e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800346c:	4b4c      	ldr	r3, [pc, #304]	; (80035a0 <UART_SetConfig+0x454>)
 800346e:	61fb      	str	r3, [r7, #28]
        break;
 8003470:	e00d      	b.n	800348e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003472:	f7ff f8ab 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8003476:	61f8      	str	r0, [r7, #28]
        break;
 8003478:	e009      	b.n	800348e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800347a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800347e:	61fb      	str	r3, [r7, #28]
        break;
 8003480:	e005      	b.n	800348e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800348c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d077      	beq.n	8003584 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	005a      	lsls	r2, r3, #1
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	085b      	lsrs	r3, r3, #1
 800349e:	441a      	add	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	2b0f      	cmp	r3, #15
 80034ae:	d916      	bls.n	80034de <UART_SetConfig+0x392>
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b6:	d212      	bcs.n	80034de <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	f023 030f 	bic.w	r3, r3, #15
 80034c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	085b      	lsrs	r3, r3, #1
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	8afb      	ldrh	r3, [r7, #22]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	8afa      	ldrh	r2, [r7, #22]
 80034da:	60da      	str	r2, [r3, #12]
 80034dc:	e052      	b.n	8003584 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034e4:	e04e      	b.n	8003584 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d827      	bhi.n	800353e <UART_SetConfig+0x3f2>
 80034ee:	a201      	add	r2, pc, #4	; (adr r2, 80034f4 <UART_SetConfig+0x3a8>)
 80034f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f4:	08003519 	.word	0x08003519
 80034f8:	08003521 	.word	0x08003521
 80034fc:	08003529 	.word	0x08003529
 8003500:	0800353f 	.word	0x0800353f
 8003504:	0800352f 	.word	0x0800352f
 8003508:	0800353f 	.word	0x0800353f
 800350c:	0800353f 	.word	0x0800353f
 8003510:	0800353f 	.word	0x0800353f
 8003514:	08003537 	.word	0x08003537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003518:	f7ff f8f0 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 800351c:	61f8      	str	r0, [r7, #28]
        break;
 800351e:	e014      	b.n	800354a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003520:	f7ff f902 	bl	8002728 <HAL_RCC_GetPCLK2Freq>
 8003524:	61f8      	str	r0, [r7, #28]
        break;
 8003526:	e010      	b.n	800354a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003528:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <UART_SetConfig+0x454>)
 800352a:	61fb      	str	r3, [r7, #28]
        break;
 800352c:	e00d      	b.n	800354a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800352e:	f7ff f84d 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8003532:	61f8      	str	r0, [r7, #28]
        break;
 8003534:	e009      	b.n	800354a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800353a:	61fb      	str	r3, [r7, #28]
        break;
 800353c:	e005      	b.n	800354a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003548:	bf00      	nop
    }

    if (pclk != 0U)
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d019      	beq.n	8003584 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	085a      	lsrs	r2, r3, #1
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	441a      	add	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003562:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2b0f      	cmp	r3, #15
 8003568:	d909      	bls.n	800357e <UART_SetConfig+0x432>
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003570:	d205      	bcs.n	800357e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60da      	str	r2, [r3, #12]
 800357c:	e002      	b.n	8003584 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003590:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003594:	4618      	mov	r0, r3
 8003596:	3728      	adds	r7, #40	; 0x28
 8003598:	46bd      	mov	sp, r7
 800359a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800359e:	bf00      	nop
 80035a0:	00f42400 	.word	0x00f42400

080035a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	f003 0320 	and.w	r3, r3, #32
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d01a      	beq.n	80036ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036a2:	d10a      	bne.n	80036ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	605a      	str	r2, [r3, #4]
  }
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036f8:	f7fd fbdc 	bl	8000eb4 <HAL_GetTick>
 80036fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b08      	cmp	r3, #8
 800370a:	d10e      	bne.n	800372a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800370c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f82d 	bl	800377a <UART_WaitOnFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e023      	b.n	8003772 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b04      	cmp	r3, #4
 8003736:	d10e      	bne.n	8003756 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003738:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f817 	bl	800377a <UART_WaitOnFlagUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e00d      	b.n	8003772 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b09c      	sub	sp, #112	; 0x70
 800377e:	af00      	add	r7, sp, #0
 8003780:	60f8      	str	r0, [r7, #12]
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	603b      	str	r3, [r7, #0]
 8003786:	4613      	mov	r3, r2
 8003788:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800378a:	e0a5      	b.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800378e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003792:	f000 80a1 	beq.w	80038d8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003796:	f7fd fb8d 	bl	8000eb4 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d302      	bcc.n	80037ac <UART_WaitOnFlagUntilTimeout+0x32>
 80037a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d13e      	bne.n	800382a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b4:	e853 3f00 	ldrex	r3, [r3]
 80037b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037c0:	667b      	str	r3, [r7, #100]	; 0x64
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037d2:	e841 2300 	strex	r3, r2, [r1]
 80037d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80037d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1e6      	bne.n	80037ac <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3308      	adds	r3, #8
 80037e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e8:	e853 3f00 	ldrex	r3, [r3]
 80037ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	663b      	str	r3, [r7, #96]	; 0x60
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3308      	adds	r3, #8
 80037fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8003800:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003802:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003804:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003806:	e841 2300 	strex	r3, r2, [r1]
 800380a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800380c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1e5      	bne.n	80037de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2220      	movs	r2, #32
 8003816:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e067      	b.n	80038fa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d04f      	beq.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003846:	d147      	bne.n	80038d8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003850:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385a:	e853 3f00 	ldrex	r3, [r3]
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003866:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	461a      	mov	r2, r3
 800386e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003870:	637b      	str	r3, [r7, #52]	; 0x34
 8003872:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003874:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003878:	e841 2300 	strex	r3, r2, [r1]
 800387c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800387e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1e6      	bne.n	8003852 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3308      	adds	r3, #8
 800388a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	e853 3f00 	ldrex	r3, [r3]
 8003892:	613b      	str	r3, [r7, #16]
   return(result);
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f023 0301 	bic.w	r3, r3, #1
 800389a:	66bb      	str	r3, [r7, #104]	; 0x68
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3308      	adds	r3, #8
 80038a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038a4:	623a      	str	r2, [r7, #32]
 80038a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a8:	69f9      	ldr	r1, [r7, #28]
 80038aa:	6a3a      	ldr	r2, [r7, #32]
 80038ac:	e841 2300 	strex	r3, r2, [r1]
 80038b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1e5      	bne.n	8003884 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2220      	movs	r2, #32
 80038bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e010      	b.n	80038fa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69da      	ldr	r2, [r3, #28]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4013      	ands	r3, r2
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	bf0c      	ite	eq
 80038e8:	2301      	moveq	r3, #1
 80038ea:	2300      	movne	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	461a      	mov	r2, r3
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	f43f af4a 	beq.w	800378c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3770      	adds	r7, #112	; 0x70
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <atoi>:
 8003902:	220a      	movs	r2, #10
 8003904:	2100      	movs	r1, #0
 8003906:	f000 b8c3 	b.w	8003a90 <strtol>
	...

0800390c <__errno>:
 800390c:	4b01      	ldr	r3, [pc, #4]	; (8003914 <__errno+0x8>)
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	1000002c 	.word	0x1000002c

08003918 <__libc_init_array>:
 8003918:	b570      	push	{r4, r5, r6, lr}
 800391a:	4d0d      	ldr	r5, [pc, #52]	; (8003950 <__libc_init_array+0x38>)
 800391c:	4c0d      	ldr	r4, [pc, #52]	; (8003954 <__libc_init_array+0x3c>)
 800391e:	1b64      	subs	r4, r4, r5
 8003920:	10a4      	asrs	r4, r4, #2
 8003922:	2600      	movs	r6, #0
 8003924:	42a6      	cmp	r6, r4
 8003926:	d109      	bne.n	800393c <__libc_init_array+0x24>
 8003928:	4d0b      	ldr	r5, [pc, #44]	; (8003958 <__libc_init_array+0x40>)
 800392a:	4c0c      	ldr	r4, [pc, #48]	; (800395c <__libc_init_array+0x44>)
 800392c:	f000 f8ba 	bl	8003aa4 <_init>
 8003930:	1b64      	subs	r4, r4, r5
 8003932:	10a4      	asrs	r4, r4, #2
 8003934:	2600      	movs	r6, #0
 8003936:	42a6      	cmp	r6, r4
 8003938:	d105      	bne.n	8003946 <__libc_init_array+0x2e>
 800393a:	bd70      	pop	{r4, r5, r6, pc}
 800393c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003940:	4798      	blx	r3
 8003942:	3601      	adds	r6, #1
 8003944:	e7ee      	b.n	8003924 <__libc_init_array+0xc>
 8003946:	f855 3b04 	ldr.w	r3, [r5], #4
 800394a:	4798      	blx	r3
 800394c:	3601      	adds	r6, #1
 800394e:	e7f2      	b.n	8003936 <__libc_init_array+0x1e>
 8003950:	08003c10 	.word	0x08003c10
 8003954:	08003c10 	.word	0x08003c10
 8003958:	08003c10 	.word	0x08003c10
 800395c:	08003c14 	.word	0x08003c14

08003960 <memcpy>:
 8003960:	440a      	add	r2, r1
 8003962:	4291      	cmp	r1, r2
 8003964:	f100 33ff 	add.w	r3, r0, #4294967295
 8003968:	d100      	bne.n	800396c <memcpy+0xc>
 800396a:	4770      	bx	lr
 800396c:	b510      	push	{r4, lr}
 800396e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003972:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003976:	4291      	cmp	r1, r2
 8003978:	d1f9      	bne.n	800396e <memcpy+0xe>
 800397a:	bd10      	pop	{r4, pc}

0800397c <memset>:
 800397c:	4402      	add	r2, r0
 800397e:	4603      	mov	r3, r0
 8003980:	4293      	cmp	r3, r2
 8003982:	d100      	bne.n	8003986 <memset+0xa>
 8003984:	4770      	bx	lr
 8003986:	f803 1b01 	strb.w	r1, [r3], #1
 800398a:	e7f9      	b.n	8003980 <memset+0x4>

0800398c <_strtol_l.constprop.0>:
 800398c:	2b01      	cmp	r3, #1
 800398e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003992:	d001      	beq.n	8003998 <_strtol_l.constprop.0+0xc>
 8003994:	2b24      	cmp	r3, #36	; 0x24
 8003996:	d906      	bls.n	80039a6 <_strtol_l.constprop.0+0x1a>
 8003998:	f7ff ffb8 	bl	800390c <__errno>
 800399c:	2316      	movs	r3, #22
 800399e:	6003      	str	r3, [r0, #0]
 80039a0:	2000      	movs	r0, #0
 80039a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003a8c <_strtol_l.constprop.0+0x100>
 80039aa:	460d      	mov	r5, r1
 80039ac:	462e      	mov	r6, r5
 80039ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80039b2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80039b6:	f017 0708 	ands.w	r7, r7, #8
 80039ba:	d1f7      	bne.n	80039ac <_strtol_l.constprop.0+0x20>
 80039bc:	2c2d      	cmp	r4, #45	; 0x2d
 80039be:	d132      	bne.n	8003a26 <_strtol_l.constprop.0+0x9a>
 80039c0:	782c      	ldrb	r4, [r5, #0]
 80039c2:	2701      	movs	r7, #1
 80039c4:	1cb5      	adds	r5, r6, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d05b      	beq.n	8003a82 <_strtol_l.constprop.0+0xf6>
 80039ca:	2b10      	cmp	r3, #16
 80039cc:	d109      	bne.n	80039e2 <_strtol_l.constprop.0+0x56>
 80039ce:	2c30      	cmp	r4, #48	; 0x30
 80039d0:	d107      	bne.n	80039e2 <_strtol_l.constprop.0+0x56>
 80039d2:	782c      	ldrb	r4, [r5, #0]
 80039d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80039d8:	2c58      	cmp	r4, #88	; 0x58
 80039da:	d14d      	bne.n	8003a78 <_strtol_l.constprop.0+0xec>
 80039dc:	786c      	ldrb	r4, [r5, #1]
 80039de:	2310      	movs	r3, #16
 80039e0:	3502      	adds	r5, #2
 80039e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80039e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80039ea:	f04f 0c00 	mov.w	ip, #0
 80039ee:	fbb8 f9f3 	udiv	r9, r8, r3
 80039f2:	4666      	mov	r6, ip
 80039f4:	fb03 8a19 	mls	sl, r3, r9, r8
 80039f8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80039fc:	f1be 0f09 	cmp.w	lr, #9
 8003a00:	d816      	bhi.n	8003a30 <_strtol_l.constprop.0+0xa4>
 8003a02:	4674      	mov	r4, lr
 8003a04:	42a3      	cmp	r3, r4
 8003a06:	dd24      	ble.n	8003a52 <_strtol_l.constprop.0+0xc6>
 8003a08:	f1bc 0f00 	cmp.w	ip, #0
 8003a0c:	db1e      	blt.n	8003a4c <_strtol_l.constprop.0+0xc0>
 8003a0e:	45b1      	cmp	r9, r6
 8003a10:	d31c      	bcc.n	8003a4c <_strtol_l.constprop.0+0xc0>
 8003a12:	d101      	bne.n	8003a18 <_strtol_l.constprop.0+0x8c>
 8003a14:	45a2      	cmp	sl, r4
 8003a16:	db19      	blt.n	8003a4c <_strtol_l.constprop.0+0xc0>
 8003a18:	fb06 4603 	mla	r6, r6, r3, r4
 8003a1c:	f04f 0c01 	mov.w	ip, #1
 8003a20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003a24:	e7e8      	b.n	80039f8 <_strtol_l.constprop.0+0x6c>
 8003a26:	2c2b      	cmp	r4, #43	; 0x2b
 8003a28:	bf04      	itt	eq
 8003a2a:	782c      	ldrbeq	r4, [r5, #0]
 8003a2c:	1cb5      	addeq	r5, r6, #2
 8003a2e:	e7ca      	b.n	80039c6 <_strtol_l.constprop.0+0x3a>
 8003a30:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003a34:	f1be 0f19 	cmp.w	lr, #25
 8003a38:	d801      	bhi.n	8003a3e <_strtol_l.constprop.0+0xb2>
 8003a3a:	3c37      	subs	r4, #55	; 0x37
 8003a3c:	e7e2      	b.n	8003a04 <_strtol_l.constprop.0+0x78>
 8003a3e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003a42:	f1be 0f19 	cmp.w	lr, #25
 8003a46:	d804      	bhi.n	8003a52 <_strtol_l.constprop.0+0xc6>
 8003a48:	3c57      	subs	r4, #87	; 0x57
 8003a4a:	e7db      	b.n	8003a04 <_strtol_l.constprop.0+0x78>
 8003a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8003a50:	e7e6      	b.n	8003a20 <_strtol_l.constprop.0+0x94>
 8003a52:	f1bc 0f00 	cmp.w	ip, #0
 8003a56:	da05      	bge.n	8003a64 <_strtol_l.constprop.0+0xd8>
 8003a58:	2322      	movs	r3, #34	; 0x22
 8003a5a:	6003      	str	r3, [r0, #0]
 8003a5c:	4646      	mov	r6, r8
 8003a5e:	b942      	cbnz	r2, 8003a72 <_strtol_l.constprop.0+0xe6>
 8003a60:	4630      	mov	r0, r6
 8003a62:	e79e      	b.n	80039a2 <_strtol_l.constprop.0+0x16>
 8003a64:	b107      	cbz	r7, 8003a68 <_strtol_l.constprop.0+0xdc>
 8003a66:	4276      	negs	r6, r6
 8003a68:	2a00      	cmp	r2, #0
 8003a6a:	d0f9      	beq.n	8003a60 <_strtol_l.constprop.0+0xd4>
 8003a6c:	f1bc 0f00 	cmp.w	ip, #0
 8003a70:	d000      	beq.n	8003a74 <_strtol_l.constprop.0+0xe8>
 8003a72:	1e69      	subs	r1, r5, #1
 8003a74:	6011      	str	r1, [r2, #0]
 8003a76:	e7f3      	b.n	8003a60 <_strtol_l.constprop.0+0xd4>
 8003a78:	2430      	movs	r4, #48	; 0x30
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1b1      	bne.n	80039e2 <_strtol_l.constprop.0+0x56>
 8003a7e:	2308      	movs	r3, #8
 8003a80:	e7af      	b.n	80039e2 <_strtol_l.constprop.0+0x56>
 8003a82:	2c30      	cmp	r4, #48	; 0x30
 8003a84:	d0a5      	beq.n	80039d2 <_strtol_l.constprop.0+0x46>
 8003a86:	230a      	movs	r3, #10
 8003a88:	e7ab      	b.n	80039e2 <_strtol_l.constprop.0+0x56>
 8003a8a:	bf00      	nop
 8003a8c:	08003b05 	.word	0x08003b05

08003a90 <strtol>:
 8003a90:	4613      	mov	r3, r2
 8003a92:	460a      	mov	r2, r1
 8003a94:	4601      	mov	r1, r0
 8003a96:	4802      	ldr	r0, [pc, #8]	; (8003aa0 <strtol+0x10>)
 8003a98:	6800      	ldr	r0, [r0, #0]
 8003a9a:	f7ff bf77 	b.w	800398c <_strtol_l.constprop.0>
 8003a9e:	bf00      	nop
 8003aa0:	1000002c 	.word	0x1000002c

08003aa4 <_init>:
 8003aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa6:	bf00      	nop
 8003aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aaa:	bc08      	pop	{r3}
 8003aac:	469e      	mov	lr, r3
 8003aae:	4770      	bx	lr

08003ab0 <_fini>:
 8003ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab2:	bf00      	nop
 8003ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ab6:	bc08      	pop	{r3}
 8003ab8:	469e      	mov	lr, r3
 8003aba:	4770      	bx	lr

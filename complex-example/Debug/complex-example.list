
complex-example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08008800  08008800  00008800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006848  08008990  08008990  00008990  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800f1d8  0800f1d8  0000f1d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f63c  0800f63c  000101dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f63c  0800f63c  0000f63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f644  0800f644  000101dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f644  0800f644  0000f644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f648  0800f648  0000f648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800f64c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  200001dc  0800f828  000101dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  0800f828  00010318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afe7  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a25  00000000  00000000  0001b1f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0001cc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0001d588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020375  00000000  00000000  0001de50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aaf2  00000000  00000000  0003e1c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c048f  00000000  00000000  00048cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00109146  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000376c  00000000  00000000  00109198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008990 <__do_global_dtors_aux>:
 8008990:	b510      	push	{r4, lr}
 8008992:	4c05      	ldr	r4, [pc, #20]	; (80089a8 <__do_global_dtors_aux+0x18>)
 8008994:	7823      	ldrb	r3, [r4, #0]
 8008996:	b933      	cbnz	r3, 80089a6 <__do_global_dtors_aux+0x16>
 8008998:	4b04      	ldr	r3, [pc, #16]	; (80089ac <__do_global_dtors_aux+0x1c>)
 800899a:	b113      	cbz	r3, 80089a2 <__do_global_dtors_aux+0x12>
 800899c:	4804      	ldr	r0, [pc, #16]	; (80089b0 <__do_global_dtors_aux+0x20>)
 800899e:	f3af 8000 	nop.w
 80089a2:	2301      	movs	r3, #1
 80089a4:	7023      	strb	r3, [r4, #0]
 80089a6:	bd10      	pop	{r4, pc}
 80089a8:	200001dc 	.word	0x200001dc
 80089ac:	00000000 	.word	0x00000000
 80089b0:	0800f1c0 	.word	0x0800f1c0

080089b4 <frame_dummy>:
 80089b4:	b508      	push	{r3, lr}
 80089b6:	4b03      	ldr	r3, [pc, #12]	; (80089c4 <frame_dummy+0x10>)
 80089b8:	b11b      	cbz	r3, 80089c2 <frame_dummy+0xe>
 80089ba:	4903      	ldr	r1, [pc, #12]	; (80089c8 <frame_dummy+0x14>)
 80089bc:	4803      	ldr	r0, [pc, #12]	; (80089cc <frame_dummy+0x18>)
 80089be:	f3af 8000 	nop.w
 80089c2:	bd08      	pop	{r3, pc}
 80089c4:	00000000 	.word	0x00000000
 80089c8:	200001e0 	.word	0x200001e0
 80089cc:	0800f1c0 	.word	0x0800f1c0

080089d0 <strlen>:
 80089d0:	4603      	mov	r3, r0
 80089d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089d6:	2a00      	cmp	r2, #0
 80089d8:	d1fb      	bne.n	80089d2 <strlen+0x2>
 80089da:	1a18      	subs	r0, r3, r0
 80089dc:	3801      	subs	r0, #1
 80089de:	4770      	bx	lr

080089e0 <memchr>:
 80089e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80089e4:	2a10      	cmp	r2, #16
 80089e6:	db2b      	blt.n	8008a40 <memchr+0x60>
 80089e8:	f010 0f07 	tst.w	r0, #7
 80089ec:	d008      	beq.n	8008a00 <memchr+0x20>
 80089ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80089f2:	3a01      	subs	r2, #1
 80089f4:	428b      	cmp	r3, r1
 80089f6:	d02d      	beq.n	8008a54 <memchr+0x74>
 80089f8:	f010 0f07 	tst.w	r0, #7
 80089fc:	b342      	cbz	r2, 8008a50 <memchr+0x70>
 80089fe:	d1f6      	bne.n	80089ee <memchr+0xe>
 8008a00:	b4f0      	push	{r4, r5, r6, r7}
 8008a02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008a06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8008a0a:	f022 0407 	bic.w	r4, r2, #7
 8008a0e:	f07f 0700 	mvns.w	r7, #0
 8008a12:	2300      	movs	r3, #0
 8008a14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008a18:	3c08      	subs	r4, #8
 8008a1a:	ea85 0501 	eor.w	r5, r5, r1
 8008a1e:	ea86 0601 	eor.w	r6, r6, r1
 8008a22:	fa85 f547 	uadd8	r5, r5, r7
 8008a26:	faa3 f587 	sel	r5, r3, r7
 8008a2a:	fa86 f647 	uadd8	r6, r6, r7
 8008a2e:	faa5 f687 	sel	r6, r5, r7
 8008a32:	b98e      	cbnz	r6, 8008a58 <memchr+0x78>
 8008a34:	d1ee      	bne.n	8008a14 <memchr+0x34>
 8008a36:	bcf0      	pop	{r4, r5, r6, r7}
 8008a38:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008a3c:	f002 0207 	and.w	r2, r2, #7
 8008a40:	b132      	cbz	r2, 8008a50 <memchr+0x70>
 8008a42:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008a46:	3a01      	subs	r2, #1
 8008a48:	ea83 0301 	eor.w	r3, r3, r1
 8008a4c:	b113      	cbz	r3, 8008a54 <memchr+0x74>
 8008a4e:	d1f8      	bne.n	8008a42 <memchr+0x62>
 8008a50:	2000      	movs	r0, #0
 8008a52:	4770      	bx	lr
 8008a54:	3801      	subs	r0, #1
 8008a56:	4770      	bx	lr
 8008a58:	2d00      	cmp	r5, #0
 8008a5a:	bf06      	itte	eq
 8008a5c:	4635      	moveq	r5, r6
 8008a5e:	3803      	subeq	r0, #3
 8008a60:	3807      	subne	r0, #7
 8008a62:	f015 0f01 	tst.w	r5, #1
 8008a66:	d107      	bne.n	8008a78 <memchr+0x98>
 8008a68:	3001      	adds	r0, #1
 8008a6a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8008a6e:	bf02      	ittt	eq
 8008a70:	3001      	addeq	r0, #1
 8008a72:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8008a76:	3001      	addeq	r0, #1
 8008a78:	bcf0      	pop	{r4, r5, r6, r7}
 8008a7a:	3801      	subs	r0, #1
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop

08008a80 <__aeabi_drsub>:
 8008a80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8008a84:	e002      	b.n	8008a8c <__adddf3>
 8008a86:	bf00      	nop

08008a88 <__aeabi_dsub>:
 8008a88:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08008a8c <__adddf3>:
 8008a8c:	b530      	push	{r4, r5, lr}
 8008a8e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008a92:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008a96:	ea94 0f05 	teq	r4, r5
 8008a9a:	bf08      	it	eq
 8008a9c:	ea90 0f02 	teqeq	r0, r2
 8008aa0:	bf1f      	itttt	ne
 8008aa2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008aa6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8008aaa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8008aae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008ab2:	f000 80e2 	beq.w	8008c7a <__adddf3+0x1ee>
 8008ab6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8008aba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8008abe:	bfb8      	it	lt
 8008ac0:	426d      	neglt	r5, r5
 8008ac2:	dd0c      	ble.n	8008ade <__adddf3+0x52>
 8008ac4:	442c      	add	r4, r5
 8008ac6:	ea80 0202 	eor.w	r2, r0, r2
 8008aca:	ea81 0303 	eor.w	r3, r1, r3
 8008ace:	ea82 0000 	eor.w	r0, r2, r0
 8008ad2:	ea83 0101 	eor.w	r1, r3, r1
 8008ad6:	ea80 0202 	eor.w	r2, r0, r2
 8008ada:	ea81 0303 	eor.w	r3, r1, r3
 8008ade:	2d36      	cmp	r5, #54	; 0x36
 8008ae0:	bf88      	it	hi
 8008ae2:	bd30      	pophi	{r4, r5, pc}
 8008ae4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008ae8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008aec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008af0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008af4:	d002      	beq.n	8008afc <__adddf3+0x70>
 8008af6:	4240      	negs	r0, r0
 8008af8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008afc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008b00:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008b04:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008b08:	d002      	beq.n	8008b10 <__adddf3+0x84>
 8008b0a:	4252      	negs	r2, r2
 8008b0c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008b10:	ea94 0f05 	teq	r4, r5
 8008b14:	f000 80a7 	beq.w	8008c66 <__adddf3+0x1da>
 8008b18:	f1a4 0401 	sub.w	r4, r4, #1
 8008b1c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008b20:	db0d      	blt.n	8008b3e <__adddf3+0xb2>
 8008b22:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008b26:	fa22 f205 	lsr.w	r2, r2, r5
 8008b2a:	1880      	adds	r0, r0, r2
 8008b2c:	f141 0100 	adc.w	r1, r1, #0
 8008b30:	fa03 f20e 	lsl.w	r2, r3, lr
 8008b34:	1880      	adds	r0, r0, r2
 8008b36:	fa43 f305 	asr.w	r3, r3, r5
 8008b3a:	4159      	adcs	r1, r3
 8008b3c:	e00e      	b.n	8008b5c <__adddf3+0xd0>
 8008b3e:	f1a5 0520 	sub.w	r5, r5, #32
 8008b42:	f10e 0e20 	add.w	lr, lr, #32
 8008b46:	2a01      	cmp	r2, #1
 8008b48:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008b4c:	bf28      	it	cs
 8008b4e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008b52:	fa43 f305 	asr.w	r3, r3, r5
 8008b56:	18c0      	adds	r0, r0, r3
 8008b58:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008b5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008b60:	d507      	bpl.n	8008b72 <__adddf3+0xe6>
 8008b62:	f04f 0e00 	mov.w	lr, #0
 8008b66:	f1dc 0c00 	rsbs	ip, ip, #0
 8008b6a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8008b6e:	eb6e 0101 	sbc.w	r1, lr, r1
 8008b72:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008b76:	d31b      	bcc.n	8008bb0 <__adddf3+0x124>
 8008b78:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008b7c:	d30c      	bcc.n	8008b98 <__adddf3+0x10c>
 8008b7e:	0849      	lsrs	r1, r1, #1
 8008b80:	ea5f 0030 	movs.w	r0, r0, rrx
 8008b84:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008b88:	f104 0401 	add.w	r4, r4, #1
 8008b8c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008b90:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008b94:	f080 809a 	bcs.w	8008ccc <__adddf3+0x240>
 8008b98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008b9c:	bf08      	it	eq
 8008b9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008ba2:	f150 0000 	adcs.w	r0, r0, #0
 8008ba6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008baa:	ea41 0105 	orr.w	r1, r1, r5
 8008bae:	bd30      	pop	{r4, r5, pc}
 8008bb0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008bb4:	4140      	adcs	r0, r0
 8008bb6:	eb41 0101 	adc.w	r1, r1, r1
 8008bba:	3c01      	subs	r4, #1
 8008bbc:	bf28      	it	cs
 8008bbe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8008bc2:	d2e9      	bcs.n	8008b98 <__adddf3+0x10c>
 8008bc4:	f091 0f00 	teq	r1, #0
 8008bc8:	bf04      	itt	eq
 8008bca:	4601      	moveq	r1, r0
 8008bcc:	2000      	moveq	r0, #0
 8008bce:	fab1 f381 	clz	r3, r1
 8008bd2:	bf08      	it	eq
 8008bd4:	3320      	addeq	r3, #32
 8008bd6:	f1a3 030b 	sub.w	r3, r3, #11
 8008bda:	f1b3 0220 	subs.w	r2, r3, #32
 8008bde:	da0c      	bge.n	8008bfa <__adddf3+0x16e>
 8008be0:	320c      	adds	r2, #12
 8008be2:	dd08      	ble.n	8008bf6 <__adddf3+0x16a>
 8008be4:	f102 0c14 	add.w	ip, r2, #20
 8008be8:	f1c2 020c 	rsb	r2, r2, #12
 8008bec:	fa01 f00c 	lsl.w	r0, r1, ip
 8008bf0:	fa21 f102 	lsr.w	r1, r1, r2
 8008bf4:	e00c      	b.n	8008c10 <__adddf3+0x184>
 8008bf6:	f102 0214 	add.w	r2, r2, #20
 8008bfa:	bfd8      	it	le
 8008bfc:	f1c2 0c20 	rsble	ip, r2, #32
 8008c00:	fa01 f102 	lsl.w	r1, r1, r2
 8008c04:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008c08:	bfdc      	itt	le
 8008c0a:	ea41 010c 	orrle.w	r1, r1, ip
 8008c0e:	4090      	lslle	r0, r2
 8008c10:	1ae4      	subs	r4, r4, r3
 8008c12:	bfa2      	ittt	ge
 8008c14:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008c18:	4329      	orrge	r1, r5
 8008c1a:	bd30      	popge	{r4, r5, pc}
 8008c1c:	ea6f 0404 	mvn.w	r4, r4
 8008c20:	3c1f      	subs	r4, #31
 8008c22:	da1c      	bge.n	8008c5e <__adddf3+0x1d2>
 8008c24:	340c      	adds	r4, #12
 8008c26:	dc0e      	bgt.n	8008c46 <__adddf3+0x1ba>
 8008c28:	f104 0414 	add.w	r4, r4, #20
 8008c2c:	f1c4 0220 	rsb	r2, r4, #32
 8008c30:	fa20 f004 	lsr.w	r0, r0, r4
 8008c34:	fa01 f302 	lsl.w	r3, r1, r2
 8008c38:	ea40 0003 	orr.w	r0, r0, r3
 8008c3c:	fa21 f304 	lsr.w	r3, r1, r4
 8008c40:	ea45 0103 	orr.w	r1, r5, r3
 8008c44:	bd30      	pop	{r4, r5, pc}
 8008c46:	f1c4 040c 	rsb	r4, r4, #12
 8008c4a:	f1c4 0220 	rsb	r2, r4, #32
 8008c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8008c52:	fa01 f304 	lsl.w	r3, r1, r4
 8008c56:	ea40 0003 	orr.w	r0, r0, r3
 8008c5a:	4629      	mov	r1, r5
 8008c5c:	bd30      	pop	{r4, r5, pc}
 8008c5e:	fa21 f004 	lsr.w	r0, r1, r4
 8008c62:	4629      	mov	r1, r5
 8008c64:	bd30      	pop	{r4, r5, pc}
 8008c66:	f094 0f00 	teq	r4, #0
 8008c6a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8008c6e:	bf06      	itte	eq
 8008c70:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008c74:	3401      	addeq	r4, #1
 8008c76:	3d01      	subne	r5, #1
 8008c78:	e74e      	b.n	8008b18 <__adddf3+0x8c>
 8008c7a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008c7e:	bf18      	it	ne
 8008c80:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008c84:	d029      	beq.n	8008cda <__adddf3+0x24e>
 8008c86:	ea94 0f05 	teq	r4, r5
 8008c8a:	bf08      	it	eq
 8008c8c:	ea90 0f02 	teqeq	r0, r2
 8008c90:	d005      	beq.n	8008c9e <__adddf3+0x212>
 8008c92:	ea54 0c00 	orrs.w	ip, r4, r0
 8008c96:	bf04      	itt	eq
 8008c98:	4619      	moveq	r1, r3
 8008c9a:	4610      	moveq	r0, r2
 8008c9c:	bd30      	pop	{r4, r5, pc}
 8008c9e:	ea91 0f03 	teq	r1, r3
 8008ca2:	bf1e      	ittt	ne
 8008ca4:	2100      	movne	r1, #0
 8008ca6:	2000      	movne	r0, #0
 8008ca8:	bd30      	popne	{r4, r5, pc}
 8008caa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8008cae:	d105      	bne.n	8008cbc <__adddf3+0x230>
 8008cb0:	0040      	lsls	r0, r0, #1
 8008cb2:	4149      	adcs	r1, r1
 8008cb4:	bf28      	it	cs
 8008cb6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8008cba:	bd30      	pop	{r4, r5, pc}
 8008cbc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008cc0:	bf3c      	itt	cc
 8008cc2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008cc6:	bd30      	popcc	{r4, r5, pc}
 8008cc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008ccc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008cd0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008cd4:	f04f 0000 	mov.w	r0, #0
 8008cd8:	bd30      	pop	{r4, r5, pc}
 8008cda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008cde:	bf1a      	itte	ne
 8008ce0:	4619      	movne	r1, r3
 8008ce2:	4610      	movne	r0, r2
 8008ce4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008ce8:	bf1c      	itt	ne
 8008cea:	460b      	movne	r3, r1
 8008cec:	4602      	movne	r2, r0
 8008cee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008cf2:	bf06      	itte	eq
 8008cf4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008cf8:	ea91 0f03 	teqeq	r1, r3
 8008cfc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008d00:	bd30      	pop	{r4, r5, pc}
 8008d02:	bf00      	nop

08008d04 <__aeabi_ui2d>:
 8008d04:	f090 0f00 	teq	r0, #0
 8008d08:	bf04      	itt	eq
 8008d0a:	2100      	moveq	r1, #0
 8008d0c:	4770      	bxeq	lr
 8008d0e:	b530      	push	{r4, r5, lr}
 8008d10:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008d14:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008d18:	f04f 0500 	mov.w	r5, #0
 8008d1c:	f04f 0100 	mov.w	r1, #0
 8008d20:	e750      	b.n	8008bc4 <__adddf3+0x138>
 8008d22:	bf00      	nop

08008d24 <__aeabi_i2d>:
 8008d24:	f090 0f00 	teq	r0, #0
 8008d28:	bf04      	itt	eq
 8008d2a:	2100      	moveq	r1, #0
 8008d2c:	4770      	bxeq	lr
 8008d2e:	b530      	push	{r4, r5, lr}
 8008d30:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008d34:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008d38:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008d3c:	bf48      	it	mi
 8008d3e:	4240      	negmi	r0, r0
 8008d40:	f04f 0100 	mov.w	r1, #0
 8008d44:	e73e      	b.n	8008bc4 <__adddf3+0x138>
 8008d46:	bf00      	nop

08008d48 <__aeabi_f2d>:
 8008d48:	0042      	lsls	r2, r0, #1
 8008d4a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8008d4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8008d52:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8008d56:	bf1f      	itttt	ne
 8008d58:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008d5c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008d60:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008d64:	4770      	bxne	lr
 8008d66:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8008d6a:	bf08      	it	eq
 8008d6c:	4770      	bxeq	lr
 8008d6e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8008d72:	bf04      	itt	eq
 8008d74:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8008d78:	4770      	bxeq	lr
 8008d7a:	b530      	push	{r4, r5, lr}
 8008d7c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008d80:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008d84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008d88:	e71c      	b.n	8008bc4 <__adddf3+0x138>
 8008d8a:	bf00      	nop

08008d8c <__aeabi_ul2d>:
 8008d8c:	ea50 0201 	orrs.w	r2, r0, r1
 8008d90:	bf08      	it	eq
 8008d92:	4770      	bxeq	lr
 8008d94:	b530      	push	{r4, r5, lr}
 8008d96:	f04f 0500 	mov.w	r5, #0
 8008d9a:	e00a      	b.n	8008db2 <__aeabi_l2d+0x16>

08008d9c <__aeabi_l2d>:
 8008d9c:	ea50 0201 	orrs.w	r2, r0, r1
 8008da0:	bf08      	it	eq
 8008da2:	4770      	bxeq	lr
 8008da4:	b530      	push	{r4, r5, lr}
 8008da6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8008daa:	d502      	bpl.n	8008db2 <__aeabi_l2d+0x16>
 8008dac:	4240      	negs	r0, r0
 8008dae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008db2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008db6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008dba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8008dbe:	f43f aed8 	beq.w	8008b72 <__adddf3+0xe6>
 8008dc2:	f04f 0203 	mov.w	r2, #3
 8008dc6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008dca:	bf18      	it	ne
 8008dcc:	3203      	addne	r2, #3
 8008dce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008dd2:	bf18      	it	ne
 8008dd4:	3203      	addne	r2, #3
 8008dd6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8008dda:	f1c2 0320 	rsb	r3, r2, #32
 8008dde:	fa00 fc03 	lsl.w	ip, r0, r3
 8008de2:	fa20 f002 	lsr.w	r0, r0, r2
 8008de6:	fa01 fe03 	lsl.w	lr, r1, r3
 8008dea:	ea40 000e 	orr.w	r0, r0, lr
 8008dee:	fa21 f102 	lsr.w	r1, r1, r2
 8008df2:	4414      	add	r4, r2
 8008df4:	e6bd      	b.n	8008b72 <__adddf3+0xe6>
 8008df6:	bf00      	nop

08008df8 <__aeabi_dmul>:
 8008df8:	b570      	push	{r4, r5, r6, lr}
 8008dfa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008dfe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008e02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008e06:	bf1d      	ittte	ne
 8008e08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008e0c:	ea94 0f0c 	teqne	r4, ip
 8008e10:	ea95 0f0c 	teqne	r5, ip
 8008e14:	f000 f8de 	bleq	8008fd4 <__aeabi_dmul+0x1dc>
 8008e18:	442c      	add	r4, r5
 8008e1a:	ea81 0603 	eor.w	r6, r1, r3
 8008e1e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008e22:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008e26:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008e2a:	bf18      	it	ne
 8008e2c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008e30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008e34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e38:	d038      	beq.n	8008eac <__aeabi_dmul+0xb4>
 8008e3a:	fba0 ce02 	umull	ip, lr, r0, r2
 8008e3e:	f04f 0500 	mov.w	r5, #0
 8008e42:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008e46:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8008e4a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8008e4e:	f04f 0600 	mov.w	r6, #0
 8008e52:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008e56:	f09c 0f00 	teq	ip, #0
 8008e5a:	bf18      	it	ne
 8008e5c:	f04e 0e01 	orrne.w	lr, lr, #1
 8008e60:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008e64:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008e68:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008e6c:	d204      	bcs.n	8008e78 <__aeabi_dmul+0x80>
 8008e6e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8008e72:	416d      	adcs	r5, r5
 8008e74:	eb46 0606 	adc.w	r6, r6, r6
 8008e78:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008e7c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008e80:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8008e84:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008e88:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008e8c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008e90:	bf88      	it	hi
 8008e92:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008e96:	d81e      	bhi.n	8008ed6 <__aeabi_dmul+0xde>
 8008e98:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8008e9c:	bf08      	it	eq
 8008e9e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008ea2:	f150 0000 	adcs.w	r0, r0, #0
 8008ea6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008eaa:	bd70      	pop	{r4, r5, r6, pc}
 8008eac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008eb0:	ea46 0101 	orr.w	r1, r6, r1
 8008eb4:	ea40 0002 	orr.w	r0, r0, r2
 8008eb8:	ea81 0103 	eor.w	r1, r1, r3
 8008ebc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008ec0:	bfc2      	ittt	gt
 8008ec2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008ec6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008eca:	bd70      	popgt	{r4, r5, r6, pc}
 8008ecc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008ed0:	f04f 0e00 	mov.w	lr, #0
 8008ed4:	3c01      	subs	r4, #1
 8008ed6:	f300 80ab 	bgt.w	8009030 <__aeabi_dmul+0x238>
 8008eda:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8008ede:	bfde      	ittt	le
 8008ee0:	2000      	movle	r0, #0
 8008ee2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008ee6:	bd70      	pople	{r4, r5, r6, pc}
 8008ee8:	f1c4 0400 	rsb	r4, r4, #0
 8008eec:	3c20      	subs	r4, #32
 8008eee:	da35      	bge.n	8008f5c <__aeabi_dmul+0x164>
 8008ef0:	340c      	adds	r4, #12
 8008ef2:	dc1b      	bgt.n	8008f2c <__aeabi_dmul+0x134>
 8008ef4:	f104 0414 	add.w	r4, r4, #20
 8008ef8:	f1c4 0520 	rsb	r5, r4, #32
 8008efc:	fa00 f305 	lsl.w	r3, r0, r5
 8008f00:	fa20 f004 	lsr.w	r0, r0, r4
 8008f04:	fa01 f205 	lsl.w	r2, r1, r5
 8008f08:	ea40 0002 	orr.w	r0, r0, r2
 8008f0c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008f10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008f14:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008f18:	fa21 f604 	lsr.w	r6, r1, r4
 8008f1c:	eb42 0106 	adc.w	r1, r2, r6
 8008f20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008f24:	bf08      	it	eq
 8008f26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008f2a:	bd70      	pop	{r4, r5, r6, pc}
 8008f2c:	f1c4 040c 	rsb	r4, r4, #12
 8008f30:	f1c4 0520 	rsb	r5, r4, #32
 8008f34:	fa00 f304 	lsl.w	r3, r0, r4
 8008f38:	fa20 f005 	lsr.w	r0, r0, r5
 8008f3c:	fa01 f204 	lsl.w	r2, r1, r4
 8008f40:	ea40 0002 	orr.w	r0, r0, r2
 8008f44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008f48:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008f4c:	f141 0100 	adc.w	r1, r1, #0
 8008f50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008f54:	bf08      	it	eq
 8008f56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008f5a:	bd70      	pop	{r4, r5, r6, pc}
 8008f5c:	f1c4 0520 	rsb	r5, r4, #32
 8008f60:	fa00 f205 	lsl.w	r2, r0, r5
 8008f64:	ea4e 0e02 	orr.w	lr, lr, r2
 8008f68:	fa20 f304 	lsr.w	r3, r0, r4
 8008f6c:	fa01 f205 	lsl.w	r2, r1, r5
 8008f70:	ea43 0302 	orr.w	r3, r3, r2
 8008f74:	fa21 f004 	lsr.w	r0, r1, r4
 8008f78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008f7c:	fa21 f204 	lsr.w	r2, r1, r4
 8008f80:	ea20 0002 	bic.w	r0, r0, r2
 8008f84:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008f88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008f8c:	bf08      	it	eq
 8008f8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008f92:	bd70      	pop	{r4, r5, r6, pc}
 8008f94:	f094 0f00 	teq	r4, #0
 8008f98:	d10f      	bne.n	8008fba <__aeabi_dmul+0x1c2>
 8008f9a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8008f9e:	0040      	lsls	r0, r0, #1
 8008fa0:	eb41 0101 	adc.w	r1, r1, r1
 8008fa4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008fa8:	bf08      	it	eq
 8008faa:	3c01      	subeq	r4, #1
 8008fac:	d0f7      	beq.n	8008f9e <__aeabi_dmul+0x1a6>
 8008fae:	ea41 0106 	orr.w	r1, r1, r6
 8008fb2:	f095 0f00 	teq	r5, #0
 8008fb6:	bf18      	it	ne
 8008fb8:	4770      	bxne	lr
 8008fba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8008fbe:	0052      	lsls	r2, r2, #1
 8008fc0:	eb43 0303 	adc.w	r3, r3, r3
 8008fc4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008fc8:	bf08      	it	eq
 8008fca:	3d01      	subeq	r5, #1
 8008fcc:	d0f7      	beq.n	8008fbe <__aeabi_dmul+0x1c6>
 8008fce:	ea43 0306 	orr.w	r3, r3, r6
 8008fd2:	4770      	bx	lr
 8008fd4:	ea94 0f0c 	teq	r4, ip
 8008fd8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008fdc:	bf18      	it	ne
 8008fde:	ea95 0f0c 	teqne	r5, ip
 8008fe2:	d00c      	beq.n	8008ffe <__aeabi_dmul+0x206>
 8008fe4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008fe8:	bf18      	it	ne
 8008fea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008fee:	d1d1      	bne.n	8008f94 <__aeabi_dmul+0x19c>
 8008ff0:	ea81 0103 	eor.w	r1, r1, r3
 8008ff4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008ff8:	f04f 0000 	mov.w	r0, #0
 8008ffc:	bd70      	pop	{r4, r5, r6, pc}
 8008ffe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8009002:	bf06      	itte	eq
 8009004:	4610      	moveq	r0, r2
 8009006:	4619      	moveq	r1, r3
 8009008:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800900c:	d019      	beq.n	8009042 <__aeabi_dmul+0x24a>
 800900e:	ea94 0f0c 	teq	r4, ip
 8009012:	d102      	bne.n	800901a <__aeabi_dmul+0x222>
 8009014:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8009018:	d113      	bne.n	8009042 <__aeabi_dmul+0x24a>
 800901a:	ea95 0f0c 	teq	r5, ip
 800901e:	d105      	bne.n	800902c <__aeabi_dmul+0x234>
 8009020:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8009024:	bf1c      	itt	ne
 8009026:	4610      	movne	r0, r2
 8009028:	4619      	movne	r1, r3
 800902a:	d10a      	bne.n	8009042 <__aeabi_dmul+0x24a>
 800902c:	ea81 0103 	eor.w	r1, r1, r3
 8009030:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009034:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8009038:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800903c:	f04f 0000 	mov.w	r0, #0
 8009040:	bd70      	pop	{r4, r5, r6, pc}
 8009042:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8009046:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800904a:	bd70      	pop	{r4, r5, r6, pc}

0800904c <__aeabi_ddiv>:
 800904c:	b570      	push	{r4, r5, r6, lr}
 800904e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8009052:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8009056:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800905a:	bf1d      	ittte	ne
 800905c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8009060:	ea94 0f0c 	teqne	r4, ip
 8009064:	ea95 0f0c 	teqne	r5, ip
 8009068:	f000 f8a7 	bleq	80091ba <__aeabi_ddiv+0x16e>
 800906c:	eba4 0405 	sub.w	r4, r4, r5
 8009070:	ea81 0e03 	eor.w	lr, r1, r3
 8009074:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8009078:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800907c:	f000 8088 	beq.w	8009190 <__aeabi_ddiv+0x144>
 8009080:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8009084:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8009088:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800908c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8009090:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8009094:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8009098:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800909c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80090a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80090a4:	429d      	cmp	r5, r3
 80090a6:	bf08      	it	eq
 80090a8:	4296      	cmpeq	r6, r2
 80090aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80090ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80090b2:	d202      	bcs.n	80090ba <__aeabi_ddiv+0x6e>
 80090b4:	085b      	lsrs	r3, r3, #1
 80090b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80090ba:	1ab6      	subs	r6, r6, r2
 80090bc:	eb65 0503 	sbc.w	r5, r5, r3
 80090c0:	085b      	lsrs	r3, r3, #1
 80090c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80090c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80090ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80090ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80090d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80090d6:	bf22      	ittt	cs
 80090d8:	1ab6      	subcs	r6, r6, r2
 80090da:	4675      	movcs	r5, lr
 80090dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80090e0:	085b      	lsrs	r3, r3, #1
 80090e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80090e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80090ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80090ee:	bf22      	ittt	cs
 80090f0:	1ab6      	subcs	r6, r6, r2
 80090f2:	4675      	movcs	r5, lr
 80090f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80090f8:	085b      	lsrs	r3, r3, #1
 80090fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80090fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8009102:	eb75 0e03 	sbcs.w	lr, r5, r3
 8009106:	bf22      	ittt	cs
 8009108:	1ab6      	subcs	r6, r6, r2
 800910a:	4675      	movcs	r5, lr
 800910c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8009110:	085b      	lsrs	r3, r3, #1
 8009112:	ea4f 0232 	mov.w	r2, r2, rrx
 8009116:	ebb6 0e02 	subs.w	lr, r6, r2
 800911a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800911e:	bf22      	ittt	cs
 8009120:	1ab6      	subcs	r6, r6, r2
 8009122:	4675      	movcs	r5, lr
 8009124:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8009128:	ea55 0e06 	orrs.w	lr, r5, r6
 800912c:	d018      	beq.n	8009160 <__aeabi_ddiv+0x114>
 800912e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8009132:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8009136:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800913a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800913e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8009142:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8009146:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800914a:	d1c0      	bne.n	80090ce <__aeabi_ddiv+0x82>
 800914c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8009150:	d10b      	bne.n	800916a <__aeabi_ddiv+0x11e>
 8009152:	ea41 0100 	orr.w	r1, r1, r0
 8009156:	f04f 0000 	mov.w	r0, #0
 800915a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800915e:	e7b6      	b.n	80090ce <__aeabi_ddiv+0x82>
 8009160:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8009164:	bf04      	itt	eq
 8009166:	4301      	orreq	r1, r0
 8009168:	2000      	moveq	r0, #0
 800916a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800916e:	bf88      	it	hi
 8009170:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8009174:	f63f aeaf 	bhi.w	8008ed6 <__aeabi_dmul+0xde>
 8009178:	ebb5 0c03 	subs.w	ip, r5, r3
 800917c:	bf04      	itt	eq
 800917e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8009182:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8009186:	f150 0000 	adcs.w	r0, r0, #0
 800918a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800918e:	bd70      	pop	{r4, r5, r6, pc}
 8009190:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8009194:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8009198:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800919c:	bfc2      	ittt	gt
 800919e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80091a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80091a6:	bd70      	popgt	{r4, r5, r6, pc}
 80091a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80091ac:	f04f 0e00 	mov.w	lr, #0
 80091b0:	3c01      	subs	r4, #1
 80091b2:	e690      	b.n	8008ed6 <__aeabi_dmul+0xde>
 80091b4:	ea45 0e06 	orr.w	lr, r5, r6
 80091b8:	e68d      	b.n	8008ed6 <__aeabi_dmul+0xde>
 80091ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80091be:	ea94 0f0c 	teq	r4, ip
 80091c2:	bf08      	it	eq
 80091c4:	ea95 0f0c 	teqeq	r5, ip
 80091c8:	f43f af3b 	beq.w	8009042 <__aeabi_dmul+0x24a>
 80091cc:	ea94 0f0c 	teq	r4, ip
 80091d0:	d10a      	bne.n	80091e8 <__aeabi_ddiv+0x19c>
 80091d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80091d6:	f47f af34 	bne.w	8009042 <__aeabi_dmul+0x24a>
 80091da:	ea95 0f0c 	teq	r5, ip
 80091de:	f47f af25 	bne.w	800902c <__aeabi_dmul+0x234>
 80091e2:	4610      	mov	r0, r2
 80091e4:	4619      	mov	r1, r3
 80091e6:	e72c      	b.n	8009042 <__aeabi_dmul+0x24a>
 80091e8:	ea95 0f0c 	teq	r5, ip
 80091ec:	d106      	bne.n	80091fc <__aeabi_ddiv+0x1b0>
 80091ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80091f2:	f43f aefd 	beq.w	8008ff0 <__aeabi_dmul+0x1f8>
 80091f6:	4610      	mov	r0, r2
 80091f8:	4619      	mov	r1, r3
 80091fa:	e722      	b.n	8009042 <__aeabi_dmul+0x24a>
 80091fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8009200:	bf18      	it	ne
 8009202:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8009206:	f47f aec5 	bne.w	8008f94 <__aeabi_dmul+0x19c>
 800920a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800920e:	f47f af0d 	bne.w	800902c <__aeabi_dmul+0x234>
 8009212:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8009216:	f47f aeeb 	bne.w	8008ff0 <__aeabi_dmul+0x1f8>
 800921a:	e712      	b.n	8009042 <__aeabi_dmul+0x24a>

0800921c <__gedf2>:
 800921c:	f04f 3cff 	mov.w	ip, #4294967295
 8009220:	e006      	b.n	8009230 <__cmpdf2+0x4>
 8009222:	bf00      	nop

08009224 <__ledf2>:
 8009224:	f04f 0c01 	mov.w	ip, #1
 8009228:	e002      	b.n	8009230 <__cmpdf2+0x4>
 800922a:	bf00      	nop

0800922c <__cmpdf2>:
 800922c:	f04f 0c01 	mov.w	ip, #1
 8009230:	f84d cd04 	str.w	ip, [sp, #-4]!
 8009234:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8009238:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800923c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8009240:	bf18      	it	ne
 8009242:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8009246:	d01b      	beq.n	8009280 <__cmpdf2+0x54>
 8009248:	b001      	add	sp, #4
 800924a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800924e:	bf0c      	ite	eq
 8009250:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8009254:	ea91 0f03 	teqne	r1, r3
 8009258:	bf02      	ittt	eq
 800925a:	ea90 0f02 	teqeq	r0, r2
 800925e:	2000      	moveq	r0, #0
 8009260:	4770      	bxeq	lr
 8009262:	f110 0f00 	cmn.w	r0, #0
 8009266:	ea91 0f03 	teq	r1, r3
 800926a:	bf58      	it	pl
 800926c:	4299      	cmppl	r1, r3
 800926e:	bf08      	it	eq
 8009270:	4290      	cmpeq	r0, r2
 8009272:	bf2c      	ite	cs
 8009274:	17d8      	asrcs	r0, r3, #31
 8009276:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800927a:	f040 0001 	orr.w	r0, r0, #1
 800927e:	4770      	bx	lr
 8009280:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8009284:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8009288:	d102      	bne.n	8009290 <__cmpdf2+0x64>
 800928a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800928e:	d107      	bne.n	80092a0 <__cmpdf2+0x74>
 8009290:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8009294:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8009298:	d1d6      	bne.n	8009248 <__cmpdf2+0x1c>
 800929a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800929e:	d0d3      	beq.n	8009248 <__cmpdf2+0x1c>
 80092a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop

080092a8 <__aeabi_cdrcmple>:
 80092a8:	4684      	mov	ip, r0
 80092aa:	4610      	mov	r0, r2
 80092ac:	4662      	mov	r2, ip
 80092ae:	468c      	mov	ip, r1
 80092b0:	4619      	mov	r1, r3
 80092b2:	4663      	mov	r3, ip
 80092b4:	e000      	b.n	80092b8 <__aeabi_cdcmpeq>
 80092b6:	bf00      	nop

080092b8 <__aeabi_cdcmpeq>:
 80092b8:	b501      	push	{r0, lr}
 80092ba:	f7ff ffb7 	bl	800922c <__cmpdf2>
 80092be:	2800      	cmp	r0, #0
 80092c0:	bf48      	it	mi
 80092c2:	f110 0f00 	cmnmi.w	r0, #0
 80092c6:	bd01      	pop	{r0, pc}

080092c8 <__aeabi_dcmpeq>:
 80092c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80092cc:	f7ff fff4 	bl	80092b8 <__aeabi_cdcmpeq>
 80092d0:	bf0c      	ite	eq
 80092d2:	2001      	moveq	r0, #1
 80092d4:	2000      	movne	r0, #0
 80092d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80092da:	bf00      	nop

080092dc <__aeabi_dcmplt>:
 80092dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80092e0:	f7ff ffea 	bl	80092b8 <__aeabi_cdcmpeq>
 80092e4:	bf34      	ite	cc
 80092e6:	2001      	movcc	r0, #1
 80092e8:	2000      	movcs	r0, #0
 80092ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80092ee:	bf00      	nop

080092f0 <__aeabi_dcmple>:
 80092f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80092f4:	f7ff ffe0 	bl	80092b8 <__aeabi_cdcmpeq>
 80092f8:	bf94      	ite	ls
 80092fa:	2001      	movls	r0, #1
 80092fc:	2000      	movhi	r0, #0
 80092fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8009302:	bf00      	nop

08009304 <__aeabi_dcmpge>:
 8009304:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009308:	f7ff ffce 	bl	80092a8 <__aeabi_cdrcmple>
 800930c:	bf94      	ite	ls
 800930e:	2001      	movls	r0, #1
 8009310:	2000      	movhi	r0, #0
 8009312:	f85d fb08 	ldr.w	pc, [sp], #8
 8009316:	bf00      	nop

08009318 <__aeabi_dcmpgt>:
 8009318:	f84d ed08 	str.w	lr, [sp, #-8]!
 800931c:	f7ff ffc4 	bl	80092a8 <__aeabi_cdrcmple>
 8009320:	bf34      	ite	cc
 8009322:	2001      	movcc	r0, #1
 8009324:	2000      	movcs	r0, #0
 8009326:	f85d fb08 	ldr.w	pc, [sp], #8
 800932a:	bf00      	nop

0800932c <__aeabi_dcmpun>:
 800932c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8009330:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8009334:	d102      	bne.n	800933c <__aeabi_dcmpun+0x10>
 8009336:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800933a:	d10a      	bne.n	8009352 <__aeabi_dcmpun+0x26>
 800933c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8009340:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8009344:	d102      	bne.n	800934c <__aeabi_dcmpun+0x20>
 8009346:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800934a:	d102      	bne.n	8009352 <__aeabi_dcmpun+0x26>
 800934c:	f04f 0000 	mov.w	r0, #0
 8009350:	4770      	bx	lr
 8009352:	f04f 0001 	mov.w	r0, #1
 8009356:	4770      	bx	lr

08009358 <__aeabi_d2iz>:
 8009358:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800935c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8009360:	d215      	bcs.n	800938e <__aeabi_d2iz+0x36>
 8009362:	d511      	bpl.n	8009388 <__aeabi_d2iz+0x30>
 8009364:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8009368:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800936c:	d912      	bls.n	8009394 <__aeabi_d2iz+0x3c>
 800936e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8009372:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009376:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800937a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800937e:	fa23 f002 	lsr.w	r0, r3, r2
 8009382:	bf18      	it	ne
 8009384:	4240      	negne	r0, r0
 8009386:	4770      	bx	lr
 8009388:	f04f 0000 	mov.w	r0, #0
 800938c:	4770      	bx	lr
 800938e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8009392:	d105      	bne.n	80093a0 <__aeabi_d2iz+0x48>
 8009394:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8009398:	bf08      	it	eq
 800939a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800939e:	4770      	bx	lr
 80093a0:	f04f 0000 	mov.w	r0, #0
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop

080093a8 <__aeabi_uldivmod>:
 80093a8:	b953      	cbnz	r3, 80093c0 <__aeabi_uldivmod+0x18>
 80093aa:	b94a      	cbnz	r2, 80093c0 <__aeabi_uldivmod+0x18>
 80093ac:	2900      	cmp	r1, #0
 80093ae:	bf08      	it	eq
 80093b0:	2800      	cmpeq	r0, #0
 80093b2:	bf1c      	itt	ne
 80093b4:	f04f 31ff 	movne.w	r1, #4294967295
 80093b8:	f04f 30ff 	movne.w	r0, #4294967295
 80093bc:	f000 b974 	b.w	80096a8 <__aeabi_idiv0>
 80093c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80093c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80093c8:	f000 f806 	bl	80093d8 <__udivmoddi4>
 80093cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80093d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093d4:	b004      	add	sp, #16
 80093d6:	4770      	bx	lr

080093d8 <__udivmoddi4>:
 80093d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093dc:	9d08      	ldr	r5, [sp, #32]
 80093de:	4604      	mov	r4, r0
 80093e0:	468e      	mov	lr, r1
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d14d      	bne.n	8009482 <__udivmoddi4+0xaa>
 80093e6:	428a      	cmp	r2, r1
 80093e8:	4694      	mov	ip, r2
 80093ea:	d969      	bls.n	80094c0 <__udivmoddi4+0xe8>
 80093ec:	fab2 f282 	clz	r2, r2
 80093f0:	b152      	cbz	r2, 8009408 <__udivmoddi4+0x30>
 80093f2:	fa01 f302 	lsl.w	r3, r1, r2
 80093f6:	f1c2 0120 	rsb	r1, r2, #32
 80093fa:	fa20 f101 	lsr.w	r1, r0, r1
 80093fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8009402:	ea41 0e03 	orr.w	lr, r1, r3
 8009406:	4094      	lsls	r4, r2
 8009408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800940c:	0c21      	lsrs	r1, r4, #16
 800940e:	fbbe f6f8 	udiv	r6, lr, r8
 8009412:	fa1f f78c 	uxth.w	r7, ip
 8009416:	fb08 e316 	mls	r3, r8, r6, lr
 800941a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800941e:	fb06 f107 	mul.w	r1, r6, r7
 8009422:	4299      	cmp	r1, r3
 8009424:	d90a      	bls.n	800943c <__udivmoddi4+0x64>
 8009426:	eb1c 0303 	adds.w	r3, ip, r3
 800942a:	f106 30ff 	add.w	r0, r6, #4294967295
 800942e:	f080 811f 	bcs.w	8009670 <__udivmoddi4+0x298>
 8009432:	4299      	cmp	r1, r3
 8009434:	f240 811c 	bls.w	8009670 <__udivmoddi4+0x298>
 8009438:	3e02      	subs	r6, #2
 800943a:	4463      	add	r3, ip
 800943c:	1a5b      	subs	r3, r3, r1
 800943e:	b2a4      	uxth	r4, r4
 8009440:	fbb3 f0f8 	udiv	r0, r3, r8
 8009444:	fb08 3310 	mls	r3, r8, r0, r3
 8009448:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800944c:	fb00 f707 	mul.w	r7, r0, r7
 8009450:	42a7      	cmp	r7, r4
 8009452:	d90a      	bls.n	800946a <__udivmoddi4+0x92>
 8009454:	eb1c 0404 	adds.w	r4, ip, r4
 8009458:	f100 33ff 	add.w	r3, r0, #4294967295
 800945c:	f080 810a 	bcs.w	8009674 <__udivmoddi4+0x29c>
 8009460:	42a7      	cmp	r7, r4
 8009462:	f240 8107 	bls.w	8009674 <__udivmoddi4+0x29c>
 8009466:	4464      	add	r4, ip
 8009468:	3802      	subs	r0, #2
 800946a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800946e:	1be4      	subs	r4, r4, r7
 8009470:	2600      	movs	r6, #0
 8009472:	b11d      	cbz	r5, 800947c <__udivmoddi4+0xa4>
 8009474:	40d4      	lsrs	r4, r2
 8009476:	2300      	movs	r3, #0
 8009478:	e9c5 4300 	strd	r4, r3, [r5]
 800947c:	4631      	mov	r1, r6
 800947e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009482:	428b      	cmp	r3, r1
 8009484:	d909      	bls.n	800949a <__udivmoddi4+0xc2>
 8009486:	2d00      	cmp	r5, #0
 8009488:	f000 80ef 	beq.w	800966a <__udivmoddi4+0x292>
 800948c:	2600      	movs	r6, #0
 800948e:	e9c5 0100 	strd	r0, r1, [r5]
 8009492:	4630      	mov	r0, r6
 8009494:	4631      	mov	r1, r6
 8009496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800949a:	fab3 f683 	clz	r6, r3
 800949e:	2e00      	cmp	r6, #0
 80094a0:	d14a      	bne.n	8009538 <__udivmoddi4+0x160>
 80094a2:	428b      	cmp	r3, r1
 80094a4:	d302      	bcc.n	80094ac <__udivmoddi4+0xd4>
 80094a6:	4282      	cmp	r2, r0
 80094a8:	f200 80f9 	bhi.w	800969e <__udivmoddi4+0x2c6>
 80094ac:	1a84      	subs	r4, r0, r2
 80094ae:	eb61 0303 	sbc.w	r3, r1, r3
 80094b2:	2001      	movs	r0, #1
 80094b4:	469e      	mov	lr, r3
 80094b6:	2d00      	cmp	r5, #0
 80094b8:	d0e0      	beq.n	800947c <__udivmoddi4+0xa4>
 80094ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80094be:	e7dd      	b.n	800947c <__udivmoddi4+0xa4>
 80094c0:	b902      	cbnz	r2, 80094c4 <__udivmoddi4+0xec>
 80094c2:	deff      	udf	#255	; 0xff
 80094c4:	fab2 f282 	clz	r2, r2
 80094c8:	2a00      	cmp	r2, #0
 80094ca:	f040 8092 	bne.w	80095f2 <__udivmoddi4+0x21a>
 80094ce:	eba1 010c 	sub.w	r1, r1, ip
 80094d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80094d6:	fa1f fe8c 	uxth.w	lr, ip
 80094da:	2601      	movs	r6, #1
 80094dc:	0c20      	lsrs	r0, r4, #16
 80094de:	fbb1 f3f7 	udiv	r3, r1, r7
 80094e2:	fb07 1113 	mls	r1, r7, r3, r1
 80094e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80094ea:	fb0e f003 	mul.w	r0, lr, r3
 80094ee:	4288      	cmp	r0, r1
 80094f0:	d908      	bls.n	8009504 <__udivmoddi4+0x12c>
 80094f2:	eb1c 0101 	adds.w	r1, ip, r1
 80094f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80094fa:	d202      	bcs.n	8009502 <__udivmoddi4+0x12a>
 80094fc:	4288      	cmp	r0, r1
 80094fe:	f200 80cb 	bhi.w	8009698 <__udivmoddi4+0x2c0>
 8009502:	4643      	mov	r3, r8
 8009504:	1a09      	subs	r1, r1, r0
 8009506:	b2a4      	uxth	r4, r4
 8009508:	fbb1 f0f7 	udiv	r0, r1, r7
 800950c:	fb07 1110 	mls	r1, r7, r0, r1
 8009510:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8009514:	fb0e fe00 	mul.w	lr, lr, r0
 8009518:	45a6      	cmp	lr, r4
 800951a:	d908      	bls.n	800952e <__udivmoddi4+0x156>
 800951c:	eb1c 0404 	adds.w	r4, ip, r4
 8009520:	f100 31ff 	add.w	r1, r0, #4294967295
 8009524:	d202      	bcs.n	800952c <__udivmoddi4+0x154>
 8009526:	45a6      	cmp	lr, r4
 8009528:	f200 80bb 	bhi.w	80096a2 <__udivmoddi4+0x2ca>
 800952c:	4608      	mov	r0, r1
 800952e:	eba4 040e 	sub.w	r4, r4, lr
 8009532:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8009536:	e79c      	b.n	8009472 <__udivmoddi4+0x9a>
 8009538:	f1c6 0720 	rsb	r7, r6, #32
 800953c:	40b3      	lsls	r3, r6
 800953e:	fa22 fc07 	lsr.w	ip, r2, r7
 8009542:	ea4c 0c03 	orr.w	ip, ip, r3
 8009546:	fa20 f407 	lsr.w	r4, r0, r7
 800954a:	fa01 f306 	lsl.w	r3, r1, r6
 800954e:	431c      	orrs	r4, r3
 8009550:	40f9      	lsrs	r1, r7
 8009552:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8009556:	fa00 f306 	lsl.w	r3, r0, r6
 800955a:	fbb1 f8f9 	udiv	r8, r1, r9
 800955e:	0c20      	lsrs	r0, r4, #16
 8009560:	fa1f fe8c 	uxth.w	lr, ip
 8009564:	fb09 1118 	mls	r1, r9, r8, r1
 8009568:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800956c:	fb08 f00e 	mul.w	r0, r8, lr
 8009570:	4288      	cmp	r0, r1
 8009572:	fa02 f206 	lsl.w	r2, r2, r6
 8009576:	d90b      	bls.n	8009590 <__udivmoddi4+0x1b8>
 8009578:	eb1c 0101 	adds.w	r1, ip, r1
 800957c:	f108 3aff 	add.w	sl, r8, #4294967295
 8009580:	f080 8088 	bcs.w	8009694 <__udivmoddi4+0x2bc>
 8009584:	4288      	cmp	r0, r1
 8009586:	f240 8085 	bls.w	8009694 <__udivmoddi4+0x2bc>
 800958a:	f1a8 0802 	sub.w	r8, r8, #2
 800958e:	4461      	add	r1, ip
 8009590:	1a09      	subs	r1, r1, r0
 8009592:	b2a4      	uxth	r4, r4
 8009594:	fbb1 f0f9 	udiv	r0, r1, r9
 8009598:	fb09 1110 	mls	r1, r9, r0, r1
 800959c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80095a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80095a4:	458e      	cmp	lr, r1
 80095a6:	d908      	bls.n	80095ba <__udivmoddi4+0x1e2>
 80095a8:	eb1c 0101 	adds.w	r1, ip, r1
 80095ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80095b0:	d26c      	bcs.n	800968c <__udivmoddi4+0x2b4>
 80095b2:	458e      	cmp	lr, r1
 80095b4:	d96a      	bls.n	800968c <__udivmoddi4+0x2b4>
 80095b6:	3802      	subs	r0, #2
 80095b8:	4461      	add	r1, ip
 80095ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80095be:	fba0 9402 	umull	r9, r4, r0, r2
 80095c2:	eba1 010e 	sub.w	r1, r1, lr
 80095c6:	42a1      	cmp	r1, r4
 80095c8:	46c8      	mov	r8, r9
 80095ca:	46a6      	mov	lr, r4
 80095cc:	d356      	bcc.n	800967c <__udivmoddi4+0x2a4>
 80095ce:	d053      	beq.n	8009678 <__udivmoddi4+0x2a0>
 80095d0:	b15d      	cbz	r5, 80095ea <__udivmoddi4+0x212>
 80095d2:	ebb3 0208 	subs.w	r2, r3, r8
 80095d6:	eb61 010e 	sbc.w	r1, r1, lr
 80095da:	fa01 f707 	lsl.w	r7, r1, r7
 80095de:	fa22 f306 	lsr.w	r3, r2, r6
 80095e2:	40f1      	lsrs	r1, r6
 80095e4:	431f      	orrs	r7, r3
 80095e6:	e9c5 7100 	strd	r7, r1, [r5]
 80095ea:	2600      	movs	r6, #0
 80095ec:	4631      	mov	r1, r6
 80095ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095f2:	f1c2 0320 	rsb	r3, r2, #32
 80095f6:	40d8      	lsrs	r0, r3
 80095f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80095fc:	fa21 f303 	lsr.w	r3, r1, r3
 8009600:	4091      	lsls	r1, r2
 8009602:	4301      	orrs	r1, r0
 8009604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8009608:	fa1f fe8c 	uxth.w	lr, ip
 800960c:	fbb3 f0f7 	udiv	r0, r3, r7
 8009610:	fb07 3610 	mls	r6, r7, r0, r3
 8009614:	0c0b      	lsrs	r3, r1, #16
 8009616:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800961a:	fb00 f60e 	mul.w	r6, r0, lr
 800961e:	429e      	cmp	r6, r3
 8009620:	fa04 f402 	lsl.w	r4, r4, r2
 8009624:	d908      	bls.n	8009638 <__udivmoddi4+0x260>
 8009626:	eb1c 0303 	adds.w	r3, ip, r3
 800962a:	f100 38ff 	add.w	r8, r0, #4294967295
 800962e:	d22f      	bcs.n	8009690 <__udivmoddi4+0x2b8>
 8009630:	429e      	cmp	r6, r3
 8009632:	d92d      	bls.n	8009690 <__udivmoddi4+0x2b8>
 8009634:	3802      	subs	r0, #2
 8009636:	4463      	add	r3, ip
 8009638:	1b9b      	subs	r3, r3, r6
 800963a:	b289      	uxth	r1, r1
 800963c:	fbb3 f6f7 	udiv	r6, r3, r7
 8009640:	fb07 3316 	mls	r3, r7, r6, r3
 8009644:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009648:	fb06 f30e 	mul.w	r3, r6, lr
 800964c:	428b      	cmp	r3, r1
 800964e:	d908      	bls.n	8009662 <__udivmoddi4+0x28a>
 8009650:	eb1c 0101 	adds.w	r1, ip, r1
 8009654:	f106 38ff 	add.w	r8, r6, #4294967295
 8009658:	d216      	bcs.n	8009688 <__udivmoddi4+0x2b0>
 800965a:	428b      	cmp	r3, r1
 800965c:	d914      	bls.n	8009688 <__udivmoddi4+0x2b0>
 800965e:	3e02      	subs	r6, #2
 8009660:	4461      	add	r1, ip
 8009662:	1ac9      	subs	r1, r1, r3
 8009664:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8009668:	e738      	b.n	80094dc <__udivmoddi4+0x104>
 800966a:	462e      	mov	r6, r5
 800966c:	4628      	mov	r0, r5
 800966e:	e705      	b.n	800947c <__udivmoddi4+0xa4>
 8009670:	4606      	mov	r6, r0
 8009672:	e6e3      	b.n	800943c <__udivmoddi4+0x64>
 8009674:	4618      	mov	r0, r3
 8009676:	e6f8      	b.n	800946a <__udivmoddi4+0x92>
 8009678:	454b      	cmp	r3, r9
 800967a:	d2a9      	bcs.n	80095d0 <__udivmoddi4+0x1f8>
 800967c:	ebb9 0802 	subs.w	r8, r9, r2
 8009680:	eb64 0e0c 	sbc.w	lr, r4, ip
 8009684:	3801      	subs	r0, #1
 8009686:	e7a3      	b.n	80095d0 <__udivmoddi4+0x1f8>
 8009688:	4646      	mov	r6, r8
 800968a:	e7ea      	b.n	8009662 <__udivmoddi4+0x28a>
 800968c:	4620      	mov	r0, r4
 800968e:	e794      	b.n	80095ba <__udivmoddi4+0x1e2>
 8009690:	4640      	mov	r0, r8
 8009692:	e7d1      	b.n	8009638 <__udivmoddi4+0x260>
 8009694:	46d0      	mov	r8, sl
 8009696:	e77b      	b.n	8009590 <__udivmoddi4+0x1b8>
 8009698:	3b02      	subs	r3, #2
 800969a:	4461      	add	r1, ip
 800969c:	e732      	b.n	8009504 <__udivmoddi4+0x12c>
 800969e:	4630      	mov	r0, r6
 80096a0:	e709      	b.n	80094b6 <__udivmoddi4+0xde>
 80096a2:	4464      	add	r4, ip
 80096a4:	3802      	subs	r0, #2
 80096a6:	e742      	b.n	800952e <__udivmoddi4+0x156>

080096a8 <__aeabi_idiv0>:
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop

080096ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80096b0:	f000 fd0d 	bl	800a0ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80096b4:	f000 f812 	bl	80096dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80096b8:	f000 f886 	bl	80097c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80096bc:	f000 f854 	bl	8009768 <MX_USART1_UART_Init>
	  //check for fw_upgrade
	  if(fw_upgrade)
	  {
		  // jump to bootloader();
	  }
	  calculator(1.1, 2.2);
 80096c0:	eddf 0a04 	vldr	s1, [pc, #16]	; 80096d4 <main+0x28>
 80096c4:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80096d8 <main+0x2c>
 80096c8:	f000 f8be 	bl	8009848 <calculator>
	  delay();
 80096cc:	f000 fb26 	bl	8009d1c <delay>
	  if(fw_upgrade)
 80096d0:	e7f6      	b.n	80096c0 <main+0x14>
 80096d2:	bf00      	nop
 80096d4:	400ccccd 	.word	0x400ccccd
 80096d8:	3f8ccccd 	.word	0x3f8ccccd

080096dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b096      	sub	sp, #88	; 0x58
 80096e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80096e2:	f107 0314 	add.w	r3, r7, #20
 80096e6:	2244      	movs	r2, #68	; 0x44
 80096e8:	2100      	movs	r1, #0
 80096ea:	4618      	mov	r0, r3
 80096ec:	f002 fe7c 	bl	800c3e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80096f0:	463b      	mov	r3, r7
 80096f2:	2200      	movs	r2, #0
 80096f4:	601a      	str	r2, [r3, #0]
 80096f6:	605a      	str	r2, [r3, #4]
 80096f8:	609a      	str	r2, [r3, #8]
 80096fa:	60da      	str	r2, [r3, #12]
 80096fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80096fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009702:	f001 f813 	bl	800a72c <HAL_PWREx_ControlVoltageScaling>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800970c:	f000 fb2c 	bl	8009d68 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8009710:	2310      	movs	r3, #16
 8009712:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8009714:	2301      	movs	r3, #1
 8009716:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8009718:	2300      	movs	r3, #0
 800971a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800971c:	2360      	movs	r3, #96	; 0x60
 800971e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8009720:	2300      	movs	r3, #0
 8009722:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009724:	f107 0314 	add.w	r3, r7, #20
 8009728:	4618      	mov	r0, r3
 800972a:	f001 f855 	bl	800a7d8 <HAL_RCC_OscConfig>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d001      	beq.n	8009738 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8009734:	f000 fb18 	bl	8009d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009738:	230f      	movs	r3, #15
 800973a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800973c:	2300      	movs	r3, #0
 800973e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009740:	2300      	movs	r3, #0
 8009742:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009744:	2300      	movs	r3, #0
 8009746:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009748:	2300      	movs	r3, #0
 800974a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800974c:	463b      	mov	r3, r7
 800974e:	2100      	movs	r1, #0
 8009750:	4618      	mov	r0, r3
 8009752:	f001 fc55 	bl	800b000 <HAL_RCC_ClockConfig>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d001      	beq.n	8009760 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800975c:	f000 fb04 	bl	8009d68 <Error_Handler>
  }
}
 8009760:	bf00      	nop
 8009762:	3758      	adds	r7, #88	; 0x58
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800976c:	4b14      	ldr	r3, [pc, #80]	; (80097c0 <MX_USART1_UART_Init+0x58>)
 800976e:	4a15      	ldr	r2, [pc, #84]	; (80097c4 <MX_USART1_UART_Init+0x5c>)
 8009770:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009772:	4b13      	ldr	r3, [pc, #76]	; (80097c0 <MX_USART1_UART_Init+0x58>)
 8009774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009778:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800977a:	4b11      	ldr	r3, [pc, #68]	; (80097c0 <MX_USART1_UART_Init+0x58>)
 800977c:	2200      	movs	r2, #0
 800977e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009780:	4b0f      	ldr	r3, [pc, #60]	; (80097c0 <MX_USART1_UART_Init+0x58>)
 8009782:	2200      	movs	r2, #0
 8009784:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009786:	4b0e      	ldr	r3, [pc, #56]	; (80097c0 <MX_USART1_UART_Init+0x58>)
 8009788:	2200      	movs	r2, #0
 800978a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800978c:	4b0c      	ldr	r3, [pc, #48]	; (80097c0 <MX_USART1_UART_Init+0x58>)
 800978e:	220c      	movs	r2, #12
 8009790:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8009792:	4b0b      	ldr	r3, [pc, #44]	; (80097c0 <MX_USART1_UART_Init+0x58>)
 8009794:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009798:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800979a:	4b09      	ldr	r3, [pc, #36]	; (80097c0 <MX_USART1_UART_Init+0x58>)
 800979c:	2200      	movs	r2, #0
 800979e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80097a0:	4b07      	ldr	r3, [pc, #28]	; (80097c0 <MX_USART1_UART_Init+0x58>)
 80097a2:	2200      	movs	r2, #0
 80097a4:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80097a6:	4b06      	ldr	r3, [pc, #24]	; (80097c0 <MX_USART1_UART_Init+0x58>)
 80097a8:	2200      	movs	r2, #0
 80097aa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80097ac:	4804      	ldr	r0, [pc, #16]	; (80097c0 <MX_USART1_UART_Init+0x58>)
 80097ae:	f002 f933 	bl	800ba18 <HAL_UART_Init>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 80097b8:	f000 fad6 	bl	8009d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80097bc:	bf00      	nop
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	20000278 	.word	0x20000278
 80097c4:	40013800 	.word	0x40013800

080097c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b088      	sub	sp, #32
 80097cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097ce:	f107 030c 	add.w	r3, r7, #12
 80097d2:	2200      	movs	r2, #0
 80097d4:	601a      	str	r2, [r3, #0]
 80097d6:	605a      	str	r2, [r3, #4]
 80097d8:	609a      	str	r2, [r3, #8]
 80097da:	60da      	str	r2, [r3, #12]
 80097dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80097de:	4b18      	ldr	r3, [pc, #96]	; (8009840 <MX_GPIO_Init+0x78>)
 80097e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097e2:	4a17      	ldr	r2, [pc, #92]	; (8009840 <MX_GPIO_Init+0x78>)
 80097e4:	f043 0301 	orr.w	r3, r3, #1
 80097e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097ea:	4b15      	ldr	r3, [pc, #84]	; (8009840 <MX_GPIO_Init+0x78>)
 80097ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ee:	f003 0301 	and.w	r3, r3, #1
 80097f2:	60bb      	str	r3, [r7, #8]
 80097f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80097f6:	4b12      	ldr	r3, [pc, #72]	; (8009840 <MX_GPIO_Init+0x78>)
 80097f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097fa:	4a11      	ldr	r2, [pc, #68]	; (8009840 <MX_GPIO_Init+0x78>)
 80097fc:	f043 0302 	orr.w	r3, r3, #2
 8009800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009802:	4b0f      	ldr	r3, [pc, #60]	; (8009840 <MX_GPIO_Init+0x78>)
 8009804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009806:	f003 0302 	and.w	r3, r3, #2
 800980a:	607b      	str	r3, [r7, #4]
 800980c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : fw_upgrade_pin_Pin */
  GPIO_InitStruct.Pin = fw_upgrade_pin_Pin;
 800980e:	2320      	movs	r3, #32
 8009810:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009812:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8009816:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009818:	2300      	movs	r3, #0
 800981a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(fw_upgrade_pin_GPIO_Port, &GPIO_InitStruct);
 800981c:	f107 030c 	add.w	r3, r7, #12
 8009820:	4619      	mov	r1, r3
 8009822:	4808      	ldr	r0, [pc, #32]	; (8009844 <MX_GPIO_Init+0x7c>)
 8009824:	f000 fdda 	bl	800a3dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8009828:	2200      	movs	r2, #0
 800982a:	2100      	movs	r1, #0
 800982c:	2017      	movs	r0, #23
 800982e:	f000 fd9e 	bl	800a36e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8009832:	2017      	movs	r0, #23
 8009834:	f000 fdb7 	bl	800a3a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8009838:	bf00      	nop
 800983a:	3720      	adds	r7, #32
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	40021000 	.word	0x40021000
 8009844:	48000400 	.word	0x48000400

08009848 <calculator>:

/* USER CODE BEGIN 4 */

static void calculator(float a, float b)
{
 8009848:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800984c:	b088      	sub	sp, #32
 800984e:	af04      	add	r7, sp, #16
 8009850:	ed87 0a01 	vstr	s0, [r7, #4]
 8009854:	edc7 0a00 	vstr	s1, [r7]
	float ans = 0;
 8009858:	f04f 0300 	mov.w	r3, #0
 800985c:	60bb      	str	r3, [r7, #8]
	sprintf(buf, "%f + %f = %f\n", a,b, add(a,b));
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7ff fa72 	bl	8008d48 <__aeabi_f2d>
 8009864:	4680      	mov	r8, r0
 8009866:	4689      	mov	r9, r1
 8009868:	6838      	ldr	r0, [r7, #0]
 800986a:	f7ff fa6d 	bl	8008d48 <__aeabi_f2d>
 800986e:	4604      	mov	r4, r0
 8009870:	460d      	mov	r5, r1
 8009872:	edd7 0a00 	vldr	s1, [r7]
 8009876:	ed97 0a01 	vldr	s0, [r7, #4]
 800987a:	f000 f8d5 	bl	8009a28 <add>
 800987e:	ee10 3a10 	vmov	r3, s0
 8009882:	4618      	mov	r0, r3
 8009884:	f7ff fa60 	bl	8008d48 <__aeabi_f2d>
 8009888:	4602      	mov	r2, r0
 800988a:	460b      	mov	r3, r1
 800988c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009890:	e9cd 4500 	strd	r4, r5, [sp]
 8009894:	4642      	mov	r2, r8
 8009896:	464b      	mov	r3, r9
 8009898:	495b      	ldr	r1, [pc, #364]	; (8009a08 <calculator+0x1c0>)
 800989a:	485c      	ldr	r0, [pc, #368]	; (8009a0c <calculator+0x1c4>)
 800989c:	f003 fa16 	bl	800cccc <siprintf>
	HAL_UART_Transmit(&huart1, buf, strlen(buf), 100);
 80098a0:	485a      	ldr	r0, [pc, #360]	; (8009a0c <calculator+0x1c4>)
 80098a2:	f7ff f895 	bl	80089d0 <strlen>
 80098a6:	4603      	mov	r3, r0
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	2364      	movs	r3, #100	; 0x64
 80098ac:	4957      	ldr	r1, [pc, #348]	; (8009a0c <calculator+0x1c4>)
 80098ae:	4858      	ldr	r0, [pc, #352]	; (8009a10 <calculator+0x1c8>)
 80098b0:	f002 f900 	bl	800bab4 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 80098b4:	2201      	movs	r2, #1
 80098b6:	2108      	movs	r1, #8
 80098b8:	4856      	ldr	r0, [pc, #344]	; (8009a14 <calculator+0x1cc>)
 80098ba:	f000 fef9 	bl	800a6b0 <HAL_GPIO_WritePin>
	for(uint32_t i =0; i< 300000; i++);
 80098be:	2300      	movs	r3, #0
 80098c0:	60fb      	str	r3, [r7, #12]
 80098c2:	e002      	b.n	80098ca <calculator+0x82>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	3301      	adds	r3, #1
 80098c8:	60fb      	str	r3, [r7, #12]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	4a52      	ldr	r2, [pc, #328]	; (8009a18 <calculator+0x1d0>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d9f8      	bls.n	80098c4 <calculator+0x7c>
	sprintf(buf, "%f - %f = %f\n", a,b, sub(a,b));
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7ff fa38 	bl	8008d48 <__aeabi_f2d>
 80098d8:	4680      	mov	r8, r0
 80098da:	4689      	mov	r9, r1
 80098dc:	6838      	ldr	r0, [r7, #0]
 80098de:	f7ff fa33 	bl	8008d48 <__aeabi_f2d>
 80098e2:	4604      	mov	r4, r0
 80098e4:	460d      	mov	r5, r1
 80098e6:	edd7 0a00 	vldr	s1, [r7]
 80098ea:	ed97 0a01 	vldr	s0, [r7, #4]
 80098ee:	f000 f913 	bl	8009b18 <sub>
 80098f2:	ee10 3a10 	vmov	r3, s0
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7ff fa26 	bl	8008d48 <__aeabi_f2d>
 80098fc:	4602      	mov	r2, r0
 80098fe:	460b      	mov	r3, r1
 8009900:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009904:	e9cd 4500 	strd	r4, r5, [sp]
 8009908:	4642      	mov	r2, r8
 800990a:	464b      	mov	r3, r9
 800990c:	4943      	ldr	r1, [pc, #268]	; (8009a1c <calculator+0x1d4>)
 800990e:	483f      	ldr	r0, [pc, #252]	; (8009a0c <calculator+0x1c4>)
 8009910:	f003 f9dc 	bl	800cccc <siprintf>
	HAL_UART_Transmit(&huart1, buf, strlen(buf), 100);
 8009914:	483d      	ldr	r0, [pc, #244]	; (8009a0c <calculator+0x1c4>)
 8009916:	f7ff f85b 	bl	80089d0 <strlen>
 800991a:	4603      	mov	r3, r0
 800991c:	b29a      	uxth	r2, r3
 800991e:	2364      	movs	r3, #100	; 0x64
 8009920:	493a      	ldr	r1, [pc, #232]	; (8009a0c <calculator+0x1c4>)
 8009922:	483b      	ldr	r0, [pc, #236]	; (8009a10 <calculator+0x1c8>)
 8009924:	f002 f8c6 	bl	800bab4 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 8009928:	2200      	movs	r2, #0
 800992a:	2108      	movs	r1, #8
 800992c:	4839      	ldr	r0, [pc, #228]	; (8009a14 <calculator+0x1cc>)
 800992e:	f000 febf 	bl	800a6b0 <HAL_GPIO_WritePin>
	delay();
 8009932:	f000 f9f3 	bl	8009d1c <delay>
	sprintf(buf, "%f * %f = %f\n", a,b, mul(a,b));
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f7ff fa06 	bl	8008d48 <__aeabi_f2d>
 800993c:	4680      	mov	r8, r0
 800993e:	4689      	mov	r9, r1
 8009940:	6838      	ldr	r0, [r7, #0]
 8009942:	f7ff fa01 	bl	8008d48 <__aeabi_f2d>
 8009946:	4604      	mov	r4, r0
 8009948:	460d      	mov	r5, r1
 800994a:	edd7 0a00 	vldr	s1, [r7]
 800994e:	ed97 0a01 	vldr	s0, [r7, #4]
 8009952:	f000 f959 	bl	8009c08 <mul>
 8009956:	ee10 3a10 	vmov	r3, s0
 800995a:	4618      	mov	r0, r3
 800995c:	f7ff f9f4 	bl	8008d48 <__aeabi_f2d>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009968:	e9cd 4500 	strd	r4, r5, [sp]
 800996c:	4642      	mov	r2, r8
 800996e:	464b      	mov	r3, r9
 8009970:	492b      	ldr	r1, [pc, #172]	; (8009a20 <calculator+0x1d8>)
 8009972:	4826      	ldr	r0, [pc, #152]	; (8009a0c <calculator+0x1c4>)
 8009974:	f003 f9aa 	bl	800cccc <siprintf>
	HAL_UART_Transmit(&huart1, buf, strlen(buf), 100);
 8009978:	4824      	ldr	r0, [pc, #144]	; (8009a0c <calculator+0x1c4>)
 800997a:	f7ff f829 	bl	80089d0 <strlen>
 800997e:	4603      	mov	r3, r0
 8009980:	b29a      	uxth	r2, r3
 8009982:	2364      	movs	r3, #100	; 0x64
 8009984:	4921      	ldr	r1, [pc, #132]	; (8009a0c <calculator+0x1c4>)
 8009986:	4822      	ldr	r0, [pc, #136]	; (8009a10 <calculator+0x1c8>)
 8009988:	f002 f894 	bl	800bab4 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 800998c:	2201      	movs	r2, #1
 800998e:	2108      	movs	r1, #8
 8009990:	4820      	ldr	r0, [pc, #128]	; (8009a14 <calculator+0x1cc>)
 8009992:	f000 fe8d 	bl	800a6b0 <HAL_GPIO_WritePin>
	delay();
 8009996:	f000 f9c1 	bl	8009d1c <delay>
	sprintf(buf, "%f / %f = %f\n", a,b, divide(a,b));
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f7ff f9d4 	bl	8008d48 <__aeabi_f2d>
 80099a0:	4680      	mov	r8, r0
 80099a2:	4689      	mov	r9, r1
 80099a4:	6838      	ldr	r0, [r7, #0]
 80099a6:	f7ff f9cf 	bl	8008d48 <__aeabi_f2d>
 80099aa:	4604      	mov	r4, r0
 80099ac:	460d      	mov	r5, r1
 80099ae:	edd7 0a00 	vldr	s1, [r7]
 80099b2:	ed97 0a01 	vldr	s0, [r7, #4]
 80099b6:	f000 f99d 	bl	8009cf4 <divide>
 80099ba:	ee10 3a10 	vmov	r3, s0
 80099be:	4618      	mov	r0, r3
 80099c0:	f7ff f9c2 	bl	8008d48 <__aeabi_f2d>
 80099c4:	4602      	mov	r2, r0
 80099c6:	460b      	mov	r3, r1
 80099c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80099cc:	e9cd 4500 	strd	r4, r5, [sp]
 80099d0:	4642      	mov	r2, r8
 80099d2:	464b      	mov	r3, r9
 80099d4:	4913      	ldr	r1, [pc, #76]	; (8009a24 <calculator+0x1dc>)
 80099d6:	480d      	ldr	r0, [pc, #52]	; (8009a0c <calculator+0x1c4>)
 80099d8:	f003 f978 	bl	800cccc <siprintf>
	HAL_UART_Transmit(&huart1, buf, strlen(buf), 100);
 80099dc:	480b      	ldr	r0, [pc, #44]	; (8009a0c <calculator+0x1c4>)
 80099de:	f7fe fff7 	bl	80089d0 <strlen>
 80099e2:	4603      	mov	r3, r0
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	2364      	movs	r3, #100	; 0x64
 80099e8:	4908      	ldr	r1, [pc, #32]	; (8009a0c <calculator+0x1c4>)
 80099ea:	4809      	ldr	r0, [pc, #36]	; (8009a10 <calculator+0x1c8>)
 80099ec:	f002 f862 	bl	800bab4 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 80099f0:	2200      	movs	r2, #0
 80099f2:	2108      	movs	r1, #8
 80099f4:	4807      	ldr	r0, [pc, #28]	; (8009a14 <calculator+0x1cc>)
 80099f6:	f000 fe5b 	bl	800a6b0 <HAL_GPIO_WritePin>
	delay();
 80099fa:	f000 f98f 	bl	8009d1c <delay>
}
 80099fe:	bf00      	nop
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009a08:	0800f1d8 	.word	0x0800f1d8
 8009a0c:	200001f8 	.word	0x200001f8
 8009a10:	20000278 	.word	0x20000278
 8009a14:	48000400 	.word	0x48000400
 8009a18:	000493df 	.word	0x000493df
 8009a1c:	0800f1e8 	.word	0x0800f1e8
 8009a20:	0800f1f8 	.word	0x0800f1f8
 8009a24:	0800f208 	.word	0x0800f208

08009a28 <add>:
static float add(float a, float b)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8009a32:	edc7 0a00 	vstr	s1, [r7]
	SLOP_R;
 8009a36:	bf00      	nop
 8009a38:	bf00      	nop
 8009a3a:	bf00      	nop
 8009a3c:	bf00      	nop
 8009a3e:	bf00      	nop
 8009a40:	bf00      	nop
 8009a42:	bf00      	nop
 8009a44:	bf00      	nop
 8009a46:	bf00      	nop
 8009a48:	bf00      	nop
 8009a4a:	bf00      	nop
 8009a4c:	bf00      	nop
 8009a4e:	bf00      	nop
 8009a50:	bf00      	nop
 8009a52:	bf00      	nop
 8009a54:	bf00      	nop
 8009a56:	bf00      	nop
 8009a58:	bf00      	nop
 8009a5a:	bf00      	nop
 8009a5c:	bf00      	nop
 8009a5e:	bf00      	nop
 8009a60:	bf00      	nop
 8009a62:	bf00      	nop
 8009a64:	bf00      	nop
 8009a66:	bf00      	nop
 8009a68:	bf00      	nop
 8009a6a:	bf00      	nop
 8009a6c:	bf00      	nop
 8009a6e:	bf00      	nop
 8009a70:	bf00      	nop
 8009a72:	bf00      	nop
 8009a74:	bf00      	nop
 8009a76:	bf00      	nop
 8009a78:	bf00      	nop
 8009a7a:	bf00      	nop
 8009a7c:	bf00      	nop
 8009a7e:	bf00      	nop
 8009a80:	bf00      	nop
 8009a82:	bf00      	nop
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop
 8009a88:	bf00      	nop
 8009a8a:	bf00      	nop
 8009a8c:	bf00      	nop
 8009a8e:	bf00      	nop
 8009a90:	bf00      	nop
 8009a92:	bf00      	nop
 8009a94:	bf00      	nop
 8009a96:	bf00      	nop
 8009a98:	bf00      	nop
 8009a9a:	bf00      	nop
 8009a9c:	bf00      	nop
 8009a9e:	bf00      	nop
 8009aa0:	bf00      	nop
 8009aa2:	bf00      	nop
 8009aa4:	bf00      	nop
 8009aa6:	bf00      	nop
 8009aa8:	bf00      	nop
 8009aaa:	bf00      	nop
 8009aac:	bf00      	nop
 8009aae:	bf00      	nop
 8009ab0:	bf00      	nop
 8009ab2:	bf00      	nop
 8009ab4:	bf00      	nop
 8009ab6:	bf00      	nop
 8009ab8:	bf00      	nop
 8009aba:	bf00      	nop
 8009abc:	bf00      	nop
 8009abe:	bf00      	nop
 8009ac0:	bf00      	nop
 8009ac2:	bf00      	nop
 8009ac4:	bf00      	nop
 8009ac6:	bf00      	nop
 8009ac8:	bf00      	nop
 8009aca:	bf00      	nop
 8009acc:	bf00      	nop
 8009ace:	bf00      	nop
 8009ad0:	bf00      	nop
 8009ad2:	bf00      	nop
 8009ad4:	bf00      	nop
 8009ad6:	bf00      	nop
 8009ad8:	bf00      	nop
 8009ada:	bf00      	nop
 8009adc:	bf00      	nop
 8009ade:	bf00      	nop
 8009ae0:	bf00      	nop
 8009ae2:	bf00      	nop
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop
 8009ae8:	bf00      	nop
 8009aea:	bf00      	nop
 8009aec:	bf00      	nop
 8009aee:	bf00      	nop
 8009af0:	bf00      	nop
 8009af2:	bf00      	nop
 8009af4:	bf00      	nop
 8009af6:	bf00      	nop
 8009af8:	bf00      	nop
 8009afa:	bf00      	nop
 8009afc:	bf00      	nop
	return a+b;
 8009afe:	ed97 7a01 	vldr	s14, [r7, #4]
 8009b02:	edd7 7a00 	vldr	s15, [r7]
 8009b06:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8009b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <sub>:
static float sub(float a, float b)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	ed87 0a01 	vstr	s0, [r7, #4]
 8009b22:	edc7 0a00 	vstr	s1, [r7]
	SLOP_R;
 8009b26:	bf00      	nop
 8009b28:	bf00      	nop
 8009b2a:	bf00      	nop
 8009b2c:	bf00      	nop
 8009b2e:	bf00      	nop
 8009b30:	bf00      	nop
 8009b32:	bf00      	nop
 8009b34:	bf00      	nop
 8009b36:	bf00      	nop
 8009b38:	bf00      	nop
 8009b3a:	bf00      	nop
 8009b3c:	bf00      	nop
 8009b3e:	bf00      	nop
 8009b40:	bf00      	nop
 8009b42:	bf00      	nop
 8009b44:	bf00      	nop
 8009b46:	bf00      	nop
 8009b48:	bf00      	nop
 8009b4a:	bf00      	nop
 8009b4c:	bf00      	nop
 8009b4e:	bf00      	nop
 8009b50:	bf00      	nop
 8009b52:	bf00      	nop
 8009b54:	bf00      	nop
 8009b56:	bf00      	nop
 8009b58:	bf00      	nop
 8009b5a:	bf00      	nop
 8009b5c:	bf00      	nop
 8009b5e:	bf00      	nop
 8009b60:	bf00      	nop
 8009b62:	bf00      	nop
 8009b64:	bf00      	nop
 8009b66:	bf00      	nop
 8009b68:	bf00      	nop
 8009b6a:	bf00      	nop
 8009b6c:	bf00      	nop
 8009b6e:	bf00      	nop
 8009b70:	bf00      	nop
 8009b72:	bf00      	nop
 8009b74:	bf00      	nop
 8009b76:	bf00      	nop
 8009b78:	bf00      	nop
 8009b7a:	bf00      	nop
 8009b7c:	bf00      	nop
 8009b7e:	bf00      	nop
 8009b80:	bf00      	nop
 8009b82:	bf00      	nop
 8009b84:	bf00      	nop
 8009b86:	bf00      	nop
 8009b88:	bf00      	nop
 8009b8a:	bf00      	nop
 8009b8c:	bf00      	nop
 8009b8e:	bf00      	nop
 8009b90:	bf00      	nop
 8009b92:	bf00      	nop
 8009b94:	bf00      	nop
 8009b96:	bf00      	nop
 8009b98:	bf00      	nop
 8009b9a:	bf00      	nop
 8009b9c:	bf00      	nop
 8009b9e:	bf00      	nop
 8009ba0:	bf00      	nop
 8009ba2:	bf00      	nop
 8009ba4:	bf00      	nop
 8009ba6:	bf00      	nop
 8009ba8:	bf00      	nop
 8009baa:	bf00      	nop
 8009bac:	bf00      	nop
 8009bae:	bf00      	nop
 8009bb0:	bf00      	nop
 8009bb2:	bf00      	nop
 8009bb4:	bf00      	nop
 8009bb6:	bf00      	nop
 8009bb8:	bf00      	nop
 8009bba:	bf00      	nop
 8009bbc:	bf00      	nop
 8009bbe:	bf00      	nop
 8009bc0:	bf00      	nop
 8009bc2:	bf00      	nop
 8009bc4:	bf00      	nop
 8009bc6:	bf00      	nop
 8009bc8:	bf00      	nop
 8009bca:	bf00      	nop
 8009bcc:	bf00      	nop
 8009bce:	bf00      	nop
 8009bd0:	bf00      	nop
 8009bd2:	bf00      	nop
 8009bd4:	bf00      	nop
 8009bd6:	bf00      	nop
 8009bd8:	bf00      	nop
 8009bda:	bf00      	nop
 8009bdc:	bf00      	nop
 8009bde:	bf00      	nop
 8009be0:	bf00      	nop
 8009be2:	bf00      	nop
 8009be4:	bf00      	nop
 8009be6:	bf00      	nop
 8009be8:	bf00      	nop
 8009bea:	bf00      	nop
 8009bec:	bf00      	nop
	return a-b;
 8009bee:	ed97 7a01 	vldr	s14, [r7, #4]
 8009bf2:	edd7 7a00 	vldr	s15, [r7]
 8009bf6:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8009bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <mul>:
static float mul(float a, float b)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8009c12:	edc7 0a00 	vstr	s1, [r7]
	SLOP_R;
 8009c16:	bf00      	nop
 8009c18:	bf00      	nop
 8009c1a:	bf00      	nop
 8009c1c:	bf00      	nop
 8009c1e:	bf00      	nop
 8009c20:	bf00      	nop
 8009c22:	bf00      	nop
 8009c24:	bf00      	nop
 8009c26:	bf00      	nop
 8009c28:	bf00      	nop
 8009c2a:	bf00      	nop
 8009c2c:	bf00      	nop
 8009c2e:	bf00      	nop
 8009c30:	bf00      	nop
 8009c32:	bf00      	nop
 8009c34:	bf00      	nop
 8009c36:	bf00      	nop
 8009c38:	bf00      	nop
 8009c3a:	bf00      	nop
 8009c3c:	bf00      	nop
 8009c3e:	bf00      	nop
 8009c40:	bf00      	nop
 8009c42:	bf00      	nop
 8009c44:	bf00      	nop
 8009c46:	bf00      	nop
 8009c48:	bf00      	nop
 8009c4a:	bf00      	nop
 8009c4c:	bf00      	nop
 8009c4e:	bf00      	nop
 8009c50:	bf00      	nop
 8009c52:	bf00      	nop
 8009c54:	bf00      	nop
 8009c56:	bf00      	nop
 8009c58:	bf00      	nop
 8009c5a:	bf00      	nop
 8009c5c:	bf00      	nop
 8009c5e:	bf00      	nop
 8009c60:	bf00      	nop
 8009c62:	bf00      	nop
 8009c64:	bf00      	nop
 8009c66:	bf00      	nop
 8009c68:	bf00      	nop
 8009c6a:	bf00      	nop
 8009c6c:	bf00      	nop
 8009c6e:	bf00      	nop
 8009c70:	bf00      	nop
 8009c72:	bf00      	nop
 8009c74:	bf00      	nop
 8009c76:	bf00      	nop
 8009c78:	bf00      	nop
 8009c7a:	bf00      	nop
 8009c7c:	bf00      	nop
 8009c7e:	bf00      	nop
 8009c80:	bf00      	nop
 8009c82:	bf00      	nop
 8009c84:	bf00      	nop
 8009c86:	bf00      	nop
 8009c88:	bf00      	nop
 8009c8a:	bf00      	nop
 8009c8c:	bf00      	nop
 8009c8e:	bf00      	nop
 8009c90:	bf00      	nop
 8009c92:	bf00      	nop
 8009c94:	bf00      	nop
 8009c96:	bf00      	nop
 8009c98:	bf00      	nop
 8009c9a:	bf00      	nop
 8009c9c:	bf00      	nop
 8009c9e:	bf00      	nop
 8009ca0:	bf00      	nop
 8009ca2:	bf00      	nop
 8009ca4:	bf00      	nop
 8009ca6:	bf00      	nop
 8009ca8:	bf00      	nop
 8009caa:	bf00      	nop
 8009cac:	bf00      	nop
 8009cae:	bf00      	nop
 8009cb0:	bf00      	nop
 8009cb2:	bf00      	nop
 8009cb4:	bf00      	nop
 8009cb6:	bf00      	nop
 8009cb8:	bf00      	nop
 8009cba:	bf00      	nop
 8009cbc:	bf00      	nop
 8009cbe:	bf00      	nop
 8009cc0:	bf00      	nop
 8009cc2:	bf00      	nop
 8009cc4:	bf00      	nop
 8009cc6:	bf00      	nop
 8009cc8:	bf00      	nop
 8009cca:	bf00      	nop
 8009ccc:	bf00      	nop
 8009cce:	bf00      	nop
 8009cd0:	bf00      	nop
 8009cd2:	bf00      	nop
 8009cd4:	bf00      	nop
 8009cd6:	bf00      	nop
 8009cd8:	bf00      	nop
 8009cda:	bf00      	nop
 8009cdc:	bf00      	nop
	return a * a;
 8009cde:	edd7 7a01 	vldr	s15, [r7, #4]
 8009ce2:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
 8009ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <divide>:
static float divide(float a, float b)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	ed87 0a01 	vstr	s0, [r7, #4]
 8009cfe:	edc7 0a00 	vstr	s1, [r7]
	//SLOP;
	return a*b;
 8009d02:	ed97 7a01 	vldr	s14, [r7, #4]
 8009d06:	edd7 7a00 	vldr	s15, [r7]
 8009d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8009d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <delay>:
static void delay()
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b083      	sub	sp, #12
 8009d20:	af00      	add	r7, sp, #0
	for(uint32_t i =0; i< 300000; i++);
 8009d22:	2300      	movs	r3, #0
 8009d24:	607b      	str	r3, [r7, #4]
 8009d26:	e002      	b.n	8009d2e <delay+0x12>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	607b      	str	r3, [r7, #4]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a04      	ldr	r2, [pc, #16]	; (8009d44 <delay+0x28>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d9f8      	bls.n	8009d28 <delay+0xc>
}
 8009d36:	bf00      	nop
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr
 8009d44:	000493df 	.word	0x000493df

08009d48 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	4603      	mov	r3, r0
 8009d50:	80fb      	strh	r3, [r7, #6]
	fw_upgrade = 1;
 8009d52:	4b04      	ldr	r3, [pc, #16]	; (8009d64 <HAL_GPIO_EXTI_Callback+0x1c>)
 8009d54:	2201      	movs	r2, #1
 8009d56:	701a      	strb	r2, [r3, #0]
}
 8009d58:	bf00      	nop
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr
 8009d64:	200002fc 	.word	0x200002fc

08009d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009d6c:	b672      	cpsid	i
}
 8009d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009d70:	e7fe      	b.n	8009d70 <Error_Handler+0x8>
	...

08009d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d7a:	4b0f      	ldr	r3, [pc, #60]	; (8009db8 <HAL_MspInit+0x44>)
 8009d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d7e:	4a0e      	ldr	r2, [pc, #56]	; (8009db8 <HAL_MspInit+0x44>)
 8009d80:	f043 0301 	orr.w	r3, r3, #1
 8009d84:	6613      	str	r3, [r2, #96]	; 0x60
 8009d86:	4b0c      	ldr	r3, [pc, #48]	; (8009db8 <HAL_MspInit+0x44>)
 8009d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d8a:	f003 0301 	and.w	r3, r3, #1
 8009d8e:	607b      	str	r3, [r7, #4]
 8009d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009d92:	4b09      	ldr	r3, [pc, #36]	; (8009db8 <HAL_MspInit+0x44>)
 8009d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d96:	4a08      	ldr	r2, [pc, #32]	; (8009db8 <HAL_MspInit+0x44>)
 8009d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d9c:	6593      	str	r3, [r2, #88]	; 0x58
 8009d9e:	4b06      	ldr	r3, [pc, #24]	; (8009db8 <HAL_MspInit+0x44>)
 8009da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009da6:	603b      	str	r3, [r7, #0]
 8009da8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009daa:	bf00      	nop
 8009dac:	370c      	adds	r7, #12
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	40021000 	.word	0x40021000

08009dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b09e      	sub	sp, #120	; 0x78
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009dc4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009dc8:	2200      	movs	r2, #0
 8009dca:	601a      	str	r2, [r3, #0]
 8009dcc:	605a      	str	r2, [r3, #4]
 8009dce:	609a      	str	r2, [r3, #8]
 8009dd0:	60da      	str	r2, [r3, #12]
 8009dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009dd4:	f107 0310 	add.w	r3, r7, #16
 8009dd8:	2254      	movs	r2, #84	; 0x54
 8009dda:	2100      	movs	r1, #0
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f002 fb03 	bl	800c3e8 <memset>
  if(huart->Instance==USART1)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a1f      	ldr	r2, [pc, #124]	; (8009e64 <HAL_UART_MspInit+0xa8>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d137      	bne.n	8009e5c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8009dec:	2301      	movs	r3, #1
 8009dee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8009df0:	2300      	movs	r3, #0
 8009df2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009df4:	f107 0310 	add.w	r3, r7, #16
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f001 fb25 	bl	800b448 <HAL_RCCEx_PeriphCLKConfig>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8009e04:	f7ff ffb0 	bl	8009d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009e08:	4b17      	ldr	r3, [pc, #92]	; (8009e68 <HAL_UART_MspInit+0xac>)
 8009e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e0c:	4a16      	ldr	r2, [pc, #88]	; (8009e68 <HAL_UART_MspInit+0xac>)
 8009e0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e12:	6613      	str	r3, [r2, #96]	; 0x60
 8009e14:	4b14      	ldr	r3, [pc, #80]	; (8009e68 <HAL_UART_MspInit+0xac>)
 8009e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e1c:	60fb      	str	r3, [r7, #12]
 8009e1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e20:	4b11      	ldr	r3, [pc, #68]	; (8009e68 <HAL_UART_MspInit+0xac>)
 8009e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e24:	4a10      	ldr	r2, [pc, #64]	; (8009e68 <HAL_UART_MspInit+0xac>)
 8009e26:	f043 0301 	orr.w	r3, r3, #1
 8009e2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e2c:	4b0e      	ldr	r3, [pc, #56]	; (8009e68 <HAL_UART_MspInit+0xac>)
 8009e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e30:	f003 0301 	and.w	r3, r3, #1
 8009e34:	60bb      	str	r3, [r7, #8]
 8009e36:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8009e38:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8009e3c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e3e:	2302      	movs	r3, #2
 8009e40:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e42:	2300      	movs	r3, #0
 8009e44:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e46:	2303      	movs	r3, #3
 8009e48:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009e4a:	2307      	movs	r3, #7
 8009e4c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e4e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009e52:	4619      	mov	r1, r3
 8009e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009e58:	f000 fac0 	bl	800a3dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8009e5c:	bf00      	nop
 8009e5e:	3778      	adds	r7, #120	; 0x78
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	40013800 	.word	0x40013800
 8009e68:	40021000 	.word	0x40021000

08009e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009e70:	e7fe      	b.n	8009e70 <NMI_Handler+0x4>

08009e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009e72:	b480      	push	{r7}
 8009e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009e76:	e7fe      	b.n	8009e76 <HardFault_Handler+0x4>

08009e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009e7c:	e7fe      	b.n	8009e7c <MemManage_Handler+0x4>

08009e7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009e7e:	b480      	push	{r7}
 8009e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009e82:	e7fe      	b.n	8009e82 <BusFault_Handler+0x4>

08009e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009e84:	b480      	push	{r7}
 8009e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009e88:	e7fe      	b.n	8009e88 <UsageFault_Handler+0x4>

08009e8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009e8a:	b480      	push	{r7}
 8009e8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009e8e:	bf00      	nop
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009e9c:	bf00      	nop
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009eaa:	bf00      	nop
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009eb8:	f000 f95e 	bl	800a178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009ebc:	bf00      	nop
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(fw_upgrade_pin_Pin);
 8009ec4:	2020      	movs	r0, #32
 8009ec6:	f000 fc0b 	bl	800a6e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8009eca:	bf00      	nop
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009ece:	b480      	push	{r7}
 8009ed0:	af00      	add	r7, sp, #0
  return 1;
 8009ed2:	2301      	movs	r3, #1
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <_kill>:

int _kill(int pid, int sig)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b082      	sub	sp, #8
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
 8009ee6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8009ee8:	f002 fa54 	bl	800c394 <__errno>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2216      	movs	r2, #22
 8009ef0:	601a      	str	r2, [r3, #0]
  return -1;
 8009ef2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <_exit>:

void _exit (int status)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b082      	sub	sp, #8
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009f06:	f04f 31ff 	mov.w	r1, #4294967295
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f7ff ffe7 	bl	8009ede <_kill>
  while (1) {}    /* Make sure we hang here */
 8009f10:	e7fe      	b.n	8009f10 <_exit+0x12>

08009f12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b086      	sub	sp, #24
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	60f8      	str	r0, [r7, #12]
 8009f1a:	60b9      	str	r1, [r7, #8]
 8009f1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009f1e:	2300      	movs	r3, #0
 8009f20:	617b      	str	r3, [r7, #20]
 8009f22:	e00a      	b.n	8009f3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009f24:	f3af 8000 	nop.w
 8009f28:	4601      	mov	r1, r0
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	1c5a      	adds	r2, r3, #1
 8009f2e:	60ba      	str	r2, [r7, #8]
 8009f30:	b2ca      	uxtb	r2, r1
 8009f32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	3301      	adds	r3, #1
 8009f38:	617b      	str	r3, [r7, #20]
 8009f3a:	697a      	ldr	r2, [r7, #20]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	dbf0      	blt.n	8009f24 <_read+0x12>
  }

  return len;
 8009f42:	687b      	ldr	r3, [r7, #4]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3718      	adds	r7, #24
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b086      	sub	sp, #24
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009f58:	2300      	movs	r3, #0
 8009f5a:	617b      	str	r3, [r7, #20]
 8009f5c:	e009      	b.n	8009f72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	1c5a      	adds	r2, r3, #1
 8009f62:	60ba      	str	r2, [r7, #8]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	4618      	mov	r0, r3
 8009f68:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	617b      	str	r3, [r7, #20]
 8009f72:	697a      	ldr	r2, [r7, #20]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	429a      	cmp	r2, r3
 8009f78:	dbf1      	blt.n	8009f5e <_write+0x12>
  }
  return len;
 8009f7a:	687b      	ldr	r3, [r7, #4]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3718      	adds	r7, #24
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <_close>:

int _close(int file)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009f8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009fac:	605a      	str	r2, [r3, #4]
  return 0;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <_isatty>:

int _isatty(int file)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009fc4:	2301      	movs	r3, #1
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	370c      	adds	r7, #12
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr

08009fd2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009fd2:	b480      	push	{r7}
 8009fd4:	b085      	sub	sp, #20
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	60f8      	str	r0, [r7, #12]
 8009fda:	60b9      	str	r1, [r7, #8]
 8009fdc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3714      	adds	r7, #20
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009ff4:	4a14      	ldr	r2, [pc, #80]	; (800a048 <_sbrk+0x5c>)
 8009ff6:	4b15      	ldr	r3, [pc, #84]	; (800a04c <_sbrk+0x60>)
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a000:	4b13      	ldr	r3, [pc, #76]	; (800a050 <_sbrk+0x64>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d102      	bne.n	800a00e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a008:	4b11      	ldr	r3, [pc, #68]	; (800a050 <_sbrk+0x64>)
 800a00a:	4a12      	ldr	r2, [pc, #72]	; (800a054 <_sbrk+0x68>)
 800a00c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a00e:	4b10      	ldr	r3, [pc, #64]	; (800a050 <_sbrk+0x64>)
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4413      	add	r3, r2
 800a016:	693a      	ldr	r2, [r7, #16]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d207      	bcs.n	800a02c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a01c:	f002 f9ba 	bl	800c394 <__errno>
 800a020:	4603      	mov	r3, r0
 800a022:	220c      	movs	r2, #12
 800a024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a026:	f04f 33ff 	mov.w	r3, #4294967295
 800a02a:	e009      	b.n	800a040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a02c:	4b08      	ldr	r3, [pc, #32]	; (800a050 <_sbrk+0x64>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a032:	4b07      	ldr	r3, [pc, #28]	; (800a050 <_sbrk+0x64>)
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4413      	add	r3, r2
 800a03a:	4a05      	ldr	r2, [pc, #20]	; (800a050 <_sbrk+0x64>)
 800a03c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a03e:	68fb      	ldr	r3, [r7, #12]
}
 800a040:	4618      	mov	r0, r3
 800a042:	3718      	adds	r7, #24
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	20010000 	.word	0x20010000
 800a04c:	00000400 	.word	0x00000400
 800a050:	20000300 	.word	0x20000300
 800a054:	20000318 	.word	0x20000318

0800a058 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800a058:	b480      	push	{r7}
 800a05a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800a05c:	4b06      	ldr	r3, [pc, #24]	; (800a078 <SystemInit+0x20>)
 800a05e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a062:	4a05      	ldr	r2, [pc, #20]	; (800a078 <SystemInit+0x20>)
 800a064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800a06c:	bf00      	nop
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	e000ed00 	.word	0xe000ed00

0800a07c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800a07c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a0b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800a080:	f7ff ffea 	bl	800a058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a084:	480c      	ldr	r0, [pc, #48]	; (800a0b8 <LoopForever+0x6>)
  ldr r1, =_edata
 800a086:	490d      	ldr	r1, [pc, #52]	; (800a0bc <LoopForever+0xa>)
  ldr r2, =_sidata
 800a088:	4a0d      	ldr	r2, [pc, #52]	; (800a0c0 <LoopForever+0xe>)
  movs r3, #0
 800a08a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a08c:	e002      	b.n	800a094 <LoopCopyDataInit>

0800a08e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a08e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a092:	3304      	adds	r3, #4

0800a094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a098:	d3f9      	bcc.n	800a08e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a09a:	4a0a      	ldr	r2, [pc, #40]	; (800a0c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800a09c:	4c0a      	ldr	r4, [pc, #40]	; (800a0c8 <LoopForever+0x16>)
  movs r3, #0
 800a09e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a0a0:	e001      	b.n	800a0a6 <LoopFillZerobss>

0800a0a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a0a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a0a4:	3204      	adds	r2, #4

0800a0a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a0a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a0a8:	d3fb      	bcc.n	800a0a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a0aa:	f002 f979 	bl	800c3a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a0ae:	f7ff fafd 	bl	80096ac <main>

0800a0b2 <LoopForever>:

LoopForever:
    b LoopForever
 800a0b2:	e7fe      	b.n	800a0b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800a0b4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800a0b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a0bc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800a0c0:	0800f64c 	.word	0x0800f64c
  ldr r2, =_sbss
 800a0c4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800a0c8:	20000318 	.word	0x20000318

0800a0cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a0cc:	e7fe      	b.n	800a0cc <ADC1_IRQHandler>

0800a0ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b082      	sub	sp, #8
 800a0d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a0d8:	2003      	movs	r0, #3
 800a0da:	f000 f93d 	bl	800a358 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a0de:	200f      	movs	r0, #15
 800a0e0:	f000 f80e 	bl	800a100 <HAL_InitTick>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	71fb      	strb	r3, [r7, #7]
 800a0ee:	e001      	b.n	800a0f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a0f0:	f7ff fe40 	bl	8009d74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a0f4:	79fb      	ldrb	r3, [r7, #7]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3708      	adds	r7, #8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
	...

0800a100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a108:	2300      	movs	r3, #0
 800a10a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800a10c:	4b17      	ldr	r3, [pc, #92]	; (800a16c <HAL_InitTick+0x6c>)
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d023      	beq.n	800a15c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800a114:	4b16      	ldr	r3, [pc, #88]	; (800a170 <HAL_InitTick+0x70>)
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	4b14      	ldr	r3, [pc, #80]	; (800a16c <HAL_InitTick+0x6c>)
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	4619      	mov	r1, r3
 800a11e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a122:	fbb3 f3f1 	udiv	r3, r3, r1
 800a126:	fbb2 f3f3 	udiv	r3, r2, r3
 800a12a:	4618      	mov	r0, r3
 800a12c:	f000 f949 	bl	800a3c2 <HAL_SYSTICK_Config>
 800a130:	4603      	mov	r3, r0
 800a132:	2b00      	cmp	r3, #0
 800a134:	d10f      	bne.n	800a156 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2b0f      	cmp	r3, #15
 800a13a:	d809      	bhi.n	800a150 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a13c:	2200      	movs	r2, #0
 800a13e:	6879      	ldr	r1, [r7, #4]
 800a140:	f04f 30ff 	mov.w	r0, #4294967295
 800a144:	f000 f913 	bl	800a36e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a148:	4a0a      	ldr	r2, [pc, #40]	; (800a174 <HAL_InitTick+0x74>)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6013      	str	r3, [r2, #0]
 800a14e:	e007      	b.n	800a160 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	73fb      	strb	r3, [r7, #15]
 800a154:	e004      	b.n	800a160 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	73fb      	strb	r3, [r7, #15]
 800a15a:	e001      	b.n	800a160 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a160:	7bfb      	ldrb	r3, [r7, #15]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	20000008 	.word	0x20000008
 800a170:	20000000 	.word	0x20000000
 800a174:	20000004 	.word	0x20000004

0800a178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a178:	b480      	push	{r7}
 800a17a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a17c:	4b06      	ldr	r3, [pc, #24]	; (800a198 <HAL_IncTick+0x20>)
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	461a      	mov	r2, r3
 800a182:	4b06      	ldr	r3, [pc, #24]	; (800a19c <HAL_IncTick+0x24>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4413      	add	r3, r2
 800a188:	4a04      	ldr	r2, [pc, #16]	; (800a19c <HAL_IncTick+0x24>)
 800a18a:	6013      	str	r3, [r2, #0]
}
 800a18c:	bf00      	nop
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	20000008 	.word	0x20000008
 800a19c:	20000304 	.word	0x20000304

0800a1a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	af00      	add	r7, sp, #0
  return uwTick;
 800a1a4:	4b03      	ldr	r3, [pc, #12]	; (800a1b4 <HAL_GetTick+0x14>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	20000304 	.word	0x20000304

0800a1b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f003 0307 	and.w	r3, r3, #7
 800a1c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a1c8:	4b0c      	ldr	r3, [pc, #48]	; (800a1fc <__NVIC_SetPriorityGrouping+0x44>)
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a1ce:	68ba      	ldr	r2, [r7, #8]
 800a1d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a1e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a1e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a1ea:	4a04      	ldr	r2, [pc, #16]	; (800a1fc <__NVIC_SetPriorityGrouping+0x44>)
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	60d3      	str	r3, [r2, #12]
}
 800a1f0:	bf00      	nop
 800a1f2:	3714      	adds	r7, #20
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	e000ed00 	.word	0xe000ed00

0800a200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a200:	b480      	push	{r7}
 800a202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a204:	4b04      	ldr	r3, [pc, #16]	; (800a218 <__NVIC_GetPriorityGrouping+0x18>)
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	0a1b      	lsrs	r3, r3, #8
 800a20a:	f003 0307 	and.w	r3, r3, #7
}
 800a20e:	4618      	mov	r0, r3
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr
 800a218:	e000ed00 	.word	0xe000ed00

0800a21c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	4603      	mov	r3, r0
 800a224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	db0b      	blt.n	800a246 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a22e:	79fb      	ldrb	r3, [r7, #7]
 800a230:	f003 021f 	and.w	r2, r3, #31
 800a234:	4907      	ldr	r1, [pc, #28]	; (800a254 <__NVIC_EnableIRQ+0x38>)
 800a236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a23a:	095b      	lsrs	r3, r3, #5
 800a23c:	2001      	movs	r0, #1
 800a23e:	fa00 f202 	lsl.w	r2, r0, r2
 800a242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a246:	bf00      	nop
 800a248:	370c      	adds	r7, #12
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	e000e100 	.word	0xe000e100

0800a258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	4603      	mov	r3, r0
 800a260:	6039      	str	r1, [r7, #0]
 800a262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	db0a      	blt.n	800a282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	b2da      	uxtb	r2, r3
 800a270:	490c      	ldr	r1, [pc, #48]	; (800a2a4 <__NVIC_SetPriority+0x4c>)
 800a272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a276:	0112      	lsls	r2, r2, #4
 800a278:	b2d2      	uxtb	r2, r2
 800a27a:	440b      	add	r3, r1
 800a27c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a280:	e00a      	b.n	800a298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	b2da      	uxtb	r2, r3
 800a286:	4908      	ldr	r1, [pc, #32]	; (800a2a8 <__NVIC_SetPriority+0x50>)
 800a288:	79fb      	ldrb	r3, [r7, #7]
 800a28a:	f003 030f 	and.w	r3, r3, #15
 800a28e:	3b04      	subs	r3, #4
 800a290:	0112      	lsls	r2, r2, #4
 800a292:	b2d2      	uxtb	r2, r2
 800a294:	440b      	add	r3, r1
 800a296:	761a      	strb	r2, [r3, #24]
}
 800a298:	bf00      	nop
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr
 800a2a4:	e000e100 	.word	0xe000e100
 800a2a8:	e000ed00 	.word	0xe000ed00

0800a2ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b089      	sub	sp, #36	; 0x24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f003 0307 	and.w	r3, r3, #7
 800a2be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	f1c3 0307 	rsb	r3, r3, #7
 800a2c6:	2b04      	cmp	r3, #4
 800a2c8:	bf28      	it	cs
 800a2ca:	2304      	movcs	r3, #4
 800a2cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	3304      	adds	r3, #4
 800a2d2:	2b06      	cmp	r3, #6
 800a2d4:	d902      	bls.n	800a2dc <NVIC_EncodePriority+0x30>
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	3b03      	subs	r3, #3
 800a2da:	e000      	b.n	800a2de <NVIC_EncodePriority+0x32>
 800a2dc:	2300      	movs	r3, #0
 800a2de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a2e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ea:	43da      	mvns	r2, r3
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	401a      	ands	r2, r3
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a2f4:	f04f 31ff 	mov.w	r1, #4294967295
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a2fe:	43d9      	mvns	r1, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a304:	4313      	orrs	r3, r2
         );
}
 800a306:	4618      	mov	r0, r3
 800a308:	3724      	adds	r7, #36	; 0x24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr
	...

0800a314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	3b01      	subs	r3, #1
 800a320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a324:	d301      	bcc.n	800a32a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a326:	2301      	movs	r3, #1
 800a328:	e00f      	b.n	800a34a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a32a:	4a0a      	ldr	r2, [pc, #40]	; (800a354 <SysTick_Config+0x40>)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	3b01      	subs	r3, #1
 800a330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a332:	210f      	movs	r1, #15
 800a334:	f04f 30ff 	mov.w	r0, #4294967295
 800a338:	f7ff ff8e 	bl	800a258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a33c:	4b05      	ldr	r3, [pc, #20]	; (800a354 <SysTick_Config+0x40>)
 800a33e:	2200      	movs	r2, #0
 800a340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a342:	4b04      	ldr	r3, [pc, #16]	; (800a354 <SysTick_Config+0x40>)
 800a344:	2207      	movs	r2, #7
 800a346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	e000e010 	.word	0xe000e010

0800a358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b082      	sub	sp, #8
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f7ff ff29 	bl	800a1b8 <__NVIC_SetPriorityGrouping>
}
 800a366:	bf00      	nop
 800a368:	3708      	adds	r7, #8
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b086      	sub	sp, #24
 800a372:	af00      	add	r7, sp, #0
 800a374:	4603      	mov	r3, r0
 800a376:	60b9      	str	r1, [r7, #8]
 800a378:	607a      	str	r2, [r7, #4]
 800a37a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a37c:	2300      	movs	r3, #0
 800a37e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a380:	f7ff ff3e 	bl	800a200 <__NVIC_GetPriorityGrouping>
 800a384:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	68b9      	ldr	r1, [r7, #8]
 800a38a:	6978      	ldr	r0, [r7, #20]
 800a38c:	f7ff ff8e 	bl	800a2ac <NVIC_EncodePriority>
 800a390:	4602      	mov	r2, r0
 800a392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a396:	4611      	mov	r1, r2
 800a398:	4618      	mov	r0, r3
 800a39a:	f7ff ff5d 	bl	800a258 <__NVIC_SetPriority>
}
 800a39e:	bf00      	nop
 800a3a0:	3718      	adds	r7, #24
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b082      	sub	sp, #8
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a3b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7ff ff31 	bl	800a21c <__NVIC_EnableIRQ>
}
 800a3ba:	bf00      	nop
 800a3bc:	3708      	adds	r7, #8
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b082      	sub	sp, #8
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f7ff ffa2 	bl	800a314 <SysTick_Config>
 800a3d0:	4603      	mov	r3, r0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3708      	adds	r7, #8
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
	...

0800a3dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b087      	sub	sp, #28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a3ea:	e148      	b.n	800a67e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	2101      	movs	r1, #1
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a3f8:	4013      	ands	r3, r2
 800a3fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f000 813a 	beq.w	800a678 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	f003 0303 	and.w	r3, r3, #3
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d005      	beq.n	800a41c <HAL_GPIO_Init+0x40>
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	f003 0303 	and.w	r3, r3, #3
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d130      	bne.n	800a47e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	005b      	lsls	r3, r3, #1
 800a426:	2203      	movs	r2, #3
 800a428:	fa02 f303 	lsl.w	r3, r2, r3
 800a42c:	43db      	mvns	r3, r3
 800a42e:	693a      	ldr	r2, [r7, #16]
 800a430:	4013      	ands	r3, r2
 800a432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	68da      	ldr	r2, [r3, #12]
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	005b      	lsls	r3, r3, #1
 800a43c:	fa02 f303 	lsl.w	r3, r2, r3
 800a440:	693a      	ldr	r2, [r7, #16]
 800a442:	4313      	orrs	r3, r2
 800a444:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	693a      	ldr	r2, [r7, #16]
 800a44a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a452:	2201      	movs	r2, #1
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	fa02 f303 	lsl.w	r3, r2, r3
 800a45a:	43db      	mvns	r3, r3
 800a45c:	693a      	ldr	r2, [r7, #16]
 800a45e:	4013      	ands	r3, r2
 800a460:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	091b      	lsrs	r3, r3, #4
 800a468:	f003 0201 	and.w	r2, r3, #1
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	fa02 f303 	lsl.w	r3, r2, r3
 800a472:	693a      	ldr	r2, [r7, #16]
 800a474:	4313      	orrs	r3, r2
 800a476:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	693a      	ldr	r2, [r7, #16]
 800a47c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	f003 0303 	and.w	r3, r3, #3
 800a486:	2b03      	cmp	r3, #3
 800a488:	d017      	beq.n	800a4ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	005b      	lsls	r3, r3, #1
 800a494:	2203      	movs	r2, #3
 800a496:	fa02 f303 	lsl.w	r3, r2, r3
 800a49a:	43db      	mvns	r3, r3
 800a49c:	693a      	ldr	r2, [r7, #16]
 800a49e:	4013      	ands	r3, r2
 800a4a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	689a      	ldr	r2, [r3, #8]
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	005b      	lsls	r3, r3, #1
 800a4aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ae:	693a      	ldr	r2, [r7, #16]
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	693a      	ldr	r2, [r7, #16]
 800a4b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	f003 0303 	and.w	r3, r3, #3
 800a4c2:	2b02      	cmp	r3, #2
 800a4c4:	d123      	bne.n	800a50e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	08da      	lsrs	r2, r3, #3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	3208      	adds	r2, #8
 800a4ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	f003 0307 	and.w	r3, r3, #7
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	220f      	movs	r2, #15
 800a4de:	fa02 f303 	lsl.w	r3, r2, r3
 800a4e2:	43db      	mvns	r3, r3
 800a4e4:	693a      	ldr	r2, [r7, #16]
 800a4e6:	4013      	ands	r3, r2
 800a4e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	691a      	ldr	r2, [r3, #16]
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	f003 0307 	and.w	r3, r3, #7
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4fa:	693a      	ldr	r2, [r7, #16]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	08da      	lsrs	r2, r3, #3
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	3208      	adds	r2, #8
 800a508:	6939      	ldr	r1, [r7, #16]
 800a50a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	005b      	lsls	r3, r3, #1
 800a518:	2203      	movs	r2, #3
 800a51a:	fa02 f303 	lsl.w	r3, r2, r3
 800a51e:	43db      	mvns	r3, r3
 800a520:	693a      	ldr	r2, [r7, #16]
 800a522:	4013      	ands	r3, r2
 800a524:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	f003 0203 	and.w	r2, r3, #3
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	005b      	lsls	r3, r3, #1
 800a532:	fa02 f303 	lsl.w	r3, r2, r3
 800a536:	693a      	ldr	r2, [r7, #16]
 800a538:	4313      	orrs	r3, r2
 800a53a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	693a      	ldr	r2, [r7, #16]
 800a540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f000 8094 	beq.w	800a678 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a550:	4b52      	ldr	r3, [pc, #328]	; (800a69c <HAL_GPIO_Init+0x2c0>)
 800a552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a554:	4a51      	ldr	r2, [pc, #324]	; (800a69c <HAL_GPIO_Init+0x2c0>)
 800a556:	f043 0301 	orr.w	r3, r3, #1
 800a55a:	6613      	str	r3, [r2, #96]	; 0x60
 800a55c:	4b4f      	ldr	r3, [pc, #316]	; (800a69c <HAL_GPIO_Init+0x2c0>)
 800a55e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a560:	f003 0301 	and.w	r3, r3, #1
 800a564:	60bb      	str	r3, [r7, #8]
 800a566:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a568:	4a4d      	ldr	r2, [pc, #308]	; (800a6a0 <HAL_GPIO_Init+0x2c4>)
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	089b      	lsrs	r3, r3, #2
 800a56e:	3302      	adds	r3, #2
 800a570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a574:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	f003 0303 	and.w	r3, r3, #3
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	220f      	movs	r2, #15
 800a580:	fa02 f303 	lsl.w	r3, r2, r3
 800a584:	43db      	mvns	r3, r3
 800a586:	693a      	ldr	r2, [r7, #16]
 800a588:	4013      	ands	r3, r2
 800a58a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a592:	d00d      	beq.n	800a5b0 <HAL_GPIO_Init+0x1d4>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	4a43      	ldr	r2, [pc, #268]	; (800a6a4 <HAL_GPIO_Init+0x2c8>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d007      	beq.n	800a5ac <HAL_GPIO_Init+0x1d0>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	4a42      	ldr	r2, [pc, #264]	; (800a6a8 <HAL_GPIO_Init+0x2cc>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d101      	bne.n	800a5a8 <HAL_GPIO_Init+0x1cc>
 800a5a4:	2302      	movs	r3, #2
 800a5a6:	e004      	b.n	800a5b2 <HAL_GPIO_Init+0x1d6>
 800a5a8:	2307      	movs	r3, #7
 800a5aa:	e002      	b.n	800a5b2 <HAL_GPIO_Init+0x1d6>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e000      	b.n	800a5b2 <HAL_GPIO_Init+0x1d6>
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	697a      	ldr	r2, [r7, #20]
 800a5b4:	f002 0203 	and.w	r2, r2, #3
 800a5b8:	0092      	lsls	r2, r2, #2
 800a5ba:	4093      	lsls	r3, r2
 800a5bc:	693a      	ldr	r2, [r7, #16]
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a5c2:	4937      	ldr	r1, [pc, #220]	; (800a6a0 <HAL_GPIO_Init+0x2c4>)
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	089b      	lsrs	r3, r3, #2
 800a5c8:	3302      	adds	r3, #2
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a5d0:	4b36      	ldr	r3, [pc, #216]	; (800a6ac <HAL_GPIO_Init+0x2d0>)
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	43db      	mvns	r3, r3
 800a5da:	693a      	ldr	r2, [r7, #16]
 800a5dc:	4013      	ands	r3, r2
 800a5de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d003      	beq.n	800a5f4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800a5ec:	693a      	ldr	r2, [r7, #16]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a5f4:	4a2d      	ldr	r2, [pc, #180]	; (800a6ac <HAL_GPIO_Init+0x2d0>)
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a5fa:	4b2c      	ldr	r3, [pc, #176]	; (800a6ac <HAL_GPIO_Init+0x2d0>)
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	43db      	mvns	r3, r3
 800a604:	693a      	ldr	r2, [r7, #16]
 800a606:	4013      	ands	r3, r2
 800a608:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a612:	2b00      	cmp	r3, #0
 800a614:	d003      	beq.n	800a61e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800a616:	693a      	ldr	r2, [r7, #16]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a61e:	4a23      	ldr	r2, [pc, #140]	; (800a6ac <HAL_GPIO_Init+0x2d0>)
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800a624:	4b21      	ldr	r3, [pc, #132]	; (800a6ac <HAL_GPIO_Init+0x2d0>)
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	43db      	mvns	r3, r3
 800a62e:	693a      	ldr	r2, [r7, #16]
 800a630:	4013      	ands	r3, r2
 800a632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d003      	beq.n	800a648 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800a640:	693a      	ldr	r2, [r7, #16]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	4313      	orrs	r3, r2
 800a646:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a648:	4a18      	ldr	r2, [pc, #96]	; (800a6ac <HAL_GPIO_Init+0x2d0>)
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800a64e:	4b17      	ldr	r3, [pc, #92]	; (800a6ac <HAL_GPIO_Init+0x2d0>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	43db      	mvns	r3, r3
 800a658:	693a      	ldr	r2, [r7, #16]
 800a65a:	4013      	ands	r3, r2
 800a65c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a666:	2b00      	cmp	r3, #0
 800a668:	d003      	beq.n	800a672 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800a66a:	693a      	ldr	r2, [r7, #16]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	4313      	orrs	r3, r2
 800a670:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a672:	4a0e      	ldr	r2, [pc, #56]	; (800a6ac <HAL_GPIO_Init+0x2d0>)
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	3301      	adds	r3, #1
 800a67c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	fa22 f303 	lsr.w	r3, r2, r3
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f47f aeaf 	bne.w	800a3ec <HAL_GPIO_Init+0x10>
  }
}
 800a68e:	bf00      	nop
 800a690:	bf00      	nop
 800a692:	371c      	adds	r7, #28
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr
 800a69c:	40021000 	.word	0x40021000
 800a6a0:	40010000 	.word	0x40010000
 800a6a4:	48000400 	.word	0x48000400
 800a6a8:	48000800 	.word	0x48000800
 800a6ac:	40010400 	.word	0x40010400

0800a6b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	807b      	strh	r3, [r7, #2]
 800a6bc:	4613      	mov	r3, r2
 800a6be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a6c0:	787b      	ldrb	r3, [r7, #1]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d003      	beq.n	800a6ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a6c6:	887a      	ldrh	r2, [r7, #2]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a6cc:	e002      	b.n	800a6d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a6ce:	887a      	ldrh	r2, [r7, #2]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a6d4:	bf00      	nop
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a6ea:	4b08      	ldr	r3, [pc, #32]	; (800a70c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a6ec:	695a      	ldr	r2, [r3, #20]
 800a6ee:	88fb      	ldrh	r3, [r7, #6]
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d006      	beq.n	800a704 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a6f6:	4a05      	ldr	r2, [pc, #20]	; (800a70c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a6f8:	88fb      	ldrh	r3, [r7, #6]
 800a6fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a6fc:	88fb      	ldrh	r3, [r7, #6]
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7ff fb22 	bl	8009d48 <HAL_GPIO_EXTI_Callback>
  }
}
 800a704:	bf00      	nop
 800a706:	3708      	adds	r7, #8
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	40010400 	.word	0x40010400

0800a710 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a710:	b480      	push	{r7}
 800a712:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a714:	4b04      	ldr	r3, [pc, #16]	; (800a728 <HAL_PWREx_GetVoltageRange+0x18>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop
 800a728:	40007000 	.word	0x40007000

0800a72c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b085      	sub	sp, #20
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a73a:	d130      	bne.n	800a79e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a73c:	4b23      	ldr	r3, [pc, #140]	; (800a7cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a748:	d038      	beq.n	800a7bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a74a:	4b20      	ldr	r3, [pc, #128]	; (800a7cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a752:	4a1e      	ldr	r2, [pc, #120]	; (800a7cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a754:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a758:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a75a:	4b1d      	ldr	r3, [pc, #116]	; (800a7d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	2232      	movs	r2, #50	; 0x32
 800a760:	fb02 f303 	mul.w	r3, r2, r3
 800a764:	4a1b      	ldr	r2, [pc, #108]	; (800a7d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a766:	fba2 2303 	umull	r2, r3, r2, r3
 800a76a:	0c9b      	lsrs	r3, r3, #18
 800a76c:	3301      	adds	r3, #1
 800a76e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a770:	e002      	b.n	800a778 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	3b01      	subs	r3, #1
 800a776:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a778:	4b14      	ldr	r3, [pc, #80]	; (800a7cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a77a:	695b      	ldr	r3, [r3, #20]
 800a77c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a784:	d102      	bne.n	800a78c <HAL_PWREx_ControlVoltageScaling+0x60>
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d1f2      	bne.n	800a772 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a78c:	4b0f      	ldr	r3, [pc, #60]	; (800a7cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a78e:	695b      	ldr	r3, [r3, #20]
 800a790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a798:	d110      	bne.n	800a7bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a79a:	2303      	movs	r3, #3
 800a79c:	e00f      	b.n	800a7be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a79e:	4b0b      	ldr	r3, [pc, #44]	; (800a7cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a7a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7aa:	d007      	beq.n	800a7bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a7ac:	4b07      	ldr	r3, [pc, #28]	; (800a7cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a7b4:	4a05      	ldr	r2, [pc, #20]	; (800a7cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a7b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a7ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a7bc:	2300      	movs	r3, #0
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3714      	adds	r7, #20
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr
 800a7ca:	bf00      	nop
 800a7cc:	40007000 	.word	0x40007000
 800a7d0:	20000000 	.word	0x20000000
 800a7d4:	431bde83 	.word	0x431bde83

0800a7d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b088      	sub	sp, #32
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d102      	bne.n	800a7ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	f000 bc02 	b.w	800aff0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7ec:	4b96      	ldr	r3, [pc, #600]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	f003 030c 	and.w	r3, r3, #12
 800a7f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a7f6:	4b94      	ldr	r3, [pc, #592]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	f003 0303 	and.w	r3, r3, #3
 800a7fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f003 0310 	and.w	r3, r3, #16
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f000 80e4 	beq.w	800a9d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d007      	beq.n	800a824 <HAL_RCC_OscConfig+0x4c>
 800a814:	69bb      	ldr	r3, [r7, #24]
 800a816:	2b0c      	cmp	r3, #12
 800a818:	f040 808b 	bne.w	800a932 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	2b01      	cmp	r3, #1
 800a820:	f040 8087 	bne.w	800a932 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a824:	4b88      	ldr	r3, [pc, #544]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f003 0302 	and.w	r3, r3, #2
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d005      	beq.n	800a83c <HAL_RCC_OscConfig+0x64>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	699b      	ldr	r3, [r3, #24]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d101      	bne.n	800a83c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	e3d9      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6a1a      	ldr	r2, [r3, #32]
 800a840:	4b81      	ldr	r3, [pc, #516]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f003 0308 	and.w	r3, r3, #8
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d004      	beq.n	800a856 <HAL_RCC_OscConfig+0x7e>
 800a84c:	4b7e      	ldr	r3, [pc, #504]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a854:	e005      	b.n	800a862 <HAL_RCC_OscConfig+0x8a>
 800a856:	4b7c      	ldr	r3, [pc, #496]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a85c:	091b      	lsrs	r3, r3, #4
 800a85e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a862:	4293      	cmp	r3, r2
 800a864:	d223      	bcs.n	800a8ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a1b      	ldr	r3, [r3, #32]
 800a86a:	4618      	mov	r0, r3
 800a86c:	f000 fd8c 	bl	800b388 <RCC_SetFlashLatencyFromMSIRange>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d001      	beq.n	800a87a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800a876:	2301      	movs	r3, #1
 800a878:	e3ba      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a87a:	4b73      	ldr	r3, [pc, #460]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a72      	ldr	r2, [pc, #456]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a880:	f043 0308 	orr.w	r3, r3, #8
 800a884:	6013      	str	r3, [r2, #0]
 800a886:	4b70      	ldr	r3, [pc, #448]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a1b      	ldr	r3, [r3, #32]
 800a892:	496d      	ldr	r1, [pc, #436]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a894:	4313      	orrs	r3, r2
 800a896:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a898:	4b6b      	ldr	r3, [pc, #428]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	69db      	ldr	r3, [r3, #28]
 800a8a4:	021b      	lsls	r3, r3, #8
 800a8a6:	4968      	ldr	r1, [pc, #416]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	604b      	str	r3, [r1, #4]
 800a8ac:	e025      	b.n	800a8fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a8ae:	4b66      	ldr	r3, [pc, #408]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a65      	ldr	r2, [pc, #404]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a8b4:	f043 0308 	orr.w	r3, r3, #8
 800a8b8:	6013      	str	r3, [r2, #0]
 800a8ba:	4b63      	ldr	r3, [pc, #396]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a1b      	ldr	r3, [r3, #32]
 800a8c6:	4960      	ldr	r1, [pc, #384]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a8cc:	4b5e      	ldr	r3, [pc, #376]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	69db      	ldr	r3, [r3, #28]
 800a8d8:	021b      	lsls	r3, r3, #8
 800a8da:	495b      	ldr	r1, [pc, #364]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a8e0:	69bb      	ldr	r3, [r7, #24]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d109      	bne.n	800a8fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a1b      	ldr	r3, [r3, #32]
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f000 fd4c 	bl	800b388 <RCC_SetFlashLatencyFromMSIRange>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d001      	beq.n	800a8fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e37a      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a8fa:	f000 fc81 	bl	800b200 <HAL_RCC_GetSysClockFreq>
 800a8fe:	4602      	mov	r2, r0
 800a900:	4b51      	ldr	r3, [pc, #324]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	091b      	lsrs	r3, r3, #4
 800a906:	f003 030f 	and.w	r3, r3, #15
 800a90a:	4950      	ldr	r1, [pc, #320]	; (800aa4c <HAL_RCC_OscConfig+0x274>)
 800a90c:	5ccb      	ldrb	r3, [r1, r3]
 800a90e:	f003 031f 	and.w	r3, r3, #31
 800a912:	fa22 f303 	lsr.w	r3, r2, r3
 800a916:	4a4e      	ldr	r2, [pc, #312]	; (800aa50 <HAL_RCC_OscConfig+0x278>)
 800a918:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a91a:	4b4e      	ldr	r3, [pc, #312]	; (800aa54 <HAL_RCC_OscConfig+0x27c>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4618      	mov	r0, r3
 800a920:	f7ff fbee 	bl	800a100 <HAL_InitTick>
 800a924:	4603      	mov	r3, r0
 800a926:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a928:	7bfb      	ldrb	r3, [r7, #15]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d052      	beq.n	800a9d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800a92e:	7bfb      	ldrb	r3, [r7, #15]
 800a930:	e35e      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	699b      	ldr	r3, [r3, #24]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d032      	beq.n	800a9a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a93a:	4b43      	ldr	r3, [pc, #268]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a42      	ldr	r2, [pc, #264]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a940:	f043 0301 	orr.w	r3, r3, #1
 800a944:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a946:	f7ff fc2b 	bl	800a1a0 <HAL_GetTick>
 800a94a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a94c:	e008      	b.n	800a960 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a94e:	f7ff fc27 	bl	800a1a0 <HAL_GetTick>
 800a952:	4602      	mov	r2, r0
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	1ad3      	subs	r3, r2, r3
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d901      	bls.n	800a960 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800a95c:	2303      	movs	r3, #3
 800a95e:	e347      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a960:	4b39      	ldr	r3, [pc, #228]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 0302 	and.w	r3, r3, #2
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d0f0      	beq.n	800a94e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a96c:	4b36      	ldr	r3, [pc, #216]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a35      	ldr	r2, [pc, #212]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a972:	f043 0308 	orr.w	r3, r3, #8
 800a976:	6013      	str	r3, [r2, #0]
 800a978:	4b33      	ldr	r3, [pc, #204]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a1b      	ldr	r3, [r3, #32]
 800a984:	4930      	ldr	r1, [pc, #192]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a986:	4313      	orrs	r3, r2
 800a988:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a98a:	4b2f      	ldr	r3, [pc, #188]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	69db      	ldr	r3, [r3, #28]
 800a996:	021b      	lsls	r3, r3, #8
 800a998:	492b      	ldr	r1, [pc, #172]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a99a:	4313      	orrs	r3, r2
 800a99c:	604b      	str	r3, [r1, #4]
 800a99e:	e01a      	b.n	800a9d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a9a0:	4b29      	ldr	r3, [pc, #164]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a28      	ldr	r2, [pc, #160]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a9a6:	f023 0301 	bic.w	r3, r3, #1
 800a9aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a9ac:	f7ff fbf8 	bl	800a1a0 <HAL_GetTick>
 800a9b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a9b2:	e008      	b.n	800a9c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a9b4:	f7ff fbf4 	bl	800a1a0 <HAL_GetTick>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	1ad3      	subs	r3, r2, r3
 800a9be:	2b02      	cmp	r3, #2
 800a9c0:	d901      	bls.n	800a9c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800a9c2:	2303      	movs	r3, #3
 800a9c4:	e314      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a9c6:	4b20      	ldr	r3, [pc, #128]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f003 0302 	and.w	r3, r3, #2
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1f0      	bne.n	800a9b4 <HAL_RCC_OscConfig+0x1dc>
 800a9d2:	e000      	b.n	800a9d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a9d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f003 0301 	and.w	r3, r3, #1
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d073      	beq.n	800aaca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	2b08      	cmp	r3, #8
 800a9e6:	d005      	beq.n	800a9f4 <HAL_RCC_OscConfig+0x21c>
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	2b0c      	cmp	r3, #12
 800a9ec:	d10e      	bne.n	800aa0c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	2b03      	cmp	r3, #3
 800a9f2:	d10b      	bne.n	800aa0c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a9f4:	4b14      	ldr	r3, [pc, #80]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d063      	beq.n	800aac8 <HAL_RCC_OscConfig+0x2f0>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d15f      	bne.n	800aac8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e2f1      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa14:	d106      	bne.n	800aa24 <HAL_RCC_OscConfig+0x24c>
 800aa16:	4b0c      	ldr	r3, [pc, #48]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a0b      	ldr	r2, [pc, #44]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800aa1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa20:	6013      	str	r3, [r2, #0]
 800aa22:	e025      	b.n	800aa70 <HAL_RCC_OscConfig+0x298>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa2c:	d114      	bne.n	800aa58 <HAL_RCC_OscConfig+0x280>
 800aa2e:	4b06      	ldr	r3, [pc, #24]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a05      	ldr	r2, [pc, #20]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800aa34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa38:	6013      	str	r3, [r2, #0]
 800aa3a:	4b03      	ldr	r3, [pc, #12]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a02      	ldr	r2, [pc, #8]	; (800aa48 <HAL_RCC_OscConfig+0x270>)
 800aa40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa44:	6013      	str	r3, [r2, #0]
 800aa46:	e013      	b.n	800aa70 <HAL_RCC_OscConfig+0x298>
 800aa48:	40021000 	.word	0x40021000
 800aa4c:	0800f218 	.word	0x0800f218
 800aa50:	20000000 	.word	0x20000000
 800aa54:	20000004 	.word	0x20000004
 800aa58:	4ba0      	ldr	r3, [pc, #640]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a9f      	ldr	r2, [pc, #636]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800aa5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa62:	6013      	str	r3, [r2, #0]
 800aa64:	4b9d      	ldr	r3, [pc, #628]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a9c      	ldr	r2, [pc, #624]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800aa6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d013      	beq.n	800aaa0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa78:	f7ff fb92 	bl	800a1a0 <HAL_GetTick>
 800aa7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aa7e:	e008      	b.n	800aa92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa80:	f7ff fb8e 	bl	800a1a0 <HAL_GetTick>
 800aa84:	4602      	mov	r2, r0
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	1ad3      	subs	r3, r2, r3
 800aa8a:	2b64      	cmp	r3, #100	; 0x64
 800aa8c:	d901      	bls.n	800aa92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	e2ae      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aa92:	4b92      	ldr	r3, [pc, #584]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d0f0      	beq.n	800aa80 <HAL_RCC_OscConfig+0x2a8>
 800aa9e:	e014      	b.n	800aaca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaa0:	f7ff fb7e 	bl	800a1a0 <HAL_GetTick>
 800aaa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800aaa6:	e008      	b.n	800aaba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aaa8:	f7ff fb7a 	bl	800a1a0 <HAL_GetTick>
 800aaac:	4602      	mov	r2, r0
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	1ad3      	subs	r3, r2, r3
 800aab2:	2b64      	cmp	r3, #100	; 0x64
 800aab4:	d901      	bls.n	800aaba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800aab6:	2303      	movs	r3, #3
 800aab8:	e29a      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800aaba:	4b88      	ldr	r3, [pc, #544]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1f0      	bne.n	800aaa8 <HAL_RCC_OscConfig+0x2d0>
 800aac6:	e000      	b.n	800aaca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f003 0302 	and.w	r3, r3, #2
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d060      	beq.n	800ab98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	2b04      	cmp	r3, #4
 800aada:	d005      	beq.n	800aae8 <HAL_RCC_OscConfig+0x310>
 800aadc:	69bb      	ldr	r3, [r7, #24]
 800aade:	2b0c      	cmp	r3, #12
 800aae0:	d119      	bne.n	800ab16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	d116      	bne.n	800ab16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aae8:	4b7c      	ldr	r3, [pc, #496]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d005      	beq.n	800ab00 <HAL_RCC_OscConfig+0x328>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	68db      	ldr	r3, [r3, #12]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d101      	bne.n	800ab00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800aafc:	2301      	movs	r3, #1
 800aafe:	e277      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab00:	4b76      	ldr	r3, [pc, #472]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	061b      	lsls	r3, r3, #24
 800ab0e:	4973      	ldr	r1, [pc, #460]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800ab10:	4313      	orrs	r3, r2
 800ab12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab14:	e040      	b.n	800ab98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d023      	beq.n	800ab66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ab1e:	4b6f      	ldr	r3, [pc, #444]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a6e      	ldr	r2, [pc, #440]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800ab24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab2a:	f7ff fb39 	bl	800a1a0 <HAL_GetTick>
 800ab2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ab30:	e008      	b.n	800ab44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab32:	f7ff fb35 	bl	800a1a0 <HAL_GetTick>
 800ab36:	4602      	mov	r2, r0
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	1ad3      	subs	r3, r2, r3
 800ab3c:	2b02      	cmp	r3, #2
 800ab3e:	d901      	bls.n	800ab44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800ab40:	2303      	movs	r3, #3
 800ab42:	e255      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ab44:	4b65      	ldr	r3, [pc, #404]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d0f0      	beq.n	800ab32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab50:	4b62      	ldr	r3, [pc, #392]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	691b      	ldr	r3, [r3, #16]
 800ab5c:	061b      	lsls	r3, r3, #24
 800ab5e:	495f      	ldr	r1, [pc, #380]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800ab60:	4313      	orrs	r3, r2
 800ab62:	604b      	str	r3, [r1, #4]
 800ab64:	e018      	b.n	800ab98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ab66:	4b5d      	ldr	r3, [pc, #372]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a5c      	ldr	r2, [pc, #368]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800ab6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab72:	f7ff fb15 	bl	800a1a0 <HAL_GetTick>
 800ab76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ab78:	e008      	b.n	800ab8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab7a:	f7ff fb11 	bl	800a1a0 <HAL_GetTick>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	1ad3      	subs	r3, r2, r3
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	d901      	bls.n	800ab8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800ab88:	2303      	movs	r3, #3
 800ab8a:	e231      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ab8c:	4b53      	ldr	r3, [pc, #332]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1f0      	bne.n	800ab7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f003 0308 	and.w	r3, r3, #8
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d03c      	beq.n	800ac1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	695b      	ldr	r3, [r3, #20]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d01c      	beq.n	800abe6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800abac:	4b4b      	ldr	r3, [pc, #300]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800abae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abb2:	4a4a      	ldr	r2, [pc, #296]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800abb4:	f043 0301 	orr.w	r3, r3, #1
 800abb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abbc:	f7ff faf0 	bl	800a1a0 <HAL_GetTick>
 800abc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800abc2:	e008      	b.n	800abd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800abc4:	f7ff faec 	bl	800a1a0 <HAL_GetTick>
 800abc8:	4602      	mov	r2, r0
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	1ad3      	subs	r3, r2, r3
 800abce:	2b02      	cmp	r3, #2
 800abd0:	d901      	bls.n	800abd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800abd2:	2303      	movs	r3, #3
 800abd4:	e20c      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800abd6:	4b41      	ldr	r3, [pc, #260]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800abd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abdc:	f003 0302 	and.w	r3, r3, #2
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d0ef      	beq.n	800abc4 <HAL_RCC_OscConfig+0x3ec>
 800abe4:	e01b      	b.n	800ac1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800abe6:	4b3d      	ldr	r3, [pc, #244]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800abe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abec:	4a3b      	ldr	r2, [pc, #236]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800abee:	f023 0301 	bic.w	r3, r3, #1
 800abf2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abf6:	f7ff fad3 	bl	800a1a0 <HAL_GetTick>
 800abfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800abfc:	e008      	b.n	800ac10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800abfe:	f7ff facf 	bl	800a1a0 <HAL_GetTick>
 800ac02:	4602      	mov	r2, r0
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	1ad3      	subs	r3, r2, r3
 800ac08:	2b02      	cmp	r3, #2
 800ac0a:	d901      	bls.n	800ac10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800ac0c:	2303      	movs	r3, #3
 800ac0e:	e1ef      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ac10:	4b32      	ldr	r3, [pc, #200]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800ac12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac16:	f003 0302 	and.w	r3, r3, #2
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1ef      	bne.n	800abfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f003 0304 	and.w	r3, r3, #4
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	f000 80a6 	beq.w	800ad78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800ac30:	4b2a      	ldr	r3, [pc, #168]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800ac32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10d      	bne.n	800ac58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac3c:	4b27      	ldr	r3, [pc, #156]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800ac3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac40:	4a26      	ldr	r2, [pc, #152]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800ac42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac46:	6593      	str	r3, [r2, #88]	; 0x58
 800ac48:	4b24      	ldr	r3, [pc, #144]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800ac4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac50:	60bb      	str	r3, [r7, #8]
 800ac52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ac54:	2301      	movs	r3, #1
 800ac56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac58:	4b21      	ldr	r3, [pc, #132]	; (800ace0 <HAL_RCC_OscConfig+0x508>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d118      	bne.n	800ac96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ac64:	4b1e      	ldr	r3, [pc, #120]	; (800ace0 <HAL_RCC_OscConfig+0x508>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a1d      	ldr	r2, [pc, #116]	; (800ace0 <HAL_RCC_OscConfig+0x508>)
 800ac6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ac70:	f7ff fa96 	bl	800a1a0 <HAL_GetTick>
 800ac74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac76:	e008      	b.n	800ac8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac78:	f7ff fa92 	bl	800a1a0 <HAL_GetTick>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	1ad3      	subs	r3, r2, r3
 800ac82:	2b02      	cmp	r3, #2
 800ac84:	d901      	bls.n	800ac8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800ac86:	2303      	movs	r3, #3
 800ac88:	e1b2      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ac8a:	4b15      	ldr	r3, [pc, #84]	; (800ace0 <HAL_RCC_OscConfig+0x508>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d0f0      	beq.n	800ac78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d108      	bne.n	800acb0 <HAL_RCC_OscConfig+0x4d8>
 800ac9e:	4b0f      	ldr	r3, [pc, #60]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800aca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aca4:	4a0d      	ldr	r2, [pc, #52]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800aca6:	f043 0301 	orr.w	r3, r3, #1
 800acaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800acae:	e029      	b.n	800ad04 <HAL_RCC_OscConfig+0x52c>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	2b05      	cmp	r3, #5
 800acb6:	d115      	bne.n	800ace4 <HAL_RCC_OscConfig+0x50c>
 800acb8:	4b08      	ldr	r3, [pc, #32]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800acba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acbe:	4a07      	ldr	r2, [pc, #28]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800acc0:	f043 0304 	orr.w	r3, r3, #4
 800acc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800acc8:	4b04      	ldr	r3, [pc, #16]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800acca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acce:	4a03      	ldr	r2, [pc, #12]	; (800acdc <HAL_RCC_OscConfig+0x504>)
 800acd0:	f043 0301 	orr.w	r3, r3, #1
 800acd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800acd8:	e014      	b.n	800ad04 <HAL_RCC_OscConfig+0x52c>
 800acda:	bf00      	nop
 800acdc:	40021000 	.word	0x40021000
 800ace0:	40007000 	.word	0x40007000
 800ace4:	4b9a      	ldr	r3, [pc, #616]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800ace6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acea:	4a99      	ldr	r2, [pc, #612]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800acec:	f023 0301 	bic.w	r3, r3, #1
 800acf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800acf4:	4b96      	ldr	r3, [pc, #600]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800acf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acfa:	4a95      	ldr	r2, [pc, #596]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800acfc:	f023 0304 	bic.w	r3, r3, #4
 800ad00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	689b      	ldr	r3, [r3, #8]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d016      	beq.n	800ad3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad0c:	f7ff fa48 	bl	800a1a0 <HAL_GetTick>
 800ad10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ad12:	e00a      	b.n	800ad2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad14:	f7ff fa44 	bl	800a1a0 <HAL_GetTick>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	1ad3      	subs	r3, r2, r3
 800ad1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d901      	bls.n	800ad2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800ad26:	2303      	movs	r3, #3
 800ad28:	e162      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ad2a:	4b89      	ldr	r3, [pc, #548]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800ad2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad30:	f003 0302 	and.w	r3, r3, #2
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d0ed      	beq.n	800ad14 <HAL_RCC_OscConfig+0x53c>
 800ad38:	e015      	b.n	800ad66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad3a:	f7ff fa31 	bl	800a1a0 <HAL_GetTick>
 800ad3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ad40:	e00a      	b.n	800ad58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad42:	f7ff fa2d 	bl	800a1a0 <HAL_GetTick>
 800ad46:	4602      	mov	r2, r0
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	1ad3      	subs	r3, r2, r3
 800ad4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d901      	bls.n	800ad58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800ad54:	2303      	movs	r3, #3
 800ad56:	e14b      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ad58:	4b7d      	ldr	r3, [pc, #500]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800ad5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad5e:	f003 0302 	and.w	r3, r3, #2
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1ed      	bne.n	800ad42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ad66:	7ffb      	ldrb	r3, [r7, #31]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d105      	bne.n	800ad78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad6c:	4b78      	ldr	r3, [pc, #480]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800ad6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad70:	4a77      	ldr	r2, [pc, #476]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800ad72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad76:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 0320 	and.w	r3, r3, #32
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d03c      	beq.n	800adfe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d01c      	beq.n	800adc6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ad8c:	4b70      	ldr	r3, [pc, #448]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800ad8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ad92:	4a6f      	ldr	r2, [pc, #444]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800ad94:	f043 0301 	orr.w	r3, r3, #1
 800ad98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad9c:	f7ff fa00 	bl	800a1a0 <HAL_GetTick>
 800ada0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ada2:	e008      	b.n	800adb6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ada4:	f7ff f9fc 	bl	800a1a0 <HAL_GetTick>
 800ada8:	4602      	mov	r2, r0
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	1ad3      	subs	r3, r2, r3
 800adae:	2b02      	cmp	r3, #2
 800adb0:	d901      	bls.n	800adb6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800adb2:	2303      	movs	r3, #3
 800adb4:	e11c      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800adb6:	4b66      	ldr	r3, [pc, #408]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800adb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800adbc:	f003 0302 	and.w	r3, r3, #2
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d0ef      	beq.n	800ada4 <HAL_RCC_OscConfig+0x5cc>
 800adc4:	e01b      	b.n	800adfe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800adc6:	4b62      	ldr	r3, [pc, #392]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800adc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800adcc:	4a60      	ldr	r2, [pc, #384]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800adce:	f023 0301 	bic.w	r3, r3, #1
 800add2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800add6:	f7ff f9e3 	bl	800a1a0 <HAL_GetTick>
 800adda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800addc:	e008      	b.n	800adf0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800adde:	f7ff f9df 	bl	800a1a0 <HAL_GetTick>
 800ade2:	4602      	mov	r2, r0
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	1ad3      	subs	r3, r2, r3
 800ade8:	2b02      	cmp	r3, #2
 800adea:	d901      	bls.n	800adf0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800adec:	2303      	movs	r3, #3
 800adee:	e0ff      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800adf0:	4b57      	ldr	r3, [pc, #348]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800adf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800adf6:	f003 0302 	and.w	r3, r3, #2
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d1ef      	bne.n	800adde <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	f000 80f3 	beq.w	800afee <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae0c:	2b02      	cmp	r3, #2
 800ae0e:	f040 80c9 	bne.w	800afa4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800ae12:	4b4f      	ldr	r3, [pc, #316]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800ae14:	68db      	ldr	r3, [r3, #12]
 800ae16:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	f003 0203 	and.w	r2, r3, #3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d12c      	bne.n	800ae80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae30:	3b01      	subs	r3, #1
 800ae32:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d123      	bne.n	800ae80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae42:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d11b      	bne.n	800ae80 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae52:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d113      	bne.n	800ae80 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae62:	085b      	lsrs	r3, r3, #1
 800ae64:	3b01      	subs	r3, #1
 800ae66:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d109      	bne.n	800ae80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae76:	085b      	lsrs	r3, r3, #1
 800ae78:	3b01      	subs	r3, #1
 800ae7a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d06b      	beq.n	800af58 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ae80:	69bb      	ldr	r3, [r7, #24]
 800ae82:	2b0c      	cmp	r3, #12
 800ae84:	d062      	beq.n	800af4c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ae86:	4b32      	ldr	r3, [pc, #200]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d001      	beq.n	800ae96 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800ae92:	2301      	movs	r3, #1
 800ae94:	e0ac      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ae96:	4b2e      	ldr	r3, [pc, #184]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a2d      	ldr	r2, [pc, #180]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800ae9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aea0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800aea2:	f7ff f97d 	bl	800a1a0 <HAL_GetTick>
 800aea6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aea8:	e008      	b.n	800aebc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aeaa:	f7ff f979 	bl	800a1a0 <HAL_GetTick>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d901      	bls.n	800aebc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800aeb8:	2303      	movs	r3, #3
 800aeba:	e099      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800aebc:	4b24      	ldr	r3, [pc, #144]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d1f0      	bne.n	800aeaa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aec8:	4b21      	ldr	r3, [pc, #132]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800aeca:	68da      	ldr	r2, [r3, #12]
 800aecc:	4b21      	ldr	r3, [pc, #132]	; (800af54 <HAL_RCC_OscConfig+0x77c>)
 800aece:	4013      	ands	r3, r2
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800aed8:	3a01      	subs	r2, #1
 800aeda:	0112      	lsls	r2, r2, #4
 800aedc:	4311      	orrs	r1, r2
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aee2:	0212      	lsls	r2, r2, #8
 800aee4:	4311      	orrs	r1, r2
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800aeea:	0852      	lsrs	r2, r2, #1
 800aeec:	3a01      	subs	r2, #1
 800aeee:	0552      	lsls	r2, r2, #21
 800aef0:	4311      	orrs	r1, r2
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800aef6:	0852      	lsrs	r2, r2, #1
 800aef8:	3a01      	subs	r2, #1
 800aefa:	0652      	lsls	r2, r2, #25
 800aefc:	4311      	orrs	r1, r2
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800af02:	06d2      	lsls	r2, r2, #27
 800af04:	430a      	orrs	r2, r1
 800af06:	4912      	ldr	r1, [pc, #72]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800af08:	4313      	orrs	r3, r2
 800af0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800af0c:	4b10      	ldr	r3, [pc, #64]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a0f      	ldr	r2, [pc, #60]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800af12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800af18:	4b0d      	ldr	r3, [pc, #52]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	4a0c      	ldr	r2, [pc, #48]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800af1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800af24:	f7ff f93c 	bl	800a1a0 <HAL_GetTick>
 800af28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800af2a:	e008      	b.n	800af3e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af2c:	f7ff f938 	bl	800a1a0 <HAL_GetTick>
 800af30:	4602      	mov	r2, r0
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	1ad3      	subs	r3, r2, r3
 800af36:	2b02      	cmp	r3, #2
 800af38:	d901      	bls.n	800af3e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800af3a:	2303      	movs	r3, #3
 800af3c:	e058      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800af3e:	4b04      	ldr	r3, [pc, #16]	; (800af50 <HAL_RCC_OscConfig+0x778>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af46:	2b00      	cmp	r3, #0
 800af48:	d0f0      	beq.n	800af2c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800af4a:	e050      	b.n	800afee <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800af4c:	2301      	movs	r3, #1
 800af4e:	e04f      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
 800af50:	40021000 	.word	0x40021000
 800af54:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800af58:	4b27      	ldr	r3, [pc, #156]	; (800aff8 <HAL_RCC_OscConfig+0x820>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af60:	2b00      	cmp	r3, #0
 800af62:	d144      	bne.n	800afee <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800af64:	4b24      	ldr	r3, [pc, #144]	; (800aff8 <HAL_RCC_OscConfig+0x820>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a23      	ldr	r2, [pc, #140]	; (800aff8 <HAL_RCC_OscConfig+0x820>)
 800af6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800af70:	4b21      	ldr	r3, [pc, #132]	; (800aff8 <HAL_RCC_OscConfig+0x820>)
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	4a20      	ldr	r2, [pc, #128]	; (800aff8 <HAL_RCC_OscConfig+0x820>)
 800af76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800af7c:	f7ff f910 	bl	800a1a0 <HAL_GetTick>
 800af80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800af82:	e008      	b.n	800af96 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af84:	f7ff f90c 	bl	800a1a0 <HAL_GetTick>
 800af88:	4602      	mov	r2, r0
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	1ad3      	subs	r3, r2, r3
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d901      	bls.n	800af96 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800af92:	2303      	movs	r3, #3
 800af94:	e02c      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800af96:	4b18      	ldr	r3, [pc, #96]	; (800aff8 <HAL_RCC_OscConfig+0x820>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d0f0      	beq.n	800af84 <HAL_RCC_OscConfig+0x7ac>
 800afa2:	e024      	b.n	800afee <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	2b0c      	cmp	r3, #12
 800afa8:	d01f      	beq.n	800afea <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afaa:	4b13      	ldr	r3, [pc, #76]	; (800aff8 <HAL_RCC_OscConfig+0x820>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a12      	ldr	r2, [pc, #72]	; (800aff8 <HAL_RCC_OscConfig+0x820>)
 800afb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800afb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afb6:	f7ff f8f3 	bl	800a1a0 <HAL_GetTick>
 800afba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800afbc:	e008      	b.n	800afd0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afbe:	f7ff f8ef 	bl	800a1a0 <HAL_GetTick>
 800afc2:	4602      	mov	r2, r0
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	1ad3      	subs	r3, r2, r3
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d901      	bls.n	800afd0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800afcc:	2303      	movs	r3, #3
 800afce:	e00f      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800afd0:	4b09      	ldr	r3, [pc, #36]	; (800aff8 <HAL_RCC_OscConfig+0x820>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d1f0      	bne.n	800afbe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800afdc:	4b06      	ldr	r3, [pc, #24]	; (800aff8 <HAL_RCC_OscConfig+0x820>)
 800afde:	68da      	ldr	r2, [r3, #12]
 800afe0:	4905      	ldr	r1, [pc, #20]	; (800aff8 <HAL_RCC_OscConfig+0x820>)
 800afe2:	4b06      	ldr	r3, [pc, #24]	; (800affc <HAL_RCC_OscConfig+0x824>)
 800afe4:	4013      	ands	r3, r2
 800afe6:	60cb      	str	r3, [r1, #12]
 800afe8:	e001      	b.n	800afee <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800afea:	2301      	movs	r3, #1
 800afec:	e000      	b.n	800aff0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800afee:	2300      	movs	r3, #0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3720      	adds	r7, #32
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	40021000 	.word	0x40021000
 800affc:	feeefffc 	.word	0xfeeefffc

0800b000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d101      	bne.n	800b014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	e0e7      	b.n	800b1e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b014:	4b75      	ldr	r3, [pc, #468]	; (800b1ec <HAL_RCC_ClockConfig+0x1ec>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f003 0307 	and.w	r3, r3, #7
 800b01c:	683a      	ldr	r2, [r7, #0]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d910      	bls.n	800b044 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b022:	4b72      	ldr	r3, [pc, #456]	; (800b1ec <HAL_RCC_ClockConfig+0x1ec>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f023 0207 	bic.w	r2, r3, #7
 800b02a:	4970      	ldr	r1, [pc, #448]	; (800b1ec <HAL_RCC_ClockConfig+0x1ec>)
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	4313      	orrs	r3, r2
 800b030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b032:	4b6e      	ldr	r3, [pc, #440]	; (800b1ec <HAL_RCC_ClockConfig+0x1ec>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f003 0307 	and.w	r3, r3, #7
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d001      	beq.n	800b044 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b040:	2301      	movs	r3, #1
 800b042:	e0cf      	b.n	800b1e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f003 0302 	and.w	r3, r3, #2
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d010      	beq.n	800b072 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	689a      	ldr	r2, [r3, #8]
 800b054:	4b66      	ldr	r3, [pc, #408]	; (800b1f0 <HAL_RCC_ClockConfig+0x1f0>)
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d908      	bls.n	800b072 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b060:	4b63      	ldr	r3, [pc, #396]	; (800b1f0 <HAL_RCC_ClockConfig+0x1f0>)
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	4960      	ldr	r1, [pc, #384]	; (800b1f0 <HAL_RCC_ClockConfig+0x1f0>)
 800b06e:	4313      	orrs	r3, r2
 800b070:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f003 0301 	and.w	r3, r3, #1
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d04c      	beq.n	800b118 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	2b03      	cmp	r3, #3
 800b084:	d107      	bne.n	800b096 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b086:	4b5a      	ldr	r3, [pc, #360]	; (800b1f0 <HAL_RCC_ClockConfig+0x1f0>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d121      	bne.n	800b0d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800b092:	2301      	movs	r3, #1
 800b094:	e0a6      	b.n	800b1e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	d107      	bne.n	800b0ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b09e:	4b54      	ldr	r3, [pc, #336]	; (800b1f0 <HAL_RCC_ClockConfig+0x1f0>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d115      	bne.n	800b0d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e09a      	b.n	800b1e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d107      	bne.n	800b0c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b0b6:	4b4e      	ldr	r3, [pc, #312]	; (800b1f0 <HAL_RCC_ClockConfig+0x1f0>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f003 0302 	and.w	r3, r3, #2
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d109      	bne.n	800b0d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e08e      	b.n	800b1e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b0c6:	4b4a      	ldr	r3, [pc, #296]	; (800b1f0 <HAL_RCC_ClockConfig+0x1f0>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d101      	bne.n	800b0d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e086      	b.n	800b1e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b0d6:	4b46      	ldr	r3, [pc, #280]	; (800b1f0 <HAL_RCC_ClockConfig+0x1f0>)
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	f023 0203 	bic.w	r2, r3, #3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	4943      	ldr	r1, [pc, #268]	; (800b1f0 <HAL_RCC_ClockConfig+0x1f0>)
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0e8:	f7ff f85a 	bl	800a1a0 <HAL_GetTick>
 800b0ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0ee:	e00a      	b.n	800b106 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b0f0:	f7ff f856 	bl	800a1a0 <HAL_GetTick>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d901      	bls.n	800b106 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800b102:	2303      	movs	r3, #3
 800b104:	e06e      	b.n	800b1e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b106:	4b3a      	ldr	r3, [pc, #232]	; (800b1f0 <HAL_RCC_ClockConfig+0x1f0>)
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	f003 020c 	and.w	r2, r3, #12
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	429a      	cmp	r2, r3
 800b116:	d1eb      	bne.n	800b0f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f003 0302 	and.w	r3, r3, #2
 800b120:	2b00      	cmp	r3, #0
 800b122:	d010      	beq.n	800b146 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	689a      	ldr	r2, [r3, #8]
 800b128:	4b31      	ldr	r3, [pc, #196]	; (800b1f0 <HAL_RCC_ClockConfig+0x1f0>)
 800b12a:	689b      	ldr	r3, [r3, #8]
 800b12c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b130:	429a      	cmp	r2, r3
 800b132:	d208      	bcs.n	800b146 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b134:	4b2e      	ldr	r3, [pc, #184]	; (800b1f0 <HAL_RCC_ClockConfig+0x1f0>)
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	492b      	ldr	r1, [pc, #172]	; (800b1f0 <HAL_RCC_ClockConfig+0x1f0>)
 800b142:	4313      	orrs	r3, r2
 800b144:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b146:	4b29      	ldr	r3, [pc, #164]	; (800b1ec <HAL_RCC_ClockConfig+0x1ec>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f003 0307 	and.w	r3, r3, #7
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	429a      	cmp	r2, r3
 800b152:	d210      	bcs.n	800b176 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b154:	4b25      	ldr	r3, [pc, #148]	; (800b1ec <HAL_RCC_ClockConfig+0x1ec>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f023 0207 	bic.w	r2, r3, #7
 800b15c:	4923      	ldr	r1, [pc, #140]	; (800b1ec <HAL_RCC_ClockConfig+0x1ec>)
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	4313      	orrs	r3, r2
 800b162:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b164:	4b21      	ldr	r3, [pc, #132]	; (800b1ec <HAL_RCC_ClockConfig+0x1ec>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f003 0307 	and.w	r3, r3, #7
 800b16c:	683a      	ldr	r2, [r7, #0]
 800b16e:	429a      	cmp	r2, r3
 800b170:	d001      	beq.n	800b176 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800b172:	2301      	movs	r3, #1
 800b174:	e036      	b.n	800b1e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f003 0304 	and.w	r3, r3, #4
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d008      	beq.n	800b194 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b182:	4b1b      	ldr	r3, [pc, #108]	; (800b1f0 <HAL_RCC_ClockConfig+0x1f0>)
 800b184:	689b      	ldr	r3, [r3, #8]
 800b186:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	4918      	ldr	r1, [pc, #96]	; (800b1f0 <HAL_RCC_ClockConfig+0x1f0>)
 800b190:	4313      	orrs	r3, r2
 800b192:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f003 0308 	and.w	r3, r3, #8
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d009      	beq.n	800b1b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b1a0:	4b13      	ldr	r3, [pc, #76]	; (800b1f0 <HAL_RCC_ClockConfig+0x1f0>)
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	691b      	ldr	r3, [r3, #16]
 800b1ac:	00db      	lsls	r3, r3, #3
 800b1ae:	4910      	ldr	r1, [pc, #64]	; (800b1f0 <HAL_RCC_ClockConfig+0x1f0>)
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b1b4:	f000 f824 	bl	800b200 <HAL_RCC_GetSysClockFreq>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	4b0d      	ldr	r3, [pc, #52]	; (800b1f0 <HAL_RCC_ClockConfig+0x1f0>)
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	091b      	lsrs	r3, r3, #4
 800b1c0:	f003 030f 	and.w	r3, r3, #15
 800b1c4:	490b      	ldr	r1, [pc, #44]	; (800b1f4 <HAL_RCC_ClockConfig+0x1f4>)
 800b1c6:	5ccb      	ldrb	r3, [r1, r3]
 800b1c8:	f003 031f 	and.w	r3, r3, #31
 800b1cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b1d0:	4a09      	ldr	r2, [pc, #36]	; (800b1f8 <HAL_RCC_ClockConfig+0x1f8>)
 800b1d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b1d4:	4b09      	ldr	r3, [pc, #36]	; (800b1fc <HAL_RCC_ClockConfig+0x1fc>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7fe ff91 	bl	800a100 <HAL_InitTick>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	72fb      	strb	r3, [r7, #11]

  return status;
 800b1e2:	7afb      	ldrb	r3, [r7, #11]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	40022000 	.word	0x40022000
 800b1f0:	40021000 	.word	0x40021000
 800b1f4:	0800f218 	.word	0x0800f218
 800b1f8:	20000000 	.word	0x20000000
 800b1fc:	20000004 	.word	0x20000004

0800b200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b200:	b480      	push	{r7}
 800b202:	b089      	sub	sp, #36	; 0x24
 800b204:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b206:	2300      	movs	r3, #0
 800b208:	61fb      	str	r3, [r7, #28]
 800b20a:	2300      	movs	r3, #0
 800b20c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b20e:	4b3e      	ldr	r3, [pc, #248]	; (800b308 <HAL_RCC_GetSysClockFreq+0x108>)
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	f003 030c 	and.w	r3, r3, #12
 800b216:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b218:	4b3b      	ldr	r3, [pc, #236]	; (800b308 <HAL_RCC_GetSysClockFreq+0x108>)
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	f003 0303 	and.w	r3, r3, #3
 800b220:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d005      	beq.n	800b234 <HAL_RCC_GetSysClockFreq+0x34>
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	2b0c      	cmp	r3, #12
 800b22c:	d121      	bne.n	800b272 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2b01      	cmp	r3, #1
 800b232:	d11e      	bne.n	800b272 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b234:	4b34      	ldr	r3, [pc, #208]	; (800b308 <HAL_RCC_GetSysClockFreq+0x108>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f003 0308 	and.w	r3, r3, #8
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d107      	bne.n	800b250 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b240:	4b31      	ldr	r3, [pc, #196]	; (800b308 <HAL_RCC_GetSysClockFreq+0x108>)
 800b242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b246:	0a1b      	lsrs	r3, r3, #8
 800b248:	f003 030f 	and.w	r3, r3, #15
 800b24c:	61fb      	str	r3, [r7, #28]
 800b24e:	e005      	b.n	800b25c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b250:	4b2d      	ldr	r3, [pc, #180]	; (800b308 <HAL_RCC_GetSysClockFreq+0x108>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	091b      	lsrs	r3, r3, #4
 800b256:	f003 030f 	and.w	r3, r3, #15
 800b25a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b25c:	4a2b      	ldr	r2, [pc, #172]	; (800b30c <HAL_RCC_GetSysClockFreq+0x10c>)
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b264:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d10d      	bne.n	800b288 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b270:	e00a      	b.n	800b288 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	2b04      	cmp	r3, #4
 800b276:	d102      	bne.n	800b27e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b278:	4b25      	ldr	r3, [pc, #148]	; (800b310 <HAL_RCC_GetSysClockFreq+0x110>)
 800b27a:	61bb      	str	r3, [r7, #24]
 800b27c:	e004      	b.n	800b288 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	2b08      	cmp	r3, #8
 800b282:	d101      	bne.n	800b288 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b284:	4b23      	ldr	r3, [pc, #140]	; (800b314 <HAL_RCC_GetSysClockFreq+0x114>)
 800b286:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	2b0c      	cmp	r3, #12
 800b28c:	d134      	bne.n	800b2f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b28e:	4b1e      	ldr	r3, [pc, #120]	; (800b308 <HAL_RCC_GetSysClockFreq+0x108>)
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	f003 0303 	and.w	r3, r3, #3
 800b296:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	2b02      	cmp	r3, #2
 800b29c:	d003      	beq.n	800b2a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	2b03      	cmp	r3, #3
 800b2a2:	d003      	beq.n	800b2ac <HAL_RCC_GetSysClockFreq+0xac>
 800b2a4:	e005      	b.n	800b2b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b2a6:	4b1a      	ldr	r3, [pc, #104]	; (800b310 <HAL_RCC_GetSysClockFreq+0x110>)
 800b2a8:	617b      	str	r3, [r7, #20]
      break;
 800b2aa:	e005      	b.n	800b2b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b2ac:	4b19      	ldr	r3, [pc, #100]	; (800b314 <HAL_RCC_GetSysClockFreq+0x114>)
 800b2ae:	617b      	str	r3, [r7, #20]
      break;
 800b2b0:	e002      	b.n	800b2b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	617b      	str	r3, [r7, #20]
      break;
 800b2b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b2b8:	4b13      	ldr	r3, [pc, #76]	; (800b308 <HAL_RCC_GetSysClockFreq+0x108>)
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	091b      	lsrs	r3, r3, #4
 800b2be:	f003 0307 	and.w	r3, r3, #7
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b2c6:	4b10      	ldr	r3, [pc, #64]	; (800b308 <HAL_RCC_GetSysClockFreq+0x108>)
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	0a1b      	lsrs	r3, r3, #8
 800b2cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2d0:	697a      	ldr	r2, [r7, #20]
 800b2d2:	fb03 f202 	mul.w	r2, r3, r2
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b2de:	4b0a      	ldr	r3, [pc, #40]	; (800b308 <HAL_RCC_GetSysClockFreq+0x108>)
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	0e5b      	lsrs	r3, r3, #25
 800b2e4:	f003 0303 	and.w	r3, r3, #3
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	005b      	lsls	r3, r3, #1
 800b2ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b2ee:	697a      	ldr	r2, [r7, #20]
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b2f8:	69bb      	ldr	r3, [r7, #24]
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3724      	adds	r7, #36	; 0x24
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	40021000 	.word	0x40021000
 800b30c:	0800f230 	.word	0x0800f230
 800b310:	00f42400 	.word	0x00f42400
 800b314:	007a1200 	.word	0x007a1200

0800b318 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b318:	b480      	push	{r7}
 800b31a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b31c:	4b03      	ldr	r3, [pc, #12]	; (800b32c <HAL_RCC_GetHCLKFreq+0x14>)
 800b31e:	681b      	ldr	r3, [r3, #0]
}
 800b320:	4618      	mov	r0, r3
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop
 800b32c:	20000000 	.word	0x20000000

0800b330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b334:	f7ff fff0 	bl	800b318 <HAL_RCC_GetHCLKFreq>
 800b338:	4602      	mov	r2, r0
 800b33a:	4b06      	ldr	r3, [pc, #24]	; (800b354 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	0a1b      	lsrs	r3, r3, #8
 800b340:	f003 0307 	and.w	r3, r3, #7
 800b344:	4904      	ldr	r1, [pc, #16]	; (800b358 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b346:	5ccb      	ldrb	r3, [r1, r3]
 800b348:	f003 031f 	and.w	r3, r3, #31
 800b34c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b350:	4618      	mov	r0, r3
 800b352:	bd80      	pop	{r7, pc}
 800b354:	40021000 	.word	0x40021000
 800b358:	0800f228 	.word	0x0800f228

0800b35c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b360:	f7ff ffda 	bl	800b318 <HAL_RCC_GetHCLKFreq>
 800b364:	4602      	mov	r2, r0
 800b366:	4b06      	ldr	r3, [pc, #24]	; (800b380 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	0adb      	lsrs	r3, r3, #11
 800b36c:	f003 0307 	and.w	r3, r3, #7
 800b370:	4904      	ldr	r1, [pc, #16]	; (800b384 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b372:	5ccb      	ldrb	r3, [r1, r3]
 800b374:	f003 031f 	and.w	r3, r3, #31
 800b378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	bd80      	pop	{r7, pc}
 800b380:	40021000 	.word	0x40021000
 800b384:	0800f228 	.word	0x0800f228

0800b388 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b086      	sub	sp, #24
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b390:	2300      	movs	r3, #0
 800b392:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b394:	4b2a      	ldr	r3, [pc, #168]	; (800b440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d003      	beq.n	800b3a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b3a0:	f7ff f9b6 	bl	800a710 <HAL_PWREx_GetVoltageRange>
 800b3a4:	6178      	str	r0, [r7, #20]
 800b3a6:	e014      	b.n	800b3d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b3a8:	4b25      	ldr	r3, [pc, #148]	; (800b440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b3aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3ac:	4a24      	ldr	r2, [pc, #144]	; (800b440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b3ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3b2:	6593      	str	r3, [r2, #88]	; 0x58
 800b3b4:	4b22      	ldr	r3, [pc, #136]	; (800b440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b3b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3bc:	60fb      	str	r3, [r7, #12]
 800b3be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b3c0:	f7ff f9a6 	bl	800a710 <HAL_PWREx_GetVoltageRange>
 800b3c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b3c6:	4b1e      	ldr	r3, [pc, #120]	; (800b440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b3c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3ca:	4a1d      	ldr	r2, [pc, #116]	; (800b440 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b3cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3d8:	d10b      	bne.n	800b3f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2b80      	cmp	r3, #128	; 0x80
 800b3de:	d919      	bls.n	800b414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2ba0      	cmp	r3, #160	; 0xa0
 800b3e4:	d902      	bls.n	800b3ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b3e6:	2302      	movs	r3, #2
 800b3e8:	613b      	str	r3, [r7, #16]
 800b3ea:	e013      	b.n	800b414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	613b      	str	r3, [r7, #16]
 800b3f0:	e010      	b.n	800b414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2b80      	cmp	r3, #128	; 0x80
 800b3f6:	d902      	bls.n	800b3fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b3f8:	2303      	movs	r3, #3
 800b3fa:	613b      	str	r3, [r7, #16]
 800b3fc:	e00a      	b.n	800b414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2b80      	cmp	r3, #128	; 0x80
 800b402:	d102      	bne.n	800b40a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b404:	2302      	movs	r3, #2
 800b406:	613b      	str	r3, [r7, #16]
 800b408:	e004      	b.n	800b414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2b70      	cmp	r3, #112	; 0x70
 800b40e:	d101      	bne.n	800b414 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b410:	2301      	movs	r3, #1
 800b412:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b414:	4b0b      	ldr	r3, [pc, #44]	; (800b444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f023 0207 	bic.w	r2, r3, #7
 800b41c:	4909      	ldr	r1, [pc, #36]	; (800b444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	4313      	orrs	r3, r2
 800b422:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b424:	4b07      	ldr	r3, [pc, #28]	; (800b444 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f003 0307 	and.w	r3, r3, #7
 800b42c:	693a      	ldr	r2, [r7, #16]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d001      	beq.n	800b436 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b432:	2301      	movs	r3, #1
 800b434:	e000      	b.n	800b438 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b436:	2300      	movs	r3, #0
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3718      	adds	r7, #24
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}
 800b440:	40021000 	.word	0x40021000
 800b444:	40022000 	.word	0x40022000

0800b448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b086      	sub	sp, #24
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b450:	2300      	movs	r3, #0
 800b452:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b454:	2300      	movs	r3, #0
 800b456:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b460:	2b00      	cmp	r3, #0
 800b462:	d031      	beq.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b468:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b46c:	d01a      	beq.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800b46e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b472:	d814      	bhi.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b474:	2b00      	cmp	r3, #0
 800b476:	d009      	beq.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b478:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b47c:	d10f      	bne.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800b47e:	4b5d      	ldr	r3, [pc, #372]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b480:	68db      	ldr	r3, [r3, #12]
 800b482:	4a5c      	ldr	r2, [pc, #368]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b488:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b48a:	e00c      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	3304      	adds	r3, #4
 800b490:	2100      	movs	r1, #0
 800b492:	4618      	mov	r0, r3
 800b494:	f000 f9ce 	bl	800b834 <RCCEx_PLLSAI1_Config>
 800b498:	4603      	mov	r3, r0
 800b49a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b49c:	e003      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	74fb      	strb	r3, [r7, #19]
      break;
 800b4a2:	e000      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800b4a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4a6:	7cfb      	ldrb	r3, [r7, #19]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d10b      	bne.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b4ac:	4b51      	ldr	r3, [pc, #324]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b4ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4ba:	494e      	ldr	r1, [pc, #312]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b4c2:	e001      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4c4:	7cfb      	ldrb	r3, [r7, #19]
 800b4c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f000 809e 	beq.w	800b612 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b4da:	4b46      	ldr	r3, [pc, #280]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b4dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d101      	bne.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e000      	b.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00d      	beq.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b4f0:	4b40      	ldr	r3, [pc, #256]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b4f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4f4:	4a3f      	ldr	r2, [pc, #252]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b4f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4fa:	6593      	str	r3, [r2, #88]	; 0x58
 800b4fc:	4b3d      	ldr	r3, [pc, #244]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b4fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b504:	60bb      	str	r3, [r7, #8]
 800b506:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b508:	2301      	movs	r3, #1
 800b50a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b50c:	4b3a      	ldr	r3, [pc, #232]	; (800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a39      	ldr	r2, [pc, #228]	; (800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800b512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b516:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b518:	f7fe fe42 	bl	800a1a0 <HAL_GetTick>
 800b51c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b51e:	e009      	b.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b520:	f7fe fe3e 	bl	800a1a0 <HAL_GetTick>
 800b524:	4602      	mov	r2, r0
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	1ad3      	subs	r3, r2, r3
 800b52a:	2b02      	cmp	r3, #2
 800b52c:	d902      	bls.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800b52e:	2303      	movs	r3, #3
 800b530:	74fb      	strb	r3, [r7, #19]
        break;
 800b532:	e005      	b.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b534:	4b30      	ldr	r3, [pc, #192]	; (800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d0ef      	beq.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800b540:	7cfb      	ldrb	r3, [r7, #19]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d15a      	bne.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b546:	4b2b      	ldr	r3, [pc, #172]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b54c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b550:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d01e      	beq.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b55c:	697a      	ldr	r2, [r7, #20]
 800b55e:	429a      	cmp	r2, r3
 800b560:	d019      	beq.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b562:	4b24      	ldr	r3, [pc, #144]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b56c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b56e:	4b21      	ldr	r3, [pc, #132]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b574:	4a1f      	ldr	r2, [pc, #124]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b57a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b57e:	4b1d      	ldr	r3, [pc, #116]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b584:	4a1b      	ldr	r2, [pc, #108]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b58a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b58e:	4a19      	ldr	r2, [pc, #100]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	f003 0301 	and.w	r3, r3, #1
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d016      	beq.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5a0:	f7fe fdfe 	bl	800a1a0 <HAL_GetTick>
 800b5a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b5a6:	e00b      	b.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b5a8:	f7fe fdfa 	bl	800a1a0 <HAL_GetTick>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	1ad3      	subs	r3, r2, r3
 800b5b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d902      	bls.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800b5ba:	2303      	movs	r3, #3
 800b5bc:	74fb      	strb	r3, [r7, #19]
            break;
 800b5be:	e006      	b.n	800b5ce <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b5c0:	4b0c      	ldr	r3, [pc, #48]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b5c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5c6:	f003 0302 	and.w	r3, r3, #2
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d0ec      	beq.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800b5ce:	7cfb      	ldrb	r3, [r7, #19]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d10b      	bne.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b5d4:	4b07      	ldr	r3, [pc, #28]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b5d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5e2:	4904      	ldr	r1, [pc, #16]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b5ea:	e009      	b.n	800b600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b5ec:	7cfb      	ldrb	r3, [r7, #19]
 800b5ee:	74bb      	strb	r3, [r7, #18]
 800b5f0:	e006      	b.n	800b600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800b5f2:	bf00      	nop
 800b5f4:	40021000 	.word	0x40021000
 800b5f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5fc:	7cfb      	ldrb	r3, [r7, #19]
 800b5fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b600:	7c7b      	ldrb	r3, [r7, #17]
 800b602:	2b01      	cmp	r3, #1
 800b604:	d105      	bne.n	800b612 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b606:	4b8a      	ldr	r3, [pc, #552]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b60a:	4a89      	ldr	r2, [pc, #548]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b60c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b610:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f003 0301 	and.w	r3, r3, #1
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d00a      	beq.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b61e:	4b84      	ldr	r3, [pc, #528]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b624:	f023 0203 	bic.w	r2, r3, #3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6a1b      	ldr	r3, [r3, #32]
 800b62c:	4980      	ldr	r1, [pc, #512]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b62e:	4313      	orrs	r3, r2
 800b630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f003 0302 	and.w	r3, r3, #2
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d00a      	beq.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b640:	4b7b      	ldr	r3, [pc, #492]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b646:	f023 020c 	bic.w	r2, r3, #12
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64e:	4978      	ldr	r1, [pc, #480]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b650:	4313      	orrs	r3, r2
 800b652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f003 0320 	and.w	r3, r3, #32
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d00a      	beq.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b662:	4b73      	ldr	r3, [pc, #460]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b668:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b670:	496f      	ldr	r1, [pc, #444]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b672:	4313      	orrs	r3, r2
 800b674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b680:	2b00      	cmp	r3, #0
 800b682:	d00a      	beq.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b684:	4b6a      	ldr	r3, [pc, #424]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b68a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b692:	4967      	ldr	r1, [pc, #412]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b694:	4313      	orrs	r3, r2
 800b696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d00a      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b6a6:	4b62      	ldr	r3, [pc, #392]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b6a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b4:	495e      	ldr	r1, [pc, #376]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d00a      	beq.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b6c8:	4b59      	ldr	r3, [pc, #356]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b6ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d6:	4956      	ldr	r1, [pc, #344]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00a      	beq.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b6ea:	4b51      	ldr	r3, [pc, #324]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b6ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6f8:	494d      	ldr	r1, [pc, #308]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d028      	beq.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b70c:	4b48      	ldr	r3, [pc, #288]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b70e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b712:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b71a:	4945      	ldr	r1, [pc, #276]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b71c:	4313      	orrs	r3, r2
 800b71e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b72a:	d106      	bne.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b72c:	4b40      	ldr	r3, [pc, #256]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	4a3f      	ldr	r2, [pc, #252]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b736:	60d3      	str	r3, [r2, #12]
 800b738:	e011      	b.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b73e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b742:	d10c      	bne.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	3304      	adds	r3, #4
 800b748:	2101      	movs	r1, #1
 800b74a:	4618      	mov	r0, r3
 800b74c:	f000 f872 	bl	800b834 <RCCEx_PLLSAI1_Config>
 800b750:	4603      	mov	r3, r0
 800b752:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b754:	7cfb      	ldrb	r3, [r7, #19]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d001      	beq.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800b75a:	7cfb      	ldrb	r3, [r7, #19]
 800b75c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b766:	2b00      	cmp	r3, #0
 800b768:	d028      	beq.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b76a:	4b31      	ldr	r3, [pc, #196]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b76c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b770:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b778:	492d      	ldr	r1, [pc, #180]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b77a:	4313      	orrs	r3, r2
 800b77c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b784:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b788:	d106      	bne.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b78a:	4b29      	ldr	r3, [pc, #164]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	4a28      	ldr	r2, [pc, #160]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b790:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b794:	60d3      	str	r3, [r2, #12]
 800b796:	e011      	b.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b79c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b7a0:	d10c      	bne.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	3304      	adds	r3, #4
 800b7a6:	2101      	movs	r1, #1
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f000 f843 	bl	800b834 <RCCEx_PLLSAI1_Config>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b7b2:	7cfb      	ldrb	r3, [r7, #19]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d001      	beq.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800b7b8:	7cfb      	ldrb	r3, [r7, #19]
 800b7ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d01c      	beq.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b7c8:	4b19      	ldr	r3, [pc, #100]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b7ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7d6:	4916      	ldr	r1, [pc, #88]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7e6:	d10c      	bne.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	3304      	adds	r3, #4
 800b7ec:	2102      	movs	r1, #2
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f000 f820 	bl	800b834 <RCCEx_PLLSAI1_Config>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b7f8:	7cfb      	ldrb	r3, [r7, #19]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d001      	beq.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800b7fe:	7cfb      	ldrb	r3, [r7, #19]
 800b800:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d00a      	beq.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b80e:	4b08      	ldr	r3, [pc, #32]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b814:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b81c:	4904      	ldr	r1, [pc, #16]	; (800b830 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b81e:	4313      	orrs	r3, r2
 800b820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b824:	7cbb      	ldrb	r3, [r7, #18]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3718      	adds	r7, #24
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	40021000 	.word	0x40021000

0800b834 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b83e:	2300      	movs	r3, #0
 800b840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b842:	4b74      	ldr	r3, [pc, #464]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b844:	68db      	ldr	r3, [r3, #12]
 800b846:	f003 0303 	and.w	r3, r3, #3
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d018      	beq.n	800b880 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b84e:	4b71      	ldr	r3, [pc, #452]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	f003 0203 	and.w	r2, r3, #3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d10d      	bne.n	800b87a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
       ||
 800b862:	2b00      	cmp	r3, #0
 800b864:	d009      	beq.n	800b87a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b866:	4b6b      	ldr	r3, [pc, #428]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b868:	68db      	ldr	r3, [r3, #12]
 800b86a:	091b      	lsrs	r3, r3, #4
 800b86c:	f003 0307 	and.w	r3, r3, #7
 800b870:	1c5a      	adds	r2, r3, #1
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	685b      	ldr	r3, [r3, #4]
       ||
 800b876:	429a      	cmp	r2, r3
 800b878:	d047      	beq.n	800b90a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b87a:	2301      	movs	r3, #1
 800b87c:	73fb      	strb	r3, [r7, #15]
 800b87e:	e044      	b.n	800b90a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2b03      	cmp	r3, #3
 800b886:	d018      	beq.n	800b8ba <RCCEx_PLLSAI1_Config+0x86>
 800b888:	2b03      	cmp	r3, #3
 800b88a:	d825      	bhi.n	800b8d8 <RCCEx_PLLSAI1_Config+0xa4>
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d002      	beq.n	800b896 <RCCEx_PLLSAI1_Config+0x62>
 800b890:	2b02      	cmp	r3, #2
 800b892:	d009      	beq.n	800b8a8 <RCCEx_PLLSAI1_Config+0x74>
 800b894:	e020      	b.n	800b8d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b896:	4b5f      	ldr	r3, [pc, #380]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f003 0302 	and.w	r3, r3, #2
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d11d      	bne.n	800b8de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b8a6:	e01a      	b.n	800b8de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b8a8:	4b5a      	ldr	r3, [pc, #360]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d116      	bne.n	800b8e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b8b8:	e013      	b.n	800b8e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b8ba:	4b56      	ldr	r3, [pc, #344]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d10f      	bne.n	800b8e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b8c6:	4b53      	ldr	r3, [pc, #332]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d109      	bne.n	800b8e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b8d6:	e006      	b.n	800b8e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	73fb      	strb	r3, [r7, #15]
      break;
 800b8dc:	e004      	b.n	800b8e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b8de:	bf00      	nop
 800b8e0:	e002      	b.n	800b8e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b8e2:	bf00      	nop
 800b8e4:	e000      	b.n	800b8e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b8e6:	bf00      	nop
    }

    if(status == HAL_OK)
 800b8e8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d10d      	bne.n	800b90a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b8ee:	4b49      	ldr	r3, [pc, #292]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6819      	ldr	r1, [r3, #0]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	3b01      	subs	r3, #1
 800b900:	011b      	lsls	r3, r3, #4
 800b902:	430b      	orrs	r3, r1
 800b904:	4943      	ldr	r1, [pc, #268]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b906:	4313      	orrs	r3, r2
 800b908:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b90a:	7bfb      	ldrb	r3, [r7, #15]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d17c      	bne.n	800ba0a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b910:	4b40      	ldr	r3, [pc, #256]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	4a3f      	ldr	r2, [pc, #252]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b916:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b91a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b91c:	f7fe fc40 	bl	800a1a0 <HAL_GetTick>
 800b920:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b922:	e009      	b.n	800b938 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b924:	f7fe fc3c 	bl	800a1a0 <HAL_GetTick>
 800b928:	4602      	mov	r2, r0
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	1ad3      	subs	r3, r2, r3
 800b92e:	2b02      	cmp	r3, #2
 800b930:	d902      	bls.n	800b938 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b932:	2303      	movs	r3, #3
 800b934:	73fb      	strb	r3, [r7, #15]
        break;
 800b936:	e005      	b.n	800b944 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b938:	4b36      	ldr	r3, [pc, #216]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b940:	2b00      	cmp	r3, #0
 800b942:	d1ef      	bne.n	800b924 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b944:	7bfb      	ldrb	r3, [r7, #15]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d15f      	bne.n	800ba0a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d110      	bne.n	800b972 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b950:	4b30      	ldr	r3, [pc, #192]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800b958:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	6892      	ldr	r2, [r2, #8]
 800b960:	0211      	lsls	r1, r2, #8
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	68d2      	ldr	r2, [r2, #12]
 800b966:	06d2      	lsls	r2, r2, #27
 800b968:	430a      	orrs	r2, r1
 800b96a:	492a      	ldr	r1, [pc, #168]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b96c:	4313      	orrs	r3, r2
 800b96e:	610b      	str	r3, [r1, #16]
 800b970:	e027      	b.n	800b9c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	2b01      	cmp	r3, #1
 800b976:	d112      	bne.n	800b99e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b978:	4b26      	ldr	r3, [pc, #152]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b97a:	691b      	ldr	r3, [r3, #16]
 800b97c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800b980:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	6892      	ldr	r2, [r2, #8]
 800b988:	0211      	lsls	r1, r2, #8
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	6912      	ldr	r2, [r2, #16]
 800b98e:	0852      	lsrs	r2, r2, #1
 800b990:	3a01      	subs	r2, #1
 800b992:	0552      	lsls	r2, r2, #21
 800b994:	430a      	orrs	r2, r1
 800b996:	491f      	ldr	r1, [pc, #124]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b998:	4313      	orrs	r3, r2
 800b99a:	610b      	str	r3, [r1, #16]
 800b99c:	e011      	b.n	800b9c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b99e:	4b1d      	ldr	r3, [pc, #116]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b9a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	6892      	ldr	r2, [r2, #8]
 800b9ae:	0211      	lsls	r1, r2, #8
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	6952      	ldr	r2, [r2, #20]
 800b9b4:	0852      	lsrs	r2, r2, #1
 800b9b6:	3a01      	subs	r2, #1
 800b9b8:	0652      	lsls	r2, r2, #25
 800b9ba:	430a      	orrs	r2, r1
 800b9bc:	4915      	ldr	r1, [pc, #84]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b9c2:	4b14      	ldr	r3, [pc, #80]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a13      	ldr	r2, [pc, #76]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b9c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b9cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9ce:	f7fe fbe7 	bl	800a1a0 <HAL_GetTick>
 800b9d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b9d4:	e009      	b.n	800b9ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b9d6:	f7fe fbe3 	bl	800a1a0 <HAL_GetTick>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d902      	bls.n	800b9ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800b9e4:	2303      	movs	r3, #3
 800b9e6:	73fb      	strb	r3, [r7, #15]
          break;
 800b9e8:	e005      	b.n	800b9f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b9ea:	4b0a      	ldr	r3, [pc, #40]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d0ef      	beq.n	800b9d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800b9f6:	7bfb      	ldrb	r3, [r7, #15]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d106      	bne.n	800ba0a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b9fc:	4b05      	ldr	r3, [pc, #20]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800b9fe:	691a      	ldr	r2, [r3, #16]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	699b      	ldr	r3, [r3, #24]
 800ba04:	4903      	ldr	r1, [pc, #12]	; (800ba14 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ba06:	4313      	orrs	r3, r2
 800ba08:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800ba0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3710      	adds	r7, #16
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	40021000 	.word	0x40021000

0800ba18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d101      	bne.n	800ba2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba26:	2301      	movs	r3, #1
 800ba28:	e040      	b.n	800baac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d106      	bne.n	800ba40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f7fe f9be 	bl	8009dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2224      	movs	r2, #36	; 0x24
 800ba44:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	681a      	ldr	r2, [r3, #0]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f022 0201 	bic.w	r2, r2, #1
 800ba54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 f8c0 	bl	800bbdc <UART_SetConfig>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d101      	bne.n	800ba66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ba62:	2301      	movs	r3, #1
 800ba64:	e022      	b.n	800baac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d002      	beq.n	800ba74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 fae0 	bl	800c034 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	685a      	ldr	r2, [r3, #4]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ba82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	689a      	ldr	r2, [r3, #8]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ba92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f042 0201 	orr.w	r2, r2, #1
 800baa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 fb67 	bl	800c178 <UART_CheckIdleState>
 800baaa:	4603      	mov	r3, r0
}
 800baac:	4618      	mov	r0, r3
 800baae:	3708      	adds	r7, #8
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b08a      	sub	sp, #40	; 0x28
 800bab8:	af02      	add	r7, sp, #8
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	603b      	str	r3, [r7, #0]
 800bac0:	4613      	mov	r3, r2
 800bac2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bac8:	2b20      	cmp	r3, #32
 800baca:	f040 8082 	bne.w	800bbd2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d002      	beq.n	800bada <HAL_UART_Transmit+0x26>
 800bad4:	88fb      	ldrh	r3, [r7, #6]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d101      	bne.n	800bade <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bada:	2301      	movs	r3, #1
 800badc:	e07a      	b.n	800bbd4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	d101      	bne.n	800baec <HAL_UART_Transmit+0x38>
 800bae8:	2302      	movs	r3, #2
 800baea:	e073      	b.n	800bbd4 <HAL_UART_Transmit+0x120>
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2221      	movs	r2, #33	; 0x21
 800bb00:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bb02:	f7fe fb4d 	bl	800a1a0 <HAL_GetTick>
 800bb06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	88fa      	ldrh	r2, [r7, #6]
 800bb0c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	88fa      	ldrh	r2, [r7, #6]
 800bb14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb20:	d108      	bne.n	800bb34 <HAL_UART_Transmit+0x80>
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	691b      	ldr	r3, [r3, #16]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d104      	bne.n	800bb34 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	61bb      	str	r3, [r7, #24]
 800bb32:	e003      	b.n	800bb3c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800bb44:	e02d      	b.n	800bba2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	9300      	str	r3, [sp, #0]
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	2180      	movs	r1, #128	; 0x80
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f000 fb5a 	bl	800c20a <UART_WaitOnFlagUntilTimeout>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d001      	beq.n	800bb60 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800bb5c:	2303      	movs	r3, #3
 800bb5e:	e039      	b.n	800bbd4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d10b      	bne.n	800bb7e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bb66:	69bb      	ldr	r3, [r7, #24]
 800bb68:	881a      	ldrh	r2, [r3, #0]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bb72:	b292      	uxth	r2, r2
 800bb74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bb76:	69bb      	ldr	r3, [r7, #24]
 800bb78:	3302      	adds	r3, #2
 800bb7a:	61bb      	str	r3, [r7, #24]
 800bb7c:	e008      	b.n	800bb90 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bb7e:	69fb      	ldr	r3, [r7, #28]
 800bb80:	781a      	ldrb	r2, [r3, #0]
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	b292      	uxth	r2, r2
 800bb88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	3b01      	subs	r3, #1
 800bb9a:	b29a      	uxth	r2, r3
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d1cb      	bne.n	800bb46 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	9300      	str	r3, [sp, #0]
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	2140      	movs	r1, #64	; 0x40
 800bbb8:	68f8      	ldr	r0, [r7, #12]
 800bbba:	f000 fb26 	bl	800c20a <UART_WaitOnFlagUntilTimeout>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d001      	beq.n	800bbc8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800bbc4:	2303      	movs	r3, #3
 800bbc6:	e005      	b.n	800bbd4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2220      	movs	r2, #32
 800bbcc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	e000      	b.n	800bbd4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800bbd2:	2302      	movs	r3, #2
  }
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3720      	adds	r7, #32
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bbdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bbe0:	b08a      	sub	sp, #40	; 0x28
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	689a      	ldr	r2, [r3, #8]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	691b      	ldr	r3, [r3, #16]
 800bbf4:	431a      	orrs	r2, r3
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	695b      	ldr	r3, [r3, #20]
 800bbfa:	431a      	orrs	r2, r3
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	69db      	ldr	r3, [r3, #28]
 800bc00:	4313      	orrs	r3, r2
 800bc02:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	4bb4      	ldr	r3, [pc, #720]	; (800bedc <UART_SetConfig+0x300>)
 800bc0c:	4013      	ands	r3, r2
 800bc0e:	68fa      	ldr	r2, [r7, #12]
 800bc10:	6812      	ldr	r2, [r2, #0]
 800bc12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc14:	430b      	orrs	r3, r1
 800bc16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	68da      	ldr	r2, [r3, #12]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	430a      	orrs	r2, r1
 800bc2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	699b      	ldr	r3, [r3, #24]
 800bc32:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4aa9      	ldr	r2, [pc, #676]	; (800bee0 <UART_SetConfig+0x304>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d004      	beq.n	800bc48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	6a1b      	ldr	r3, [r3, #32]
 800bc42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc44:	4313      	orrs	r3, r2
 800bc46:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	689b      	ldr	r3, [r3, #8]
 800bc4e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc58:	430a      	orrs	r2, r1
 800bc5a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4aa0      	ldr	r2, [pc, #640]	; (800bee4 <UART_SetConfig+0x308>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d126      	bne.n	800bcb4 <UART_SetConfig+0xd8>
 800bc66:	4ba0      	ldr	r3, [pc, #640]	; (800bee8 <UART_SetConfig+0x30c>)
 800bc68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc6c:	f003 0303 	and.w	r3, r3, #3
 800bc70:	2b03      	cmp	r3, #3
 800bc72:	d81b      	bhi.n	800bcac <UART_SetConfig+0xd0>
 800bc74:	a201      	add	r2, pc, #4	; (adr r2, 800bc7c <UART_SetConfig+0xa0>)
 800bc76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7a:	bf00      	nop
 800bc7c:	0800bc8d 	.word	0x0800bc8d
 800bc80:	0800bc9d 	.word	0x0800bc9d
 800bc84:	0800bc95 	.word	0x0800bc95
 800bc88:	0800bca5 	.word	0x0800bca5
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bc92:	e080      	b.n	800bd96 <UART_SetConfig+0x1ba>
 800bc94:	2302      	movs	r3, #2
 800bc96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bc9a:	e07c      	b.n	800bd96 <UART_SetConfig+0x1ba>
 800bc9c:	2304      	movs	r3, #4
 800bc9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bca2:	e078      	b.n	800bd96 <UART_SetConfig+0x1ba>
 800bca4:	2308      	movs	r3, #8
 800bca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bcaa:	e074      	b.n	800bd96 <UART_SetConfig+0x1ba>
 800bcac:	2310      	movs	r3, #16
 800bcae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bcb2:	e070      	b.n	800bd96 <UART_SetConfig+0x1ba>
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a8c      	ldr	r2, [pc, #560]	; (800beec <UART_SetConfig+0x310>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d138      	bne.n	800bd30 <UART_SetConfig+0x154>
 800bcbe:	4b8a      	ldr	r3, [pc, #552]	; (800bee8 <UART_SetConfig+0x30c>)
 800bcc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcc4:	f003 030c 	and.w	r3, r3, #12
 800bcc8:	2b0c      	cmp	r3, #12
 800bcca:	d82d      	bhi.n	800bd28 <UART_SetConfig+0x14c>
 800bccc:	a201      	add	r2, pc, #4	; (adr r2, 800bcd4 <UART_SetConfig+0xf8>)
 800bcce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd2:	bf00      	nop
 800bcd4:	0800bd09 	.word	0x0800bd09
 800bcd8:	0800bd29 	.word	0x0800bd29
 800bcdc:	0800bd29 	.word	0x0800bd29
 800bce0:	0800bd29 	.word	0x0800bd29
 800bce4:	0800bd19 	.word	0x0800bd19
 800bce8:	0800bd29 	.word	0x0800bd29
 800bcec:	0800bd29 	.word	0x0800bd29
 800bcf0:	0800bd29 	.word	0x0800bd29
 800bcf4:	0800bd11 	.word	0x0800bd11
 800bcf8:	0800bd29 	.word	0x0800bd29
 800bcfc:	0800bd29 	.word	0x0800bd29
 800bd00:	0800bd29 	.word	0x0800bd29
 800bd04:	0800bd21 	.word	0x0800bd21
 800bd08:	2300      	movs	r3, #0
 800bd0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd0e:	e042      	b.n	800bd96 <UART_SetConfig+0x1ba>
 800bd10:	2302      	movs	r3, #2
 800bd12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd16:	e03e      	b.n	800bd96 <UART_SetConfig+0x1ba>
 800bd18:	2304      	movs	r3, #4
 800bd1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd1e:	e03a      	b.n	800bd96 <UART_SetConfig+0x1ba>
 800bd20:	2308      	movs	r3, #8
 800bd22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd26:	e036      	b.n	800bd96 <UART_SetConfig+0x1ba>
 800bd28:	2310      	movs	r3, #16
 800bd2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd2e:	e032      	b.n	800bd96 <UART_SetConfig+0x1ba>
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a6a      	ldr	r2, [pc, #424]	; (800bee0 <UART_SetConfig+0x304>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d12a      	bne.n	800bd90 <UART_SetConfig+0x1b4>
 800bd3a:	4b6b      	ldr	r3, [pc, #428]	; (800bee8 <UART_SetConfig+0x30c>)
 800bd3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bd44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd48:	d01a      	beq.n	800bd80 <UART_SetConfig+0x1a4>
 800bd4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd4e:	d81b      	bhi.n	800bd88 <UART_SetConfig+0x1ac>
 800bd50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd54:	d00c      	beq.n	800bd70 <UART_SetConfig+0x194>
 800bd56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd5a:	d815      	bhi.n	800bd88 <UART_SetConfig+0x1ac>
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d003      	beq.n	800bd68 <UART_SetConfig+0x18c>
 800bd60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd64:	d008      	beq.n	800bd78 <UART_SetConfig+0x19c>
 800bd66:	e00f      	b.n	800bd88 <UART_SetConfig+0x1ac>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd6e:	e012      	b.n	800bd96 <UART_SetConfig+0x1ba>
 800bd70:	2302      	movs	r3, #2
 800bd72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd76:	e00e      	b.n	800bd96 <UART_SetConfig+0x1ba>
 800bd78:	2304      	movs	r3, #4
 800bd7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd7e:	e00a      	b.n	800bd96 <UART_SetConfig+0x1ba>
 800bd80:	2308      	movs	r3, #8
 800bd82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd86:	e006      	b.n	800bd96 <UART_SetConfig+0x1ba>
 800bd88:	2310      	movs	r3, #16
 800bd8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bd8e:	e002      	b.n	800bd96 <UART_SetConfig+0x1ba>
 800bd90:	2310      	movs	r3, #16
 800bd92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a51      	ldr	r2, [pc, #324]	; (800bee0 <UART_SetConfig+0x304>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d17a      	bne.n	800be96 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bda0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bda4:	2b08      	cmp	r3, #8
 800bda6:	d824      	bhi.n	800bdf2 <UART_SetConfig+0x216>
 800bda8:	a201      	add	r2, pc, #4	; (adr r2, 800bdb0 <UART_SetConfig+0x1d4>)
 800bdaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdae:	bf00      	nop
 800bdb0:	0800bdd5 	.word	0x0800bdd5
 800bdb4:	0800bdf3 	.word	0x0800bdf3
 800bdb8:	0800bddd 	.word	0x0800bddd
 800bdbc:	0800bdf3 	.word	0x0800bdf3
 800bdc0:	0800bde3 	.word	0x0800bde3
 800bdc4:	0800bdf3 	.word	0x0800bdf3
 800bdc8:	0800bdf3 	.word	0x0800bdf3
 800bdcc:	0800bdf3 	.word	0x0800bdf3
 800bdd0:	0800bdeb 	.word	0x0800bdeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bdd4:	f7ff faac 	bl	800b330 <HAL_RCC_GetPCLK1Freq>
 800bdd8:	61f8      	str	r0, [r7, #28]
        break;
 800bdda:	e010      	b.n	800bdfe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bddc:	4b44      	ldr	r3, [pc, #272]	; (800bef0 <UART_SetConfig+0x314>)
 800bdde:	61fb      	str	r3, [r7, #28]
        break;
 800bde0:	e00d      	b.n	800bdfe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bde2:	f7ff fa0d 	bl	800b200 <HAL_RCC_GetSysClockFreq>
 800bde6:	61f8      	str	r0, [r7, #28]
        break;
 800bde8:	e009      	b.n	800bdfe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bdea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdee:	61fb      	str	r3, [r7, #28]
        break;
 800bdf0:	e005      	b.n	800bdfe <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800bdfc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	2b00      	cmp	r3, #0
 800be02:	f000 8107 	beq.w	800c014 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	685a      	ldr	r2, [r3, #4]
 800be0a:	4613      	mov	r3, r2
 800be0c:	005b      	lsls	r3, r3, #1
 800be0e:	4413      	add	r3, r2
 800be10:	69fa      	ldr	r2, [r7, #28]
 800be12:	429a      	cmp	r2, r3
 800be14:	d305      	bcc.n	800be22 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800be1c:	69fa      	ldr	r2, [r7, #28]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d903      	bls.n	800be2a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800be22:	2301      	movs	r3, #1
 800be24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800be28:	e0f4      	b.n	800c014 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	2200      	movs	r2, #0
 800be2e:	461c      	mov	r4, r3
 800be30:	4615      	mov	r5, r2
 800be32:	f04f 0200 	mov.w	r2, #0
 800be36:	f04f 0300 	mov.w	r3, #0
 800be3a:	022b      	lsls	r3, r5, #8
 800be3c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800be40:	0222      	lsls	r2, r4, #8
 800be42:	68f9      	ldr	r1, [r7, #12]
 800be44:	6849      	ldr	r1, [r1, #4]
 800be46:	0849      	lsrs	r1, r1, #1
 800be48:	2000      	movs	r0, #0
 800be4a:	4688      	mov	r8, r1
 800be4c:	4681      	mov	r9, r0
 800be4e:	eb12 0a08 	adds.w	sl, r2, r8
 800be52:	eb43 0b09 	adc.w	fp, r3, r9
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	2200      	movs	r2, #0
 800be5c:	603b      	str	r3, [r7, #0]
 800be5e:	607a      	str	r2, [r7, #4]
 800be60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be64:	4650      	mov	r0, sl
 800be66:	4659      	mov	r1, fp
 800be68:	f7fd fa9e 	bl	80093a8 <__aeabi_uldivmod>
 800be6c:	4602      	mov	r2, r0
 800be6e:	460b      	mov	r3, r1
 800be70:	4613      	mov	r3, r2
 800be72:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800be74:	69bb      	ldr	r3, [r7, #24]
 800be76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be7a:	d308      	bcc.n	800be8e <UART_SetConfig+0x2b2>
 800be7c:	69bb      	ldr	r3, [r7, #24]
 800be7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be82:	d204      	bcs.n	800be8e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	69ba      	ldr	r2, [r7, #24]
 800be8a:	60da      	str	r2, [r3, #12]
 800be8c:	e0c2      	b.n	800c014 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800be8e:	2301      	movs	r3, #1
 800be90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800be94:	e0be      	b.n	800c014 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	69db      	ldr	r3, [r3, #28]
 800be9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be9e:	d16a      	bne.n	800bf76 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800bea0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bea4:	2b08      	cmp	r3, #8
 800bea6:	d834      	bhi.n	800bf12 <UART_SetConfig+0x336>
 800bea8:	a201      	add	r2, pc, #4	; (adr r2, 800beb0 <UART_SetConfig+0x2d4>)
 800beaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beae:	bf00      	nop
 800beb0:	0800bed5 	.word	0x0800bed5
 800beb4:	0800bef5 	.word	0x0800bef5
 800beb8:	0800befd 	.word	0x0800befd
 800bebc:	0800bf13 	.word	0x0800bf13
 800bec0:	0800bf03 	.word	0x0800bf03
 800bec4:	0800bf13 	.word	0x0800bf13
 800bec8:	0800bf13 	.word	0x0800bf13
 800becc:	0800bf13 	.word	0x0800bf13
 800bed0:	0800bf0b 	.word	0x0800bf0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bed4:	f7ff fa2c 	bl	800b330 <HAL_RCC_GetPCLK1Freq>
 800bed8:	61f8      	str	r0, [r7, #28]
        break;
 800beda:	e020      	b.n	800bf1e <UART_SetConfig+0x342>
 800bedc:	efff69f3 	.word	0xefff69f3
 800bee0:	40008000 	.word	0x40008000
 800bee4:	40013800 	.word	0x40013800
 800bee8:	40021000 	.word	0x40021000
 800beec:	40004400 	.word	0x40004400
 800bef0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bef4:	f7ff fa32 	bl	800b35c <HAL_RCC_GetPCLK2Freq>
 800bef8:	61f8      	str	r0, [r7, #28]
        break;
 800befa:	e010      	b.n	800bf1e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800befc:	4b4c      	ldr	r3, [pc, #304]	; (800c030 <UART_SetConfig+0x454>)
 800befe:	61fb      	str	r3, [r7, #28]
        break;
 800bf00:	e00d      	b.n	800bf1e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf02:	f7ff f97d 	bl	800b200 <HAL_RCC_GetSysClockFreq>
 800bf06:	61f8      	str	r0, [r7, #28]
        break;
 800bf08:	e009      	b.n	800bf1e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf0e:	61fb      	str	r3, [r7, #28]
        break;
 800bf10:	e005      	b.n	800bf1e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800bf12:	2300      	movs	r3, #0
 800bf14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bf16:	2301      	movs	r3, #1
 800bf18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800bf1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d077      	beq.n	800c014 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	005a      	lsls	r2, r3, #1
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	085b      	lsrs	r3, r3, #1
 800bf2e:	441a      	add	r2, r3
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf38:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	2b0f      	cmp	r3, #15
 800bf3e:	d916      	bls.n	800bf6e <UART_SetConfig+0x392>
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf46:	d212      	bcs.n	800bf6e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	f023 030f 	bic.w	r3, r3, #15
 800bf50:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf52:	69bb      	ldr	r3, [r7, #24]
 800bf54:	085b      	lsrs	r3, r3, #1
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	f003 0307 	and.w	r3, r3, #7
 800bf5c:	b29a      	uxth	r2, r3
 800bf5e:	8afb      	ldrh	r3, [r7, #22]
 800bf60:	4313      	orrs	r3, r2
 800bf62:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	8afa      	ldrh	r2, [r7, #22]
 800bf6a:	60da      	str	r2, [r3, #12]
 800bf6c:	e052      	b.n	800c014 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800bf74:	e04e      	b.n	800c014 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bf76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bf7a:	2b08      	cmp	r3, #8
 800bf7c:	d827      	bhi.n	800bfce <UART_SetConfig+0x3f2>
 800bf7e:	a201      	add	r2, pc, #4	; (adr r2, 800bf84 <UART_SetConfig+0x3a8>)
 800bf80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf84:	0800bfa9 	.word	0x0800bfa9
 800bf88:	0800bfb1 	.word	0x0800bfb1
 800bf8c:	0800bfb9 	.word	0x0800bfb9
 800bf90:	0800bfcf 	.word	0x0800bfcf
 800bf94:	0800bfbf 	.word	0x0800bfbf
 800bf98:	0800bfcf 	.word	0x0800bfcf
 800bf9c:	0800bfcf 	.word	0x0800bfcf
 800bfa0:	0800bfcf 	.word	0x0800bfcf
 800bfa4:	0800bfc7 	.word	0x0800bfc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bfa8:	f7ff f9c2 	bl	800b330 <HAL_RCC_GetPCLK1Freq>
 800bfac:	61f8      	str	r0, [r7, #28]
        break;
 800bfae:	e014      	b.n	800bfda <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bfb0:	f7ff f9d4 	bl	800b35c <HAL_RCC_GetPCLK2Freq>
 800bfb4:	61f8      	str	r0, [r7, #28]
        break;
 800bfb6:	e010      	b.n	800bfda <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bfb8:	4b1d      	ldr	r3, [pc, #116]	; (800c030 <UART_SetConfig+0x454>)
 800bfba:	61fb      	str	r3, [r7, #28]
        break;
 800bfbc:	e00d      	b.n	800bfda <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bfbe:	f7ff f91f 	bl	800b200 <HAL_RCC_GetSysClockFreq>
 800bfc2:	61f8      	str	r0, [r7, #28]
        break;
 800bfc4:	e009      	b.n	800bfda <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bfc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bfca:	61fb      	str	r3, [r7, #28]
        break;
 800bfcc:	e005      	b.n	800bfda <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800bfd8:	bf00      	nop
    }

    if (pclk != 0U)
 800bfda:	69fb      	ldr	r3, [r7, #28]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d019      	beq.n	800c014 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	085a      	lsrs	r2, r3, #1
 800bfe6:	69fb      	ldr	r3, [r7, #28]
 800bfe8:	441a      	add	r2, r3
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	fbb2 f3f3 	udiv	r3, r2, r3
 800bff2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	2b0f      	cmp	r3, #15
 800bff8:	d909      	bls.n	800c00e <UART_SetConfig+0x432>
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c000:	d205      	bcs.n	800c00e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	b29a      	uxth	r2, r3
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	60da      	str	r2, [r3, #12]
 800c00c:	e002      	b.n	800c014 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800c00e:	2301      	movs	r3, #1
 800c010:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2200      	movs	r2, #0
 800c018:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2200      	movs	r2, #0
 800c01e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c020:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800c024:	4618      	mov	r0, r3
 800c026:	3728      	adds	r7, #40	; 0x28
 800c028:	46bd      	mov	sp, r7
 800c02a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c02e:	bf00      	nop
 800c030:	00f42400 	.word	0x00f42400

0800c034 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c034:	b480      	push	{r7}
 800c036:	b083      	sub	sp, #12
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c040:	f003 0301 	and.w	r3, r3, #1
 800c044:	2b00      	cmp	r3, #0
 800c046:	d00a      	beq.n	800c05e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	430a      	orrs	r2, r1
 800c05c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c062:	f003 0302 	and.w	r3, r3, #2
 800c066:	2b00      	cmp	r3, #0
 800c068:	d00a      	beq.n	800c080 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	430a      	orrs	r2, r1
 800c07e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c084:	f003 0304 	and.w	r3, r3, #4
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00a      	beq.n	800c0a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	430a      	orrs	r2, r1
 800c0a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a6:	f003 0308 	and.w	r3, r3, #8
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00a      	beq.n	800c0c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	430a      	orrs	r2, r1
 800c0c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c8:	f003 0310 	and.w	r3, r3, #16
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00a      	beq.n	800c0e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	430a      	orrs	r2, r1
 800c0e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ea:	f003 0320 	and.w	r3, r3, #32
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d00a      	beq.n	800c108 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	430a      	orrs	r2, r1
 800c106:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c110:	2b00      	cmp	r3, #0
 800c112:	d01a      	beq.n	800c14a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	430a      	orrs	r2, r1
 800c128:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c12e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c132:	d10a      	bne.n	800c14a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	430a      	orrs	r2, r1
 800c148:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c152:	2b00      	cmp	r3, #0
 800c154:	d00a      	beq.n	800c16c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	430a      	orrs	r2, r1
 800c16a:	605a      	str	r2, [r3, #4]
  }
}
 800c16c:	bf00      	nop
 800c16e:	370c      	adds	r7, #12
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr

0800c178 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b086      	sub	sp, #24
 800c17c:	af02      	add	r7, sp, #8
 800c17e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c188:	f7fe f80a 	bl	800a1a0 <HAL_GetTick>
 800c18c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f003 0308 	and.w	r3, r3, #8
 800c198:	2b08      	cmp	r3, #8
 800c19a:	d10e      	bne.n	800c1ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c19c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c1a0:	9300      	str	r3, [sp, #0]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 f82d 	bl	800c20a <UART_WaitOnFlagUntilTimeout>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d001      	beq.n	800c1ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c1b6:	2303      	movs	r3, #3
 800c1b8:	e023      	b.n	800c202 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f003 0304 	and.w	r3, r3, #4
 800c1c4:	2b04      	cmp	r3, #4
 800c1c6:	d10e      	bne.n	800c1e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c1c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c1cc:	9300      	str	r3, [sp, #0]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f000 f817 	bl	800c20a <UART_WaitOnFlagUntilTimeout>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d001      	beq.n	800c1e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c1e2:	2303      	movs	r3, #3
 800c1e4:	e00d      	b.n	800c202 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2220      	movs	r2, #32
 800c1ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2220      	movs	r2, #32
 800c1f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c200:	2300      	movs	r3, #0
}
 800c202:	4618      	mov	r0, r3
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b09c      	sub	sp, #112	; 0x70
 800c20e:	af00      	add	r7, sp, #0
 800c210:	60f8      	str	r0, [r7, #12]
 800c212:	60b9      	str	r1, [r7, #8]
 800c214:	603b      	str	r3, [r7, #0]
 800c216:	4613      	mov	r3, r2
 800c218:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c21a:	e0a5      	b.n	800c368 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c21c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c222:	f000 80a1 	beq.w	800c368 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c226:	f7fd ffbb 	bl	800a1a0 <HAL_GetTick>
 800c22a:	4602      	mov	r2, r0
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	1ad3      	subs	r3, r2, r3
 800c230:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c232:	429a      	cmp	r2, r3
 800c234:	d302      	bcc.n	800c23c <UART_WaitOnFlagUntilTimeout+0x32>
 800c236:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d13e      	bne.n	800c2ba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c244:	e853 3f00 	ldrex	r3, [r3]
 800c248:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c24a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c24c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c250:	667b      	str	r3, [r7, #100]	; 0x64
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	461a      	mov	r2, r3
 800c258:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c25a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c25c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c25e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c260:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c262:	e841 2300 	strex	r3, r2, [r1]
 800c266:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d1e6      	bne.n	800c23c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	3308      	adds	r3, #8
 800c274:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c278:	e853 3f00 	ldrex	r3, [r3]
 800c27c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c280:	f023 0301 	bic.w	r3, r3, #1
 800c284:	663b      	str	r3, [r7, #96]	; 0x60
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	3308      	adds	r3, #8
 800c28c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c28e:	64ba      	str	r2, [r7, #72]	; 0x48
 800c290:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c292:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c294:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c296:	e841 2300 	strex	r3, r2, [r1]
 800c29a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c29c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d1e5      	bne.n	800c26e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2220      	movs	r2, #32
 800c2a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2220      	movs	r2, #32
 800c2ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c2b6:	2303      	movs	r3, #3
 800c2b8:	e067      	b.n	800c38a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f003 0304 	and.w	r3, r3, #4
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d04f      	beq.n	800c368 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	69db      	ldr	r3, [r3, #28]
 800c2ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2d6:	d147      	bne.n	800c368 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c2e0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ea:	e853 3f00 	ldrex	r3, [r3]
 800c2ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c2f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c300:	637b      	str	r3, [r7, #52]	; 0x34
 800c302:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c304:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c308:	e841 2300 	strex	r3, r2, [r1]
 800c30c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c310:	2b00      	cmp	r3, #0
 800c312:	d1e6      	bne.n	800c2e2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	3308      	adds	r3, #8
 800c31a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	e853 3f00 	ldrex	r3, [r3]
 800c322:	613b      	str	r3, [r7, #16]
   return(result);
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	f023 0301 	bic.w	r3, r3, #1
 800c32a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	3308      	adds	r3, #8
 800c332:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c334:	623a      	str	r2, [r7, #32]
 800c336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c338:	69f9      	ldr	r1, [r7, #28]
 800c33a:	6a3a      	ldr	r2, [r7, #32]
 800c33c:	e841 2300 	strex	r3, r2, [r1]
 800c340:	61bb      	str	r3, [r7, #24]
   return(result);
 800c342:	69bb      	ldr	r3, [r7, #24]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1e5      	bne.n	800c314 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2220      	movs	r2, #32
 800c34c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2220      	movs	r2, #32
 800c352:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2220      	movs	r2, #32
 800c358:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2200      	movs	r2, #0
 800c360:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c364:	2303      	movs	r3, #3
 800c366:	e010      	b.n	800c38a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	69da      	ldr	r2, [r3, #28]
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	4013      	ands	r3, r2
 800c372:	68ba      	ldr	r2, [r7, #8]
 800c374:	429a      	cmp	r2, r3
 800c376:	bf0c      	ite	eq
 800c378:	2301      	moveq	r3, #1
 800c37a:	2300      	movne	r3, #0
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	461a      	mov	r2, r3
 800c380:	79fb      	ldrb	r3, [r7, #7]
 800c382:	429a      	cmp	r2, r3
 800c384:	f43f af4a 	beq.w	800c21c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c388:	2300      	movs	r3, #0
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3770      	adds	r7, #112	; 0x70
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}
	...

0800c394 <__errno>:
 800c394:	4b01      	ldr	r3, [pc, #4]	; (800c39c <__errno+0x8>)
 800c396:	6818      	ldr	r0, [r3, #0]
 800c398:	4770      	bx	lr
 800c39a:	bf00      	nop
 800c39c:	2000000c 	.word	0x2000000c

0800c3a0 <__libc_init_array>:
 800c3a0:	b570      	push	{r4, r5, r6, lr}
 800c3a2:	4d0d      	ldr	r5, [pc, #52]	; (800c3d8 <__libc_init_array+0x38>)
 800c3a4:	4c0d      	ldr	r4, [pc, #52]	; (800c3dc <__libc_init_array+0x3c>)
 800c3a6:	1b64      	subs	r4, r4, r5
 800c3a8:	10a4      	asrs	r4, r4, #2
 800c3aa:	2600      	movs	r6, #0
 800c3ac:	42a6      	cmp	r6, r4
 800c3ae:	d109      	bne.n	800c3c4 <__libc_init_array+0x24>
 800c3b0:	4d0b      	ldr	r5, [pc, #44]	; (800c3e0 <__libc_init_array+0x40>)
 800c3b2:	4c0c      	ldr	r4, [pc, #48]	; (800c3e4 <__libc_init_array+0x44>)
 800c3b4:	f002 ff04 	bl	800f1c0 <_init>
 800c3b8:	1b64      	subs	r4, r4, r5
 800c3ba:	10a4      	asrs	r4, r4, #2
 800c3bc:	2600      	movs	r6, #0
 800c3be:	42a6      	cmp	r6, r4
 800c3c0:	d105      	bne.n	800c3ce <__libc_init_array+0x2e>
 800c3c2:	bd70      	pop	{r4, r5, r6, pc}
 800c3c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3c8:	4798      	blx	r3
 800c3ca:	3601      	adds	r6, #1
 800c3cc:	e7ee      	b.n	800c3ac <__libc_init_array+0xc>
 800c3ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3d2:	4798      	blx	r3
 800c3d4:	3601      	adds	r6, #1
 800c3d6:	e7f2      	b.n	800c3be <__libc_init_array+0x1e>
 800c3d8:	0800f644 	.word	0x0800f644
 800c3dc:	0800f644 	.word	0x0800f644
 800c3e0:	0800f644 	.word	0x0800f644
 800c3e4:	0800f648 	.word	0x0800f648

0800c3e8 <memset>:
 800c3e8:	4402      	add	r2, r0
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d100      	bne.n	800c3f2 <memset+0xa>
 800c3f0:	4770      	bx	lr
 800c3f2:	f803 1b01 	strb.w	r1, [r3], #1
 800c3f6:	e7f9      	b.n	800c3ec <memset+0x4>

0800c3f8 <__cvt>:
 800c3f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3fc:	ec55 4b10 	vmov	r4, r5, d0
 800c400:	2d00      	cmp	r5, #0
 800c402:	460e      	mov	r6, r1
 800c404:	4619      	mov	r1, r3
 800c406:	462b      	mov	r3, r5
 800c408:	bfbb      	ittet	lt
 800c40a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c40e:	461d      	movlt	r5, r3
 800c410:	2300      	movge	r3, #0
 800c412:	232d      	movlt	r3, #45	; 0x2d
 800c414:	700b      	strb	r3, [r1, #0]
 800c416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c418:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c41c:	4691      	mov	r9, r2
 800c41e:	f023 0820 	bic.w	r8, r3, #32
 800c422:	bfbc      	itt	lt
 800c424:	4622      	movlt	r2, r4
 800c426:	4614      	movlt	r4, r2
 800c428:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c42c:	d005      	beq.n	800c43a <__cvt+0x42>
 800c42e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c432:	d100      	bne.n	800c436 <__cvt+0x3e>
 800c434:	3601      	adds	r6, #1
 800c436:	2102      	movs	r1, #2
 800c438:	e000      	b.n	800c43c <__cvt+0x44>
 800c43a:	2103      	movs	r1, #3
 800c43c:	ab03      	add	r3, sp, #12
 800c43e:	9301      	str	r3, [sp, #4]
 800c440:	ab02      	add	r3, sp, #8
 800c442:	9300      	str	r3, [sp, #0]
 800c444:	ec45 4b10 	vmov	d0, r4, r5
 800c448:	4653      	mov	r3, sl
 800c44a:	4632      	mov	r2, r6
 800c44c:	f000 fcec 	bl	800ce28 <_dtoa_r>
 800c450:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c454:	4607      	mov	r7, r0
 800c456:	d102      	bne.n	800c45e <__cvt+0x66>
 800c458:	f019 0f01 	tst.w	r9, #1
 800c45c:	d022      	beq.n	800c4a4 <__cvt+0xac>
 800c45e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c462:	eb07 0906 	add.w	r9, r7, r6
 800c466:	d110      	bne.n	800c48a <__cvt+0x92>
 800c468:	783b      	ldrb	r3, [r7, #0]
 800c46a:	2b30      	cmp	r3, #48	; 0x30
 800c46c:	d10a      	bne.n	800c484 <__cvt+0x8c>
 800c46e:	2200      	movs	r2, #0
 800c470:	2300      	movs	r3, #0
 800c472:	4620      	mov	r0, r4
 800c474:	4629      	mov	r1, r5
 800c476:	f7fc ff27 	bl	80092c8 <__aeabi_dcmpeq>
 800c47a:	b918      	cbnz	r0, 800c484 <__cvt+0x8c>
 800c47c:	f1c6 0601 	rsb	r6, r6, #1
 800c480:	f8ca 6000 	str.w	r6, [sl]
 800c484:	f8da 3000 	ldr.w	r3, [sl]
 800c488:	4499      	add	r9, r3
 800c48a:	2200      	movs	r2, #0
 800c48c:	2300      	movs	r3, #0
 800c48e:	4620      	mov	r0, r4
 800c490:	4629      	mov	r1, r5
 800c492:	f7fc ff19 	bl	80092c8 <__aeabi_dcmpeq>
 800c496:	b108      	cbz	r0, 800c49c <__cvt+0xa4>
 800c498:	f8cd 900c 	str.w	r9, [sp, #12]
 800c49c:	2230      	movs	r2, #48	; 0x30
 800c49e:	9b03      	ldr	r3, [sp, #12]
 800c4a0:	454b      	cmp	r3, r9
 800c4a2:	d307      	bcc.n	800c4b4 <__cvt+0xbc>
 800c4a4:	9b03      	ldr	r3, [sp, #12]
 800c4a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4a8:	1bdb      	subs	r3, r3, r7
 800c4aa:	4638      	mov	r0, r7
 800c4ac:	6013      	str	r3, [r2, #0]
 800c4ae:	b004      	add	sp, #16
 800c4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4b4:	1c59      	adds	r1, r3, #1
 800c4b6:	9103      	str	r1, [sp, #12]
 800c4b8:	701a      	strb	r2, [r3, #0]
 800c4ba:	e7f0      	b.n	800c49e <__cvt+0xa6>

0800c4bc <__exponent>:
 800c4bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2900      	cmp	r1, #0
 800c4c2:	bfb8      	it	lt
 800c4c4:	4249      	neglt	r1, r1
 800c4c6:	f803 2b02 	strb.w	r2, [r3], #2
 800c4ca:	bfb4      	ite	lt
 800c4cc:	222d      	movlt	r2, #45	; 0x2d
 800c4ce:	222b      	movge	r2, #43	; 0x2b
 800c4d0:	2909      	cmp	r1, #9
 800c4d2:	7042      	strb	r2, [r0, #1]
 800c4d4:	dd2a      	ble.n	800c52c <__exponent+0x70>
 800c4d6:	f10d 0407 	add.w	r4, sp, #7
 800c4da:	46a4      	mov	ip, r4
 800c4dc:	270a      	movs	r7, #10
 800c4de:	46a6      	mov	lr, r4
 800c4e0:	460a      	mov	r2, r1
 800c4e2:	fb91 f6f7 	sdiv	r6, r1, r7
 800c4e6:	fb07 1516 	mls	r5, r7, r6, r1
 800c4ea:	3530      	adds	r5, #48	; 0x30
 800c4ec:	2a63      	cmp	r2, #99	; 0x63
 800c4ee:	f104 34ff 	add.w	r4, r4, #4294967295
 800c4f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c4f6:	4631      	mov	r1, r6
 800c4f8:	dcf1      	bgt.n	800c4de <__exponent+0x22>
 800c4fa:	3130      	adds	r1, #48	; 0x30
 800c4fc:	f1ae 0502 	sub.w	r5, lr, #2
 800c500:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c504:	1c44      	adds	r4, r0, #1
 800c506:	4629      	mov	r1, r5
 800c508:	4561      	cmp	r1, ip
 800c50a:	d30a      	bcc.n	800c522 <__exponent+0x66>
 800c50c:	f10d 0209 	add.w	r2, sp, #9
 800c510:	eba2 020e 	sub.w	r2, r2, lr
 800c514:	4565      	cmp	r5, ip
 800c516:	bf88      	it	hi
 800c518:	2200      	movhi	r2, #0
 800c51a:	4413      	add	r3, r2
 800c51c:	1a18      	subs	r0, r3, r0
 800c51e:	b003      	add	sp, #12
 800c520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c522:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c526:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c52a:	e7ed      	b.n	800c508 <__exponent+0x4c>
 800c52c:	2330      	movs	r3, #48	; 0x30
 800c52e:	3130      	adds	r1, #48	; 0x30
 800c530:	7083      	strb	r3, [r0, #2]
 800c532:	70c1      	strb	r1, [r0, #3]
 800c534:	1d03      	adds	r3, r0, #4
 800c536:	e7f1      	b.n	800c51c <__exponent+0x60>

0800c538 <_printf_float>:
 800c538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c53c:	ed2d 8b02 	vpush	{d8}
 800c540:	b08d      	sub	sp, #52	; 0x34
 800c542:	460c      	mov	r4, r1
 800c544:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c548:	4616      	mov	r6, r2
 800c54a:	461f      	mov	r7, r3
 800c54c:	4605      	mov	r5, r0
 800c54e:	f001 fa59 	bl	800da04 <_localeconv_r>
 800c552:	f8d0 a000 	ldr.w	sl, [r0]
 800c556:	4650      	mov	r0, sl
 800c558:	f7fc fa3a 	bl	80089d0 <strlen>
 800c55c:	2300      	movs	r3, #0
 800c55e:	930a      	str	r3, [sp, #40]	; 0x28
 800c560:	6823      	ldr	r3, [r4, #0]
 800c562:	9305      	str	r3, [sp, #20]
 800c564:	f8d8 3000 	ldr.w	r3, [r8]
 800c568:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c56c:	3307      	adds	r3, #7
 800c56e:	f023 0307 	bic.w	r3, r3, #7
 800c572:	f103 0208 	add.w	r2, r3, #8
 800c576:	f8c8 2000 	str.w	r2, [r8]
 800c57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c582:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c586:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c58a:	9307      	str	r3, [sp, #28]
 800c58c:	f8cd 8018 	str.w	r8, [sp, #24]
 800c590:	ee08 0a10 	vmov	s16, r0
 800c594:	4b9f      	ldr	r3, [pc, #636]	; (800c814 <_printf_float+0x2dc>)
 800c596:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c59a:	f04f 32ff 	mov.w	r2, #4294967295
 800c59e:	f7fc fec5 	bl	800932c <__aeabi_dcmpun>
 800c5a2:	bb88      	cbnz	r0, 800c608 <_printf_float+0xd0>
 800c5a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5a8:	4b9a      	ldr	r3, [pc, #616]	; (800c814 <_printf_float+0x2dc>)
 800c5aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ae:	f7fc fe9f 	bl	80092f0 <__aeabi_dcmple>
 800c5b2:	bb48      	cbnz	r0, 800c608 <_printf_float+0xd0>
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	4640      	mov	r0, r8
 800c5ba:	4649      	mov	r1, r9
 800c5bc:	f7fc fe8e 	bl	80092dc <__aeabi_dcmplt>
 800c5c0:	b110      	cbz	r0, 800c5c8 <_printf_float+0x90>
 800c5c2:	232d      	movs	r3, #45	; 0x2d
 800c5c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5c8:	4b93      	ldr	r3, [pc, #588]	; (800c818 <_printf_float+0x2e0>)
 800c5ca:	4894      	ldr	r0, [pc, #592]	; (800c81c <_printf_float+0x2e4>)
 800c5cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c5d0:	bf94      	ite	ls
 800c5d2:	4698      	movls	r8, r3
 800c5d4:	4680      	movhi	r8, r0
 800c5d6:	2303      	movs	r3, #3
 800c5d8:	6123      	str	r3, [r4, #16]
 800c5da:	9b05      	ldr	r3, [sp, #20]
 800c5dc:	f023 0204 	bic.w	r2, r3, #4
 800c5e0:	6022      	str	r2, [r4, #0]
 800c5e2:	f04f 0900 	mov.w	r9, #0
 800c5e6:	9700      	str	r7, [sp, #0]
 800c5e8:	4633      	mov	r3, r6
 800c5ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800c5ec:	4621      	mov	r1, r4
 800c5ee:	4628      	mov	r0, r5
 800c5f0:	f000 f9d8 	bl	800c9a4 <_printf_common>
 800c5f4:	3001      	adds	r0, #1
 800c5f6:	f040 8090 	bne.w	800c71a <_printf_float+0x1e2>
 800c5fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c5fe:	b00d      	add	sp, #52	; 0x34
 800c600:	ecbd 8b02 	vpop	{d8}
 800c604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c608:	4642      	mov	r2, r8
 800c60a:	464b      	mov	r3, r9
 800c60c:	4640      	mov	r0, r8
 800c60e:	4649      	mov	r1, r9
 800c610:	f7fc fe8c 	bl	800932c <__aeabi_dcmpun>
 800c614:	b140      	cbz	r0, 800c628 <_printf_float+0xf0>
 800c616:	464b      	mov	r3, r9
 800c618:	2b00      	cmp	r3, #0
 800c61a:	bfbc      	itt	lt
 800c61c:	232d      	movlt	r3, #45	; 0x2d
 800c61e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c622:	487f      	ldr	r0, [pc, #508]	; (800c820 <_printf_float+0x2e8>)
 800c624:	4b7f      	ldr	r3, [pc, #508]	; (800c824 <_printf_float+0x2ec>)
 800c626:	e7d1      	b.n	800c5cc <_printf_float+0x94>
 800c628:	6863      	ldr	r3, [r4, #4]
 800c62a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c62e:	9206      	str	r2, [sp, #24]
 800c630:	1c5a      	adds	r2, r3, #1
 800c632:	d13f      	bne.n	800c6b4 <_printf_float+0x17c>
 800c634:	2306      	movs	r3, #6
 800c636:	6063      	str	r3, [r4, #4]
 800c638:	9b05      	ldr	r3, [sp, #20]
 800c63a:	6861      	ldr	r1, [r4, #4]
 800c63c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c640:	2300      	movs	r3, #0
 800c642:	9303      	str	r3, [sp, #12]
 800c644:	ab0a      	add	r3, sp, #40	; 0x28
 800c646:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c64a:	ab09      	add	r3, sp, #36	; 0x24
 800c64c:	ec49 8b10 	vmov	d0, r8, r9
 800c650:	9300      	str	r3, [sp, #0]
 800c652:	6022      	str	r2, [r4, #0]
 800c654:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c658:	4628      	mov	r0, r5
 800c65a:	f7ff fecd 	bl	800c3f8 <__cvt>
 800c65e:	9b06      	ldr	r3, [sp, #24]
 800c660:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c662:	2b47      	cmp	r3, #71	; 0x47
 800c664:	4680      	mov	r8, r0
 800c666:	d108      	bne.n	800c67a <_printf_float+0x142>
 800c668:	1cc8      	adds	r0, r1, #3
 800c66a:	db02      	blt.n	800c672 <_printf_float+0x13a>
 800c66c:	6863      	ldr	r3, [r4, #4]
 800c66e:	4299      	cmp	r1, r3
 800c670:	dd41      	ble.n	800c6f6 <_printf_float+0x1be>
 800c672:	f1ab 0b02 	sub.w	fp, fp, #2
 800c676:	fa5f fb8b 	uxtb.w	fp, fp
 800c67a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c67e:	d820      	bhi.n	800c6c2 <_printf_float+0x18a>
 800c680:	3901      	subs	r1, #1
 800c682:	465a      	mov	r2, fp
 800c684:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c688:	9109      	str	r1, [sp, #36]	; 0x24
 800c68a:	f7ff ff17 	bl	800c4bc <__exponent>
 800c68e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c690:	1813      	adds	r3, r2, r0
 800c692:	2a01      	cmp	r2, #1
 800c694:	4681      	mov	r9, r0
 800c696:	6123      	str	r3, [r4, #16]
 800c698:	dc02      	bgt.n	800c6a0 <_printf_float+0x168>
 800c69a:	6822      	ldr	r2, [r4, #0]
 800c69c:	07d2      	lsls	r2, r2, #31
 800c69e:	d501      	bpl.n	800c6a4 <_printf_float+0x16c>
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	6123      	str	r3, [r4, #16]
 800c6a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d09c      	beq.n	800c5e6 <_printf_float+0xae>
 800c6ac:	232d      	movs	r3, #45	; 0x2d
 800c6ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6b2:	e798      	b.n	800c5e6 <_printf_float+0xae>
 800c6b4:	9a06      	ldr	r2, [sp, #24]
 800c6b6:	2a47      	cmp	r2, #71	; 0x47
 800c6b8:	d1be      	bne.n	800c638 <_printf_float+0x100>
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d1bc      	bne.n	800c638 <_printf_float+0x100>
 800c6be:	2301      	movs	r3, #1
 800c6c0:	e7b9      	b.n	800c636 <_printf_float+0xfe>
 800c6c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c6c6:	d118      	bne.n	800c6fa <_printf_float+0x1c2>
 800c6c8:	2900      	cmp	r1, #0
 800c6ca:	6863      	ldr	r3, [r4, #4]
 800c6cc:	dd0b      	ble.n	800c6e6 <_printf_float+0x1ae>
 800c6ce:	6121      	str	r1, [r4, #16]
 800c6d0:	b913      	cbnz	r3, 800c6d8 <_printf_float+0x1a0>
 800c6d2:	6822      	ldr	r2, [r4, #0]
 800c6d4:	07d0      	lsls	r0, r2, #31
 800c6d6:	d502      	bpl.n	800c6de <_printf_float+0x1a6>
 800c6d8:	3301      	adds	r3, #1
 800c6da:	440b      	add	r3, r1
 800c6dc:	6123      	str	r3, [r4, #16]
 800c6de:	65a1      	str	r1, [r4, #88]	; 0x58
 800c6e0:	f04f 0900 	mov.w	r9, #0
 800c6e4:	e7de      	b.n	800c6a4 <_printf_float+0x16c>
 800c6e6:	b913      	cbnz	r3, 800c6ee <_printf_float+0x1b6>
 800c6e8:	6822      	ldr	r2, [r4, #0]
 800c6ea:	07d2      	lsls	r2, r2, #31
 800c6ec:	d501      	bpl.n	800c6f2 <_printf_float+0x1ba>
 800c6ee:	3302      	adds	r3, #2
 800c6f0:	e7f4      	b.n	800c6dc <_printf_float+0x1a4>
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	e7f2      	b.n	800c6dc <_printf_float+0x1a4>
 800c6f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c6fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6fc:	4299      	cmp	r1, r3
 800c6fe:	db05      	blt.n	800c70c <_printf_float+0x1d4>
 800c700:	6823      	ldr	r3, [r4, #0]
 800c702:	6121      	str	r1, [r4, #16]
 800c704:	07d8      	lsls	r0, r3, #31
 800c706:	d5ea      	bpl.n	800c6de <_printf_float+0x1a6>
 800c708:	1c4b      	adds	r3, r1, #1
 800c70a:	e7e7      	b.n	800c6dc <_printf_float+0x1a4>
 800c70c:	2900      	cmp	r1, #0
 800c70e:	bfd4      	ite	le
 800c710:	f1c1 0202 	rsble	r2, r1, #2
 800c714:	2201      	movgt	r2, #1
 800c716:	4413      	add	r3, r2
 800c718:	e7e0      	b.n	800c6dc <_printf_float+0x1a4>
 800c71a:	6823      	ldr	r3, [r4, #0]
 800c71c:	055a      	lsls	r2, r3, #21
 800c71e:	d407      	bmi.n	800c730 <_printf_float+0x1f8>
 800c720:	6923      	ldr	r3, [r4, #16]
 800c722:	4642      	mov	r2, r8
 800c724:	4631      	mov	r1, r6
 800c726:	4628      	mov	r0, r5
 800c728:	47b8      	blx	r7
 800c72a:	3001      	adds	r0, #1
 800c72c:	d12c      	bne.n	800c788 <_printf_float+0x250>
 800c72e:	e764      	b.n	800c5fa <_printf_float+0xc2>
 800c730:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c734:	f240 80e0 	bls.w	800c8f8 <_printf_float+0x3c0>
 800c738:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c73c:	2200      	movs	r2, #0
 800c73e:	2300      	movs	r3, #0
 800c740:	f7fc fdc2 	bl	80092c8 <__aeabi_dcmpeq>
 800c744:	2800      	cmp	r0, #0
 800c746:	d034      	beq.n	800c7b2 <_printf_float+0x27a>
 800c748:	4a37      	ldr	r2, [pc, #220]	; (800c828 <_printf_float+0x2f0>)
 800c74a:	2301      	movs	r3, #1
 800c74c:	4631      	mov	r1, r6
 800c74e:	4628      	mov	r0, r5
 800c750:	47b8      	blx	r7
 800c752:	3001      	adds	r0, #1
 800c754:	f43f af51 	beq.w	800c5fa <_printf_float+0xc2>
 800c758:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c75c:	429a      	cmp	r2, r3
 800c75e:	db02      	blt.n	800c766 <_printf_float+0x22e>
 800c760:	6823      	ldr	r3, [r4, #0]
 800c762:	07d8      	lsls	r0, r3, #31
 800c764:	d510      	bpl.n	800c788 <_printf_float+0x250>
 800c766:	ee18 3a10 	vmov	r3, s16
 800c76a:	4652      	mov	r2, sl
 800c76c:	4631      	mov	r1, r6
 800c76e:	4628      	mov	r0, r5
 800c770:	47b8      	blx	r7
 800c772:	3001      	adds	r0, #1
 800c774:	f43f af41 	beq.w	800c5fa <_printf_float+0xc2>
 800c778:	f04f 0800 	mov.w	r8, #0
 800c77c:	f104 091a 	add.w	r9, r4, #26
 800c780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c782:	3b01      	subs	r3, #1
 800c784:	4543      	cmp	r3, r8
 800c786:	dc09      	bgt.n	800c79c <_printf_float+0x264>
 800c788:	6823      	ldr	r3, [r4, #0]
 800c78a:	079b      	lsls	r3, r3, #30
 800c78c:	f100 8105 	bmi.w	800c99a <_printf_float+0x462>
 800c790:	68e0      	ldr	r0, [r4, #12]
 800c792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c794:	4298      	cmp	r0, r3
 800c796:	bfb8      	it	lt
 800c798:	4618      	movlt	r0, r3
 800c79a:	e730      	b.n	800c5fe <_printf_float+0xc6>
 800c79c:	2301      	movs	r3, #1
 800c79e:	464a      	mov	r2, r9
 800c7a0:	4631      	mov	r1, r6
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	47b8      	blx	r7
 800c7a6:	3001      	adds	r0, #1
 800c7a8:	f43f af27 	beq.w	800c5fa <_printf_float+0xc2>
 800c7ac:	f108 0801 	add.w	r8, r8, #1
 800c7b0:	e7e6      	b.n	800c780 <_printf_float+0x248>
 800c7b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	dc39      	bgt.n	800c82c <_printf_float+0x2f4>
 800c7b8:	4a1b      	ldr	r2, [pc, #108]	; (800c828 <_printf_float+0x2f0>)
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	4631      	mov	r1, r6
 800c7be:	4628      	mov	r0, r5
 800c7c0:	47b8      	blx	r7
 800c7c2:	3001      	adds	r0, #1
 800c7c4:	f43f af19 	beq.w	800c5fa <_printf_float+0xc2>
 800c7c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	d102      	bne.n	800c7d6 <_printf_float+0x29e>
 800c7d0:	6823      	ldr	r3, [r4, #0]
 800c7d2:	07d9      	lsls	r1, r3, #31
 800c7d4:	d5d8      	bpl.n	800c788 <_printf_float+0x250>
 800c7d6:	ee18 3a10 	vmov	r3, s16
 800c7da:	4652      	mov	r2, sl
 800c7dc:	4631      	mov	r1, r6
 800c7de:	4628      	mov	r0, r5
 800c7e0:	47b8      	blx	r7
 800c7e2:	3001      	adds	r0, #1
 800c7e4:	f43f af09 	beq.w	800c5fa <_printf_float+0xc2>
 800c7e8:	f04f 0900 	mov.w	r9, #0
 800c7ec:	f104 0a1a 	add.w	sl, r4, #26
 800c7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7f2:	425b      	negs	r3, r3
 800c7f4:	454b      	cmp	r3, r9
 800c7f6:	dc01      	bgt.n	800c7fc <_printf_float+0x2c4>
 800c7f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7fa:	e792      	b.n	800c722 <_printf_float+0x1ea>
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	4652      	mov	r2, sl
 800c800:	4631      	mov	r1, r6
 800c802:	4628      	mov	r0, r5
 800c804:	47b8      	blx	r7
 800c806:	3001      	adds	r0, #1
 800c808:	f43f aef7 	beq.w	800c5fa <_printf_float+0xc2>
 800c80c:	f109 0901 	add.w	r9, r9, #1
 800c810:	e7ee      	b.n	800c7f0 <_printf_float+0x2b8>
 800c812:	bf00      	nop
 800c814:	7fefffff 	.word	0x7fefffff
 800c818:	0800f264 	.word	0x0800f264
 800c81c:	0800f268 	.word	0x0800f268
 800c820:	0800f270 	.word	0x0800f270
 800c824:	0800f26c 	.word	0x0800f26c
 800c828:	0800f274 	.word	0x0800f274
 800c82c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c82e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c830:	429a      	cmp	r2, r3
 800c832:	bfa8      	it	ge
 800c834:	461a      	movge	r2, r3
 800c836:	2a00      	cmp	r2, #0
 800c838:	4691      	mov	r9, r2
 800c83a:	dc37      	bgt.n	800c8ac <_printf_float+0x374>
 800c83c:	f04f 0b00 	mov.w	fp, #0
 800c840:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c844:	f104 021a 	add.w	r2, r4, #26
 800c848:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c84a:	9305      	str	r3, [sp, #20]
 800c84c:	eba3 0309 	sub.w	r3, r3, r9
 800c850:	455b      	cmp	r3, fp
 800c852:	dc33      	bgt.n	800c8bc <_printf_float+0x384>
 800c854:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c858:	429a      	cmp	r2, r3
 800c85a:	db3b      	blt.n	800c8d4 <_printf_float+0x39c>
 800c85c:	6823      	ldr	r3, [r4, #0]
 800c85e:	07da      	lsls	r2, r3, #31
 800c860:	d438      	bmi.n	800c8d4 <_printf_float+0x39c>
 800c862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c864:	9a05      	ldr	r2, [sp, #20]
 800c866:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c868:	1a9a      	subs	r2, r3, r2
 800c86a:	eba3 0901 	sub.w	r9, r3, r1
 800c86e:	4591      	cmp	r9, r2
 800c870:	bfa8      	it	ge
 800c872:	4691      	movge	r9, r2
 800c874:	f1b9 0f00 	cmp.w	r9, #0
 800c878:	dc35      	bgt.n	800c8e6 <_printf_float+0x3ae>
 800c87a:	f04f 0800 	mov.w	r8, #0
 800c87e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c882:	f104 0a1a 	add.w	sl, r4, #26
 800c886:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c88a:	1a9b      	subs	r3, r3, r2
 800c88c:	eba3 0309 	sub.w	r3, r3, r9
 800c890:	4543      	cmp	r3, r8
 800c892:	f77f af79 	ble.w	800c788 <_printf_float+0x250>
 800c896:	2301      	movs	r3, #1
 800c898:	4652      	mov	r2, sl
 800c89a:	4631      	mov	r1, r6
 800c89c:	4628      	mov	r0, r5
 800c89e:	47b8      	blx	r7
 800c8a0:	3001      	adds	r0, #1
 800c8a2:	f43f aeaa 	beq.w	800c5fa <_printf_float+0xc2>
 800c8a6:	f108 0801 	add.w	r8, r8, #1
 800c8aa:	e7ec      	b.n	800c886 <_printf_float+0x34e>
 800c8ac:	4613      	mov	r3, r2
 800c8ae:	4631      	mov	r1, r6
 800c8b0:	4642      	mov	r2, r8
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	47b8      	blx	r7
 800c8b6:	3001      	adds	r0, #1
 800c8b8:	d1c0      	bne.n	800c83c <_printf_float+0x304>
 800c8ba:	e69e      	b.n	800c5fa <_printf_float+0xc2>
 800c8bc:	2301      	movs	r3, #1
 800c8be:	4631      	mov	r1, r6
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	9205      	str	r2, [sp, #20]
 800c8c4:	47b8      	blx	r7
 800c8c6:	3001      	adds	r0, #1
 800c8c8:	f43f ae97 	beq.w	800c5fa <_printf_float+0xc2>
 800c8cc:	9a05      	ldr	r2, [sp, #20]
 800c8ce:	f10b 0b01 	add.w	fp, fp, #1
 800c8d2:	e7b9      	b.n	800c848 <_printf_float+0x310>
 800c8d4:	ee18 3a10 	vmov	r3, s16
 800c8d8:	4652      	mov	r2, sl
 800c8da:	4631      	mov	r1, r6
 800c8dc:	4628      	mov	r0, r5
 800c8de:	47b8      	blx	r7
 800c8e0:	3001      	adds	r0, #1
 800c8e2:	d1be      	bne.n	800c862 <_printf_float+0x32a>
 800c8e4:	e689      	b.n	800c5fa <_printf_float+0xc2>
 800c8e6:	9a05      	ldr	r2, [sp, #20]
 800c8e8:	464b      	mov	r3, r9
 800c8ea:	4442      	add	r2, r8
 800c8ec:	4631      	mov	r1, r6
 800c8ee:	4628      	mov	r0, r5
 800c8f0:	47b8      	blx	r7
 800c8f2:	3001      	adds	r0, #1
 800c8f4:	d1c1      	bne.n	800c87a <_printf_float+0x342>
 800c8f6:	e680      	b.n	800c5fa <_printf_float+0xc2>
 800c8f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8fa:	2a01      	cmp	r2, #1
 800c8fc:	dc01      	bgt.n	800c902 <_printf_float+0x3ca>
 800c8fe:	07db      	lsls	r3, r3, #31
 800c900:	d538      	bpl.n	800c974 <_printf_float+0x43c>
 800c902:	2301      	movs	r3, #1
 800c904:	4642      	mov	r2, r8
 800c906:	4631      	mov	r1, r6
 800c908:	4628      	mov	r0, r5
 800c90a:	47b8      	blx	r7
 800c90c:	3001      	adds	r0, #1
 800c90e:	f43f ae74 	beq.w	800c5fa <_printf_float+0xc2>
 800c912:	ee18 3a10 	vmov	r3, s16
 800c916:	4652      	mov	r2, sl
 800c918:	4631      	mov	r1, r6
 800c91a:	4628      	mov	r0, r5
 800c91c:	47b8      	blx	r7
 800c91e:	3001      	adds	r0, #1
 800c920:	f43f ae6b 	beq.w	800c5fa <_printf_float+0xc2>
 800c924:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c928:	2200      	movs	r2, #0
 800c92a:	2300      	movs	r3, #0
 800c92c:	f7fc fccc 	bl	80092c8 <__aeabi_dcmpeq>
 800c930:	b9d8      	cbnz	r0, 800c96a <_printf_float+0x432>
 800c932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c934:	f108 0201 	add.w	r2, r8, #1
 800c938:	3b01      	subs	r3, #1
 800c93a:	4631      	mov	r1, r6
 800c93c:	4628      	mov	r0, r5
 800c93e:	47b8      	blx	r7
 800c940:	3001      	adds	r0, #1
 800c942:	d10e      	bne.n	800c962 <_printf_float+0x42a>
 800c944:	e659      	b.n	800c5fa <_printf_float+0xc2>
 800c946:	2301      	movs	r3, #1
 800c948:	4652      	mov	r2, sl
 800c94a:	4631      	mov	r1, r6
 800c94c:	4628      	mov	r0, r5
 800c94e:	47b8      	blx	r7
 800c950:	3001      	adds	r0, #1
 800c952:	f43f ae52 	beq.w	800c5fa <_printf_float+0xc2>
 800c956:	f108 0801 	add.w	r8, r8, #1
 800c95a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c95c:	3b01      	subs	r3, #1
 800c95e:	4543      	cmp	r3, r8
 800c960:	dcf1      	bgt.n	800c946 <_printf_float+0x40e>
 800c962:	464b      	mov	r3, r9
 800c964:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c968:	e6dc      	b.n	800c724 <_printf_float+0x1ec>
 800c96a:	f04f 0800 	mov.w	r8, #0
 800c96e:	f104 0a1a 	add.w	sl, r4, #26
 800c972:	e7f2      	b.n	800c95a <_printf_float+0x422>
 800c974:	2301      	movs	r3, #1
 800c976:	4642      	mov	r2, r8
 800c978:	e7df      	b.n	800c93a <_printf_float+0x402>
 800c97a:	2301      	movs	r3, #1
 800c97c:	464a      	mov	r2, r9
 800c97e:	4631      	mov	r1, r6
 800c980:	4628      	mov	r0, r5
 800c982:	47b8      	blx	r7
 800c984:	3001      	adds	r0, #1
 800c986:	f43f ae38 	beq.w	800c5fa <_printf_float+0xc2>
 800c98a:	f108 0801 	add.w	r8, r8, #1
 800c98e:	68e3      	ldr	r3, [r4, #12]
 800c990:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c992:	1a5b      	subs	r3, r3, r1
 800c994:	4543      	cmp	r3, r8
 800c996:	dcf0      	bgt.n	800c97a <_printf_float+0x442>
 800c998:	e6fa      	b.n	800c790 <_printf_float+0x258>
 800c99a:	f04f 0800 	mov.w	r8, #0
 800c99e:	f104 0919 	add.w	r9, r4, #25
 800c9a2:	e7f4      	b.n	800c98e <_printf_float+0x456>

0800c9a4 <_printf_common>:
 800c9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9a8:	4616      	mov	r6, r2
 800c9aa:	4699      	mov	r9, r3
 800c9ac:	688a      	ldr	r2, [r1, #8]
 800c9ae:	690b      	ldr	r3, [r1, #16]
 800c9b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	bfb8      	it	lt
 800c9b8:	4613      	movlt	r3, r2
 800c9ba:	6033      	str	r3, [r6, #0]
 800c9bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9c0:	4607      	mov	r7, r0
 800c9c2:	460c      	mov	r4, r1
 800c9c4:	b10a      	cbz	r2, 800c9ca <_printf_common+0x26>
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	6033      	str	r3, [r6, #0]
 800c9ca:	6823      	ldr	r3, [r4, #0]
 800c9cc:	0699      	lsls	r1, r3, #26
 800c9ce:	bf42      	ittt	mi
 800c9d0:	6833      	ldrmi	r3, [r6, #0]
 800c9d2:	3302      	addmi	r3, #2
 800c9d4:	6033      	strmi	r3, [r6, #0]
 800c9d6:	6825      	ldr	r5, [r4, #0]
 800c9d8:	f015 0506 	ands.w	r5, r5, #6
 800c9dc:	d106      	bne.n	800c9ec <_printf_common+0x48>
 800c9de:	f104 0a19 	add.w	sl, r4, #25
 800c9e2:	68e3      	ldr	r3, [r4, #12]
 800c9e4:	6832      	ldr	r2, [r6, #0]
 800c9e6:	1a9b      	subs	r3, r3, r2
 800c9e8:	42ab      	cmp	r3, r5
 800c9ea:	dc26      	bgt.n	800ca3a <_printf_common+0x96>
 800c9ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c9f0:	1e13      	subs	r3, r2, #0
 800c9f2:	6822      	ldr	r2, [r4, #0]
 800c9f4:	bf18      	it	ne
 800c9f6:	2301      	movne	r3, #1
 800c9f8:	0692      	lsls	r2, r2, #26
 800c9fa:	d42b      	bmi.n	800ca54 <_printf_common+0xb0>
 800c9fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca00:	4649      	mov	r1, r9
 800ca02:	4638      	mov	r0, r7
 800ca04:	47c0      	blx	r8
 800ca06:	3001      	adds	r0, #1
 800ca08:	d01e      	beq.n	800ca48 <_printf_common+0xa4>
 800ca0a:	6823      	ldr	r3, [r4, #0]
 800ca0c:	68e5      	ldr	r5, [r4, #12]
 800ca0e:	6832      	ldr	r2, [r6, #0]
 800ca10:	f003 0306 	and.w	r3, r3, #6
 800ca14:	2b04      	cmp	r3, #4
 800ca16:	bf08      	it	eq
 800ca18:	1aad      	subeq	r5, r5, r2
 800ca1a:	68a3      	ldr	r3, [r4, #8]
 800ca1c:	6922      	ldr	r2, [r4, #16]
 800ca1e:	bf0c      	ite	eq
 800ca20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca24:	2500      	movne	r5, #0
 800ca26:	4293      	cmp	r3, r2
 800ca28:	bfc4      	itt	gt
 800ca2a:	1a9b      	subgt	r3, r3, r2
 800ca2c:	18ed      	addgt	r5, r5, r3
 800ca2e:	2600      	movs	r6, #0
 800ca30:	341a      	adds	r4, #26
 800ca32:	42b5      	cmp	r5, r6
 800ca34:	d11a      	bne.n	800ca6c <_printf_common+0xc8>
 800ca36:	2000      	movs	r0, #0
 800ca38:	e008      	b.n	800ca4c <_printf_common+0xa8>
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	4652      	mov	r2, sl
 800ca3e:	4649      	mov	r1, r9
 800ca40:	4638      	mov	r0, r7
 800ca42:	47c0      	blx	r8
 800ca44:	3001      	adds	r0, #1
 800ca46:	d103      	bne.n	800ca50 <_printf_common+0xac>
 800ca48:	f04f 30ff 	mov.w	r0, #4294967295
 800ca4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca50:	3501      	adds	r5, #1
 800ca52:	e7c6      	b.n	800c9e2 <_printf_common+0x3e>
 800ca54:	18e1      	adds	r1, r4, r3
 800ca56:	1c5a      	adds	r2, r3, #1
 800ca58:	2030      	movs	r0, #48	; 0x30
 800ca5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca5e:	4422      	add	r2, r4
 800ca60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca68:	3302      	adds	r3, #2
 800ca6a:	e7c7      	b.n	800c9fc <_printf_common+0x58>
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	4622      	mov	r2, r4
 800ca70:	4649      	mov	r1, r9
 800ca72:	4638      	mov	r0, r7
 800ca74:	47c0      	blx	r8
 800ca76:	3001      	adds	r0, #1
 800ca78:	d0e6      	beq.n	800ca48 <_printf_common+0xa4>
 800ca7a:	3601      	adds	r6, #1
 800ca7c:	e7d9      	b.n	800ca32 <_printf_common+0x8e>
	...

0800ca80 <_printf_i>:
 800ca80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca84:	7e0f      	ldrb	r7, [r1, #24]
 800ca86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca88:	2f78      	cmp	r7, #120	; 0x78
 800ca8a:	4691      	mov	r9, r2
 800ca8c:	4680      	mov	r8, r0
 800ca8e:	460c      	mov	r4, r1
 800ca90:	469a      	mov	sl, r3
 800ca92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca96:	d807      	bhi.n	800caa8 <_printf_i+0x28>
 800ca98:	2f62      	cmp	r7, #98	; 0x62
 800ca9a:	d80a      	bhi.n	800cab2 <_printf_i+0x32>
 800ca9c:	2f00      	cmp	r7, #0
 800ca9e:	f000 80d8 	beq.w	800cc52 <_printf_i+0x1d2>
 800caa2:	2f58      	cmp	r7, #88	; 0x58
 800caa4:	f000 80a3 	beq.w	800cbee <_printf_i+0x16e>
 800caa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800caac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cab0:	e03a      	b.n	800cb28 <_printf_i+0xa8>
 800cab2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cab6:	2b15      	cmp	r3, #21
 800cab8:	d8f6      	bhi.n	800caa8 <_printf_i+0x28>
 800caba:	a101      	add	r1, pc, #4	; (adr r1, 800cac0 <_printf_i+0x40>)
 800cabc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cac0:	0800cb19 	.word	0x0800cb19
 800cac4:	0800cb2d 	.word	0x0800cb2d
 800cac8:	0800caa9 	.word	0x0800caa9
 800cacc:	0800caa9 	.word	0x0800caa9
 800cad0:	0800caa9 	.word	0x0800caa9
 800cad4:	0800caa9 	.word	0x0800caa9
 800cad8:	0800cb2d 	.word	0x0800cb2d
 800cadc:	0800caa9 	.word	0x0800caa9
 800cae0:	0800caa9 	.word	0x0800caa9
 800cae4:	0800caa9 	.word	0x0800caa9
 800cae8:	0800caa9 	.word	0x0800caa9
 800caec:	0800cc39 	.word	0x0800cc39
 800caf0:	0800cb5d 	.word	0x0800cb5d
 800caf4:	0800cc1b 	.word	0x0800cc1b
 800caf8:	0800caa9 	.word	0x0800caa9
 800cafc:	0800caa9 	.word	0x0800caa9
 800cb00:	0800cc5b 	.word	0x0800cc5b
 800cb04:	0800caa9 	.word	0x0800caa9
 800cb08:	0800cb5d 	.word	0x0800cb5d
 800cb0c:	0800caa9 	.word	0x0800caa9
 800cb10:	0800caa9 	.word	0x0800caa9
 800cb14:	0800cc23 	.word	0x0800cc23
 800cb18:	682b      	ldr	r3, [r5, #0]
 800cb1a:	1d1a      	adds	r2, r3, #4
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	602a      	str	r2, [r5, #0]
 800cb20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb28:	2301      	movs	r3, #1
 800cb2a:	e0a3      	b.n	800cc74 <_printf_i+0x1f4>
 800cb2c:	6820      	ldr	r0, [r4, #0]
 800cb2e:	6829      	ldr	r1, [r5, #0]
 800cb30:	0606      	lsls	r6, r0, #24
 800cb32:	f101 0304 	add.w	r3, r1, #4
 800cb36:	d50a      	bpl.n	800cb4e <_printf_i+0xce>
 800cb38:	680e      	ldr	r6, [r1, #0]
 800cb3a:	602b      	str	r3, [r5, #0]
 800cb3c:	2e00      	cmp	r6, #0
 800cb3e:	da03      	bge.n	800cb48 <_printf_i+0xc8>
 800cb40:	232d      	movs	r3, #45	; 0x2d
 800cb42:	4276      	negs	r6, r6
 800cb44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb48:	485e      	ldr	r0, [pc, #376]	; (800ccc4 <_printf_i+0x244>)
 800cb4a:	230a      	movs	r3, #10
 800cb4c:	e019      	b.n	800cb82 <_printf_i+0x102>
 800cb4e:	680e      	ldr	r6, [r1, #0]
 800cb50:	602b      	str	r3, [r5, #0]
 800cb52:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cb56:	bf18      	it	ne
 800cb58:	b236      	sxthne	r6, r6
 800cb5a:	e7ef      	b.n	800cb3c <_printf_i+0xbc>
 800cb5c:	682b      	ldr	r3, [r5, #0]
 800cb5e:	6820      	ldr	r0, [r4, #0]
 800cb60:	1d19      	adds	r1, r3, #4
 800cb62:	6029      	str	r1, [r5, #0]
 800cb64:	0601      	lsls	r1, r0, #24
 800cb66:	d501      	bpl.n	800cb6c <_printf_i+0xec>
 800cb68:	681e      	ldr	r6, [r3, #0]
 800cb6a:	e002      	b.n	800cb72 <_printf_i+0xf2>
 800cb6c:	0646      	lsls	r6, r0, #25
 800cb6e:	d5fb      	bpl.n	800cb68 <_printf_i+0xe8>
 800cb70:	881e      	ldrh	r6, [r3, #0]
 800cb72:	4854      	ldr	r0, [pc, #336]	; (800ccc4 <_printf_i+0x244>)
 800cb74:	2f6f      	cmp	r7, #111	; 0x6f
 800cb76:	bf0c      	ite	eq
 800cb78:	2308      	moveq	r3, #8
 800cb7a:	230a      	movne	r3, #10
 800cb7c:	2100      	movs	r1, #0
 800cb7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb82:	6865      	ldr	r5, [r4, #4]
 800cb84:	60a5      	str	r5, [r4, #8]
 800cb86:	2d00      	cmp	r5, #0
 800cb88:	bfa2      	ittt	ge
 800cb8a:	6821      	ldrge	r1, [r4, #0]
 800cb8c:	f021 0104 	bicge.w	r1, r1, #4
 800cb90:	6021      	strge	r1, [r4, #0]
 800cb92:	b90e      	cbnz	r6, 800cb98 <_printf_i+0x118>
 800cb94:	2d00      	cmp	r5, #0
 800cb96:	d04d      	beq.n	800cc34 <_printf_i+0x1b4>
 800cb98:	4615      	mov	r5, r2
 800cb9a:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb9e:	fb03 6711 	mls	r7, r3, r1, r6
 800cba2:	5dc7      	ldrb	r7, [r0, r7]
 800cba4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cba8:	4637      	mov	r7, r6
 800cbaa:	42bb      	cmp	r3, r7
 800cbac:	460e      	mov	r6, r1
 800cbae:	d9f4      	bls.n	800cb9a <_printf_i+0x11a>
 800cbb0:	2b08      	cmp	r3, #8
 800cbb2:	d10b      	bne.n	800cbcc <_printf_i+0x14c>
 800cbb4:	6823      	ldr	r3, [r4, #0]
 800cbb6:	07de      	lsls	r6, r3, #31
 800cbb8:	d508      	bpl.n	800cbcc <_printf_i+0x14c>
 800cbba:	6923      	ldr	r3, [r4, #16]
 800cbbc:	6861      	ldr	r1, [r4, #4]
 800cbbe:	4299      	cmp	r1, r3
 800cbc0:	bfde      	ittt	le
 800cbc2:	2330      	movle	r3, #48	; 0x30
 800cbc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cbcc:	1b52      	subs	r2, r2, r5
 800cbce:	6122      	str	r2, [r4, #16]
 800cbd0:	f8cd a000 	str.w	sl, [sp]
 800cbd4:	464b      	mov	r3, r9
 800cbd6:	aa03      	add	r2, sp, #12
 800cbd8:	4621      	mov	r1, r4
 800cbda:	4640      	mov	r0, r8
 800cbdc:	f7ff fee2 	bl	800c9a4 <_printf_common>
 800cbe0:	3001      	adds	r0, #1
 800cbe2:	d14c      	bne.n	800cc7e <_printf_i+0x1fe>
 800cbe4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbe8:	b004      	add	sp, #16
 800cbea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbee:	4835      	ldr	r0, [pc, #212]	; (800ccc4 <_printf_i+0x244>)
 800cbf0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cbf4:	6829      	ldr	r1, [r5, #0]
 800cbf6:	6823      	ldr	r3, [r4, #0]
 800cbf8:	f851 6b04 	ldr.w	r6, [r1], #4
 800cbfc:	6029      	str	r1, [r5, #0]
 800cbfe:	061d      	lsls	r5, r3, #24
 800cc00:	d514      	bpl.n	800cc2c <_printf_i+0x1ac>
 800cc02:	07df      	lsls	r7, r3, #31
 800cc04:	bf44      	itt	mi
 800cc06:	f043 0320 	orrmi.w	r3, r3, #32
 800cc0a:	6023      	strmi	r3, [r4, #0]
 800cc0c:	b91e      	cbnz	r6, 800cc16 <_printf_i+0x196>
 800cc0e:	6823      	ldr	r3, [r4, #0]
 800cc10:	f023 0320 	bic.w	r3, r3, #32
 800cc14:	6023      	str	r3, [r4, #0]
 800cc16:	2310      	movs	r3, #16
 800cc18:	e7b0      	b.n	800cb7c <_printf_i+0xfc>
 800cc1a:	6823      	ldr	r3, [r4, #0]
 800cc1c:	f043 0320 	orr.w	r3, r3, #32
 800cc20:	6023      	str	r3, [r4, #0]
 800cc22:	2378      	movs	r3, #120	; 0x78
 800cc24:	4828      	ldr	r0, [pc, #160]	; (800ccc8 <_printf_i+0x248>)
 800cc26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc2a:	e7e3      	b.n	800cbf4 <_printf_i+0x174>
 800cc2c:	0659      	lsls	r1, r3, #25
 800cc2e:	bf48      	it	mi
 800cc30:	b2b6      	uxthmi	r6, r6
 800cc32:	e7e6      	b.n	800cc02 <_printf_i+0x182>
 800cc34:	4615      	mov	r5, r2
 800cc36:	e7bb      	b.n	800cbb0 <_printf_i+0x130>
 800cc38:	682b      	ldr	r3, [r5, #0]
 800cc3a:	6826      	ldr	r6, [r4, #0]
 800cc3c:	6961      	ldr	r1, [r4, #20]
 800cc3e:	1d18      	adds	r0, r3, #4
 800cc40:	6028      	str	r0, [r5, #0]
 800cc42:	0635      	lsls	r5, r6, #24
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	d501      	bpl.n	800cc4c <_printf_i+0x1cc>
 800cc48:	6019      	str	r1, [r3, #0]
 800cc4a:	e002      	b.n	800cc52 <_printf_i+0x1d2>
 800cc4c:	0670      	lsls	r0, r6, #25
 800cc4e:	d5fb      	bpl.n	800cc48 <_printf_i+0x1c8>
 800cc50:	8019      	strh	r1, [r3, #0]
 800cc52:	2300      	movs	r3, #0
 800cc54:	6123      	str	r3, [r4, #16]
 800cc56:	4615      	mov	r5, r2
 800cc58:	e7ba      	b.n	800cbd0 <_printf_i+0x150>
 800cc5a:	682b      	ldr	r3, [r5, #0]
 800cc5c:	1d1a      	adds	r2, r3, #4
 800cc5e:	602a      	str	r2, [r5, #0]
 800cc60:	681d      	ldr	r5, [r3, #0]
 800cc62:	6862      	ldr	r2, [r4, #4]
 800cc64:	2100      	movs	r1, #0
 800cc66:	4628      	mov	r0, r5
 800cc68:	f7fb feba 	bl	80089e0 <memchr>
 800cc6c:	b108      	cbz	r0, 800cc72 <_printf_i+0x1f2>
 800cc6e:	1b40      	subs	r0, r0, r5
 800cc70:	6060      	str	r0, [r4, #4]
 800cc72:	6863      	ldr	r3, [r4, #4]
 800cc74:	6123      	str	r3, [r4, #16]
 800cc76:	2300      	movs	r3, #0
 800cc78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc7c:	e7a8      	b.n	800cbd0 <_printf_i+0x150>
 800cc7e:	6923      	ldr	r3, [r4, #16]
 800cc80:	462a      	mov	r2, r5
 800cc82:	4649      	mov	r1, r9
 800cc84:	4640      	mov	r0, r8
 800cc86:	47d0      	blx	sl
 800cc88:	3001      	adds	r0, #1
 800cc8a:	d0ab      	beq.n	800cbe4 <_printf_i+0x164>
 800cc8c:	6823      	ldr	r3, [r4, #0]
 800cc8e:	079b      	lsls	r3, r3, #30
 800cc90:	d413      	bmi.n	800ccba <_printf_i+0x23a>
 800cc92:	68e0      	ldr	r0, [r4, #12]
 800cc94:	9b03      	ldr	r3, [sp, #12]
 800cc96:	4298      	cmp	r0, r3
 800cc98:	bfb8      	it	lt
 800cc9a:	4618      	movlt	r0, r3
 800cc9c:	e7a4      	b.n	800cbe8 <_printf_i+0x168>
 800cc9e:	2301      	movs	r3, #1
 800cca0:	4632      	mov	r2, r6
 800cca2:	4649      	mov	r1, r9
 800cca4:	4640      	mov	r0, r8
 800cca6:	47d0      	blx	sl
 800cca8:	3001      	adds	r0, #1
 800ccaa:	d09b      	beq.n	800cbe4 <_printf_i+0x164>
 800ccac:	3501      	adds	r5, #1
 800ccae:	68e3      	ldr	r3, [r4, #12]
 800ccb0:	9903      	ldr	r1, [sp, #12]
 800ccb2:	1a5b      	subs	r3, r3, r1
 800ccb4:	42ab      	cmp	r3, r5
 800ccb6:	dcf2      	bgt.n	800cc9e <_printf_i+0x21e>
 800ccb8:	e7eb      	b.n	800cc92 <_printf_i+0x212>
 800ccba:	2500      	movs	r5, #0
 800ccbc:	f104 0619 	add.w	r6, r4, #25
 800ccc0:	e7f5      	b.n	800ccae <_printf_i+0x22e>
 800ccc2:	bf00      	nop
 800ccc4:	0800f276 	.word	0x0800f276
 800ccc8:	0800f287 	.word	0x0800f287

0800cccc <siprintf>:
 800cccc:	b40e      	push	{r1, r2, r3}
 800ccce:	b500      	push	{lr}
 800ccd0:	b09c      	sub	sp, #112	; 0x70
 800ccd2:	ab1d      	add	r3, sp, #116	; 0x74
 800ccd4:	9002      	str	r0, [sp, #8]
 800ccd6:	9006      	str	r0, [sp, #24]
 800ccd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ccdc:	4809      	ldr	r0, [pc, #36]	; (800cd04 <siprintf+0x38>)
 800ccde:	9107      	str	r1, [sp, #28]
 800cce0:	9104      	str	r1, [sp, #16]
 800cce2:	4909      	ldr	r1, [pc, #36]	; (800cd08 <siprintf+0x3c>)
 800cce4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cce8:	9105      	str	r1, [sp, #20]
 800ccea:	6800      	ldr	r0, [r0, #0]
 800ccec:	9301      	str	r3, [sp, #4]
 800ccee:	a902      	add	r1, sp, #8
 800ccf0:	f001 fb78 	bl	800e3e4 <_svfiprintf_r>
 800ccf4:	9b02      	ldr	r3, [sp, #8]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	701a      	strb	r2, [r3, #0]
 800ccfa:	b01c      	add	sp, #112	; 0x70
 800ccfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd00:	b003      	add	sp, #12
 800cd02:	4770      	bx	lr
 800cd04:	2000000c 	.word	0x2000000c
 800cd08:	ffff0208 	.word	0xffff0208

0800cd0c <quorem>:
 800cd0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd10:	6903      	ldr	r3, [r0, #16]
 800cd12:	690c      	ldr	r4, [r1, #16]
 800cd14:	42a3      	cmp	r3, r4
 800cd16:	4607      	mov	r7, r0
 800cd18:	f2c0 8081 	blt.w	800ce1e <quorem+0x112>
 800cd1c:	3c01      	subs	r4, #1
 800cd1e:	f101 0814 	add.w	r8, r1, #20
 800cd22:	f100 0514 	add.w	r5, r0, #20
 800cd26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd2a:	9301      	str	r3, [sp, #4]
 800cd2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cd30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd34:	3301      	adds	r3, #1
 800cd36:	429a      	cmp	r2, r3
 800cd38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cd3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cd40:	fbb2 f6f3 	udiv	r6, r2, r3
 800cd44:	d331      	bcc.n	800cdaa <quorem+0x9e>
 800cd46:	f04f 0e00 	mov.w	lr, #0
 800cd4a:	4640      	mov	r0, r8
 800cd4c:	46ac      	mov	ip, r5
 800cd4e:	46f2      	mov	sl, lr
 800cd50:	f850 2b04 	ldr.w	r2, [r0], #4
 800cd54:	b293      	uxth	r3, r2
 800cd56:	fb06 e303 	mla	r3, r6, r3, lr
 800cd5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	ebaa 0303 	sub.w	r3, sl, r3
 800cd64:	f8dc a000 	ldr.w	sl, [ip]
 800cd68:	0c12      	lsrs	r2, r2, #16
 800cd6a:	fa13 f38a 	uxtah	r3, r3, sl
 800cd6e:	fb06 e202 	mla	r2, r6, r2, lr
 800cd72:	9300      	str	r3, [sp, #0]
 800cd74:	9b00      	ldr	r3, [sp, #0]
 800cd76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cd7a:	b292      	uxth	r2, r2
 800cd7c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cd80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cd84:	f8bd 3000 	ldrh.w	r3, [sp]
 800cd88:	4581      	cmp	r9, r0
 800cd8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd8e:	f84c 3b04 	str.w	r3, [ip], #4
 800cd92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cd96:	d2db      	bcs.n	800cd50 <quorem+0x44>
 800cd98:	f855 300b 	ldr.w	r3, [r5, fp]
 800cd9c:	b92b      	cbnz	r3, 800cdaa <quorem+0x9e>
 800cd9e:	9b01      	ldr	r3, [sp, #4]
 800cda0:	3b04      	subs	r3, #4
 800cda2:	429d      	cmp	r5, r3
 800cda4:	461a      	mov	r2, r3
 800cda6:	d32e      	bcc.n	800ce06 <quorem+0xfa>
 800cda8:	613c      	str	r4, [r7, #16]
 800cdaa:	4638      	mov	r0, r7
 800cdac:	f001 f8c6 	bl	800df3c <__mcmp>
 800cdb0:	2800      	cmp	r0, #0
 800cdb2:	db24      	blt.n	800cdfe <quorem+0xf2>
 800cdb4:	3601      	adds	r6, #1
 800cdb6:	4628      	mov	r0, r5
 800cdb8:	f04f 0c00 	mov.w	ip, #0
 800cdbc:	f858 2b04 	ldr.w	r2, [r8], #4
 800cdc0:	f8d0 e000 	ldr.w	lr, [r0]
 800cdc4:	b293      	uxth	r3, r2
 800cdc6:	ebac 0303 	sub.w	r3, ip, r3
 800cdca:	0c12      	lsrs	r2, r2, #16
 800cdcc:	fa13 f38e 	uxtah	r3, r3, lr
 800cdd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cdd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cdd8:	b29b      	uxth	r3, r3
 800cdda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cdde:	45c1      	cmp	r9, r8
 800cde0:	f840 3b04 	str.w	r3, [r0], #4
 800cde4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cde8:	d2e8      	bcs.n	800cdbc <quorem+0xb0>
 800cdea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cdee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cdf2:	b922      	cbnz	r2, 800cdfe <quorem+0xf2>
 800cdf4:	3b04      	subs	r3, #4
 800cdf6:	429d      	cmp	r5, r3
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	d30a      	bcc.n	800ce12 <quorem+0x106>
 800cdfc:	613c      	str	r4, [r7, #16]
 800cdfe:	4630      	mov	r0, r6
 800ce00:	b003      	add	sp, #12
 800ce02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce06:	6812      	ldr	r2, [r2, #0]
 800ce08:	3b04      	subs	r3, #4
 800ce0a:	2a00      	cmp	r2, #0
 800ce0c:	d1cc      	bne.n	800cda8 <quorem+0x9c>
 800ce0e:	3c01      	subs	r4, #1
 800ce10:	e7c7      	b.n	800cda2 <quorem+0x96>
 800ce12:	6812      	ldr	r2, [r2, #0]
 800ce14:	3b04      	subs	r3, #4
 800ce16:	2a00      	cmp	r2, #0
 800ce18:	d1f0      	bne.n	800cdfc <quorem+0xf0>
 800ce1a:	3c01      	subs	r4, #1
 800ce1c:	e7eb      	b.n	800cdf6 <quorem+0xea>
 800ce1e:	2000      	movs	r0, #0
 800ce20:	e7ee      	b.n	800ce00 <quorem+0xf4>
 800ce22:	0000      	movs	r0, r0
 800ce24:	0000      	movs	r0, r0
	...

0800ce28 <_dtoa_r>:
 800ce28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce2c:	ed2d 8b04 	vpush	{d8-d9}
 800ce30:	ec57 6b10 	vmov	r6, r7, d0
 800ce34:	b093      	sub	sp, #76	; 0x4c
 800ce36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ce38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ce3c:	9106      	str	r1, [sp, #24]
 800ce3e:	ee10 aa10 	vmov	sl, s0
 800ce42:	4604      	mov	r4, r0
 800ce44:	9209      	str	r2, [sp, #36]	; 0x24
 800ce46:	930c      	str	r3, [sp, #48]	; 0x30
 800ce48:	46bb      	mov	fp, r7
 800ce4a:	b975      	cbnz	r5, 800ce6a <_dtoa_r+0x42>
 800ce4c:	2010      	movs	r0, #16
 800ce4e:	f000 fddd 	bl	800da0c <malloc>
 800ce52:	4602      	mov	r2, r0
 800ce54:	6260      	str	r0, [r4, #36]	; 0x24
 800ce56:	b920      	cbnz	r0, 800ce62 <_dtoa_r+0x3a>
 800ce58:	4ba7      	ldr	r3, [pc, #668]	; (800d0f8 <_dtoa_r+0x2d0>)
 800ce5a:	21ea      	movs	r1, #234	; 0xea
 800ce5c:	48a7      	ldr	r0, [pc, #668]	; (800d0fc <_dtoa_r+0x2d4>)
 800ce5e:	f001 fbd1 	bl	800e604 <__assert_func>
 800ce62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ce66:	6005      	str	r5, [r0, #0]
 800ce68:	60c5      	str	r5, [r0, #12]
 800ce6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce6c:	6819      	ldr	r1, [r3, #0]
 800ce6e:	b151      	cbz	r1, 800ce86 <_dtoa_r+0x5e>
 800ce70:	685a      	ldr	r2, [r3, #4]
 800ce72:	604a      	str	r2, [r1, #4]
 800ce74:	2301      	movs	r3, #1
 800ce76:	4093      	lsls	r3, r2
 800ce78:	608b      	str	r3, [r1, #8]
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	f000 fe1c 	bl	800dab8 <_Bfree>
 800ce80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce82:	2200      	movs	r2, #0
 800ce84:	601a      	str	r2, [r3, #0]
 800ce86:	1e3b      	subs	r3, r7, #0
 800ce88:	bfaa      	itet	ge
 800ce8a:	2300      	movge	r3, #0
 800ce8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ce90:	f8c8 3000 	strge.w	r3, [r8]
 800ce94:	4b9a      	ldr	r3, [pc, #616]	; (800d100 <_dtoa_r+0x2d8>)
 800ce96:	bfbc      	itt	lt
 800ce98:	2201      	movlt	r2, #1
 800ce9a:	f8c8 2000 	strlt.w	r2, [r8]
 800ce9e:	ea33 030b 	bics.w	r3, r3, fp
 800cea2:	d11b      	bne.n	800cedc <_dtoa_r+0xb4>
 800cea4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cea6:	f242 730f 	movw	r3, #9999	; 0x270f
 800ceaa:	6013      	str	r3, [r2, #0]
 800ceac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ceb0:	4333      	orrs	r3, r6
 800ceb2:	f000 8592 	beq.w	800d9da <_dtoa_r+0xbb2>
 800ceb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ceb8:	b963      	cbnz	r3, 800ced4 <_dtoa_r+0xac>
 800ceba:	4b92      	ldr	r3, [pc, #584]	; (800d104 <_dtoa_r+0x2dc>)
 800cebc:	e022      	b.n	800cf04 <_dtoa_r+0xdc>
 800cebe:	4b92      	ldr	r3, [pc, #584]	; (800d108 <_dtoa_r+0x2e0>)
 800cec0:	9301      	str	r3, [sp, #4]
 800cec2:	3308      	adds	r3, #8
 800cec4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cec6:	6013      	str	r3, [r2, #0]
 800cec8:	9801      	ldr	r0, [sp, #4]
 800ceca:	b013      	add	sp, #76	; 0x4c
 800cecc:	ecbd 8b04 	vpop	{d8-d9}
 800ced0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ced4:	4b8b      	ldr	r3, [pc, #556]	; (800d104 <_dtoa_r+0x2dc>)
 800ced6:	9301      	str	r3, [sp, #4]
 800ced8:	3303      	adds	r3, #3
 800ceda:	e7f3      	b.n	800cec4 <_dtoa_r+0x9c>
 800cedc:	2200      	movs	r2, #0
 800cede:	2300      	movs	r3, #0
 800cee0:	4650      	mov	r0, sl
 800cee2:	4659      	mov	r1, fp
 800cee4:	f7fc f9f0 	bl	80092c8 <__aeabi_dcmpeq>
 800cee8:	ec4b ab19 	vmov	d9, sl, fp
 800ceec:	4680      	mov	r8, r0
 800ceee:	b158      	cbz	r0, 800cf08 <_dtoa_r+0xe0>
 800cef0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cef2:	2301      	movs	r3, #1
 800cef4:	6013      	str	r3, [r2, #0]
 800cef6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	f000 856b 	beq.w	800d9d4 <_dtoa_r+0xbac>
 800cefe:	4883      	ldr	r0, [pc, #524]	; (800d10c <_dtoa_r+0x2e4>)
 800cf00:	6018      	str	r0, [r3, #0]
 800cf02:	1e43      	subs	r3, r0, #1
 800cf04:	9301      	str	r3, [sp, #4]
 800cf06:	e7df      	b.n	800cec8 <_dtoa_r+0xa0>
 800cf08:	ec4b ab10 	vmov	d0, sl, fp
 800cf0c:	aa10      	add	r2, sp, #64	; 0x40
 800cf0e:	a911      	add	r1, sp, #68	; 0x44
 800cf10:	4620      	mov	r0, r4
 800cf12:	f001 f8b9 	bl	800e088 <__d2b>
 800cf16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cf1a:	ee08 0a10 	vmov	s16, r0
 800cf1e:	2d00      	cmp	r5, #0
 800cf20:	f000 8084 	beq.w	800d02c <_dtoa_r+0x204>
 800cf24:	ee19 3a90 	vmov	r3, s19
 800cf28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cf30:	4656      	mov	r6, sl
 800cf32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cf36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cf3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cf3e:	4b74      	ldr	r3, [pc, #464]	; (800d110 <_dtoa_r+0x2e8>)
 800cf40:	2200      	movs	r2, #0
 800cf42:	4630      	mov	r0, r6
 800cf44:	4639      	mov	r1, r7
 800cf46:	f7fb fd9f 	bl	8008a88 <__aeabi_dsub>
 800cf4a:	a365      	add	r3, pc, #404	; (adr r3, 800d0e0 <_dtoa_r+0x2b8>)
 800cf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf50:	f7fb ff52 	bl	8008df8 <__aeabi_dmul>
 800cf54:	a364      	add	r3, pc, #400	; (adr r3, 800d0e8 <_dtoa_r+0x2c0>)
 800cf56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5a:	f7fb fd97 	bl	8008a8c <__adddf3>
 800cf5e:	4606      	mov	r6, r0
 800cf60:	4628      	mov	r0, r5
 800cf62:	460f      	mov	r7, r1
 800cf64:	f7fb fede 	bl	8008d24 <__aeabi_i2d>
 800cf68:	a361      	add	r3, pc, #388	; (adr r3, 800d0f0 <_dtoa_r+0x2c8>)
 800cf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6e:	f7fb ff43 	bl	8008df8 <__aeabi_dmul>
 800cf72:	4602      	mov	r2, r0
 800cf74:	460b      	mov	r3, r1
 800cf76:	4630      	mov	r0, r6
 800cf78:	4639      	mov	r1, r7
 800cf7a:	f7fb fd87 	bl	8008a8c <__adddf3>
 800cf7e:	4606      	mov	r6, r0
 800cf80:	460f      	mov	r7, r1
 800cf82:	f7fc f9e9 	bl	8009358 <__aeabi_d2iz>
 800cf86:	2200      	movs	r2, #0
 800cf88:	9000      	str	r0, [sp, #0]
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	4639      	mov	r1, r7
 800cf90:	f7fc f9a4 	bl	80092dc <__aeabi_dcmplt>
 800cf94:	b150      	cbz	r0, 800cfac <_dtoa_r+0x184>
 800cf96:	9800      	ldr	r0, [sp, #0]
 800cf98:	f7fb fec4 	bl	8008d24 <__aeabi_i2d>
 800cf9c:	4632      	mov	r2, r6
 800cf9e:	463b      	mov	r3, r7
 800cfa0:	f7fc f992 	bl	80092c8 <__aeabi_dcmpeq>
 800cfa4:	b910      	cbnz	r0, 800cfac <_dtoa_r+0x184>
 800cfa6:	9b00      	ldr	r3, [sp, #0]
 800cfa8:	3b01      	subs	r3, #1
 800cfaa:	9300      	str	r3, [sp, #0]
 800cfac:	9b00      	ldr	r3, [sp, #0]
 800cfae:	2b16      	cmp	r3, #22
 800cfb0:	d85a      	bhi.n	800d068 <_dtoa_r+0x240>
 800cfb2:	9a00      	ldr	r2, [sp, #0]
 800cfb4:	4b57      	ldr	r3, [pc, #348]	; (800d114 <_dtoa_r+0x2ec>)
 800cfb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfbe:	ec51 0b19 	vmov	r0, r1, d9
 800cfc2:	f7fc f98b 	bl	80092dc <__aeabi_dcmplt>
 800cfc6:	2800      	cmp	r0, #0
 800cfc8:	d050      	beq.n	800d06c <_dtoa_r+0x244>
 800cfca:	9b00      	ldr	r3, [sp, #0]
 800cfcc:	3b01      	subs	r3, #1
 800cfce:	9300      	str	r3, [sp, #0]
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	930b      	str	r3, [sp, #44]	; 0x2c
 800cfd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cfd6:	1b5d      	subs	r5, r3, r5
 800cfd8:	1e6b      	subs	r3, r5, #1
 800cfda:	9305      	str	r3, [sp, #20]
 800cfdc:	bf45      	ittet	mi
 800cfde:	f1c5 0301 	rsbmi	r3, r5, #1
 800cfe2:	9304      	strmi	r3, [sp, #16]
 800cfe4:	2300      	movpl	r3, #0
 800cfe6:	2300      	movmi	r3, #0
 800cfe8:	bf4c      	ite	mi
 800cfea:	9305      	strmi	r3, [sp, #20]
 800cfec:	9304      	strpl	r3, [sp, #16]
 800cfee:	9b00      	ldr	r3, [sp, #0]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	db3d      	blt.n	800d070 <_dtoa_r+0x248>
 800cff4:	9b05      	ldr	r3, [sp, #20]
 800cff6:	9a00      	ldr	r2, [sp, #0]
 800cff8:	920a      	str	r2, [sp, #40]	; 0x28
 800cffa:	4413      	add	r3, r2
 800cffc:	9305      	str	r3, [sp, #20]
 800cffe:	2300      	movs	r3, #0
 800d000:	9307      	str	r3, [sp, #28]
 800d002:	9b06      	ldr	r3, [sp, #24]
 800d004:	2b09      	cmp	r3, #9
 800d006:	f200 8089 	bhi.w	800d11c <_dtoa_r+0x2f4>
 800d00a:	2b05      	cmp	r3, #5
 800d00c:	bfc4      	itt	gt
 800d00e:	3b04      	subgt	r3, #4
 800d010:	9306      	strgt	r3, [sp, #24]
 800d012:	9b06      	ldr	r3, [sp, #24]
 800d014:	f1a3 0302 	sub.w	r3, r3, #2
 800d018:	bfcc      	ite	gt
 800d01a:	2500      	movgt	r5, #0
 800d01c:	2501      	movle	r5, #1
 800d01e:	2b03      	cmp	r3, #3
 800d020:	f200 8087 	bhi.w	800d132 <_dtoa_r+0x30a>
 800d024:	e8df f003 	tbb	[pc, r3]
 800d028:	59383a2d 	.word	0x59383a2d
 800d02c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d030:	441d      	add	r5, r3
 800d032:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d036:	2b20      	cmp	r3, #32
 800d038:	bfc1      	itttt	gt
 800d03a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d03e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d042:	fa0b f303 	lslgt.w	r3, fp, r3
 800d046:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d04a:	bfda      	itte	le
 800d04c:	f1c3 0320 	rsble	r3, r3, #32
 800d050:	fa06 f003 	lslle.w	r0, r6, r3
 800d054:	4318      	orrgt	r0, r3
 800d056:	f7fb fe55 	bl	8008d04 <__aeabi_ui2d>
 800d05a:	2301      	movs	r3, #1
 800d05c:	4606      	mov	r6, r0
 800d05e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d062:	3d01      	subs	r5, #1
 800d064:	930e      	str	r3, [sp, #56]	; 0x38
 800d066:	e76a      	b.n	800cf3e <_dtoa_r+0x116>
 800d068:	2301      	movs	r3, #1
 800d06a:	e7b2      	b.n	800cfd2 <_dtoa_r+0x1aa>
 800d06c:	900b      	str	r0, [sp, #44]	; 0x2c
 800d06e:	e7b1      	b.n	800cfd4 <_dtoa_r+0x1ac>
 800d070:	9b04      	ldr	r3, [sp, #16]
 800d072:	9a00      	ldr	r2, [sp, #0]
 800d074:	1a9b      	subs	r3, r3, r2
 800d076:	9304      	str	r3, [sp, #16]
 800d078:	4253      	negs	r3, r2
 800d07a:	9307      	str	r3, [sp, #28]
 800d07c:	2300      	movs	r3, #0
 800d07e:	930a      	str	r3, [sp, #40]	; 0x28
 800d080:	e7bf      	b.n	800d002 <_dtoa_r+0x1da>
 800d082:	2300      	movs	r3, #0
 800d084:	9308      	str	r3, [sp, #32]
 800d086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d088:	2b00      	cmp	r3, #0
 800d08a:	dc55      	bgt.n	800d138 <_dtoa_r+0x310>
 800d08c:	2301      	movs	r3, #1
 800d08e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d092:	461a      	mov	r2, r3
 800d094:	9209      	str	r2, [sp, #36]	; 0x24
 800d096:	e00c      	b.n	800d0b2 <_dtoa_r+0x28a>
 800d098:	2301      	movs	r3, #1
 800d09a:	e7f3      	b.n	800d084 <_dtoa_r+0x25c>
 800d09c:	2300      	movs	r3, #0
 800d09e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0a0:	9308      	str	r3, [sp, #32]
 800d0a2:	9b00      	ldr	r3, [sp, #0]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	9302      	str	r3, [sp, #8]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	9303      	str	r3, [sp, #12]
 800d0ae:	bfb8      	it	lt
 800d0b0:	2301      	movlt	r3, #1
 800d0b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	6042      	str	r2, [r0, #4]
 800d0b8:	2204      	movs	r2, #4
 800d0ba:	f102 0614 	add.w	r6, r2, #20
 800d0be:	429e      	cmp	r6, r3
 800d0c0:	6841      	ldr	r1, [r0, #4]
 800d0c2:	d93d      	bls.n	800d140 <_dtoa_r+0x318>
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	f000 fcb7 	bl	800da38 <_Balloc>
 800d0ca:	9001      	str	r0, [sp, #4]
 800d0cc:	2800      	cmp	r0, #0
 800d0ce:	d13b      	bne.n	800d148 <_dtoa_r+0x320>
 800d0d0:	4b11      	ldr	r3, [pc, #68]	; (800d118 <_dtoa_r+0x2f0>)
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d0d8:	e6c0      	b.n	800ce5c <_dtoa_r+0x34>
 800d0da:	2301      	movs	r3, #1
 800d0dc:	e7df      	b.n	800d09e <_dtoa_r+0x276>
 800d0de:	bf00      	nop
 800d0e0:	636f4361 	.word	0x636f4361
 800d0e4:	3fd287a7 	.word	0x3fd287a7
 800d0e8:	8b60c8b3 	.word	0x8b60c8b3
 800d0ec:	3fc68a28 	.word	0x3fc68a28
 800d0f0:	509f79fb 	.word	0x509f79fb
 800d0f4:	3fd34413 	.word	0x3fd34413
 800d0f8:	0800f2a5 	.word	0x0800f2a5
 800d0fc:	0800f2bc 	.word	0x0800f2bc
 800d100:	7ff00000 	.word	0x7ff00000
 800d104:	0800f2a1 	.word	0x0800f2a1
 800d108:	0800f298 	.word	0x0800f298
 800d10c:	0800f275 	.word	0x0800f275
 800d110:	3ff80000 	.word	0x3ff80000
 800d114:	0800f3b0 	.word	0x0800f3b0
 800d118:	0800f317 	.word	0x0800f317
 800d11c:	2501      	movs	r5, #1
 800d11e:	2300      	movs	r3, #0
 800d120:	9306      	str	r3, [sp, #24]
 800d122:	9508      	str	r5, [sp, #32]
 800d124:	f04f 33ff 	mov.w	r3, #4294967295
 800d128:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d12c:	2200      	movs	r2, #0
 800d12e:	2312      	movs	r3, #18
 800d130:	e7b0      	b.n	800d094 <_dtoa_r+0x26c>
 800d132:	2301      	movs	r3, #1
 800d134:	9308      	str	r3, [sp, #32]
 800d136:	e7f5      	b.n	800d124 <_dtoa_r+0x2fc>
 800d138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d13a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d13e:	e7b8      	b.n	800d0b2 <_dtoa_r+0x28a>
 800d140:	3101      	adds	r1, #1
 800d142:	6041      	str	r1, [r0, #4]
 800d144:	0052      	lsls	r2, r2, #1
 800d146:	e7b8      	b.n	800d0ba <_dtoa_r+0x292>
 800d148:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d14a:	9a01      	ldr	r2, [sp, #4]
 800d14c:	601a      	str	r2, [r3, #0]
 800d14e:	9b03      	ldr	r3, [sp, #12]
 800d150:	2b0e      	cmp	r3, #14
 800d152:	f200 809d 	bhi.w	800d290 <_dtoa_r+0x468>
 800d156:	2d00      	cmp	r5, #0
 800d158:	f000 809a 	beq.w	800d290 <_dtoa_r+0x468>
 800d15c:	9b00      	ldr	r3, [sp, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	dd32      	ble.n	800d1c8 <_dtoa_r+0x3a0>
 800d162:	4ab7      	ldr	r2, [pc, #732]	; (800d440 <_dtoa_r+0x618>)
 800d164:	f003 030f 	and.w	r3, r3, #15
 800d168:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d16c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d170:	9b00      	ldr	r3, [sp, #0]
 800d172:	05d8      	lsls	r0, r3, #23
 800d174:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d178:	d516      	bpl.n	800d1a8 <_dtoa_r+0x380>
 800d17a:	4bb2      	ldr	r3, [pc, #712]	; (800d444 <_dtoa_r+0x61c>)
 800d17c:	ec51 0b19 	vmov	r0, r1, d9
 800d180:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d184:	f7fb ff62 	bl	800904c <__aeabi_ddiv>
 800d188:	f007 070f 	and.w	r7, r7, #15
 800d18c:	4682      	mov	sl, r0
 800d18e:	468b      	mov	fp, r1
 800d190:	2503      	movs	r5, #3
 800d192:	4eac      	ldr	r6, [pc, #688]	; (800d444 <_dtoa_r+0x61c>)
 800d194:	b957      	cbnz	r7, 800d1ac <_dtoa_r+0x384>
 800d196:	4642      	mov	r2, r8
 800d198:	464b      	mov	r3, r9
 800d19a:	4650      	mov	r0, sl
 800d19c:	4659      	mov	r1, fp
 800d19e:	f7fb ff55 	bl	800904c <__aeabi_ddiv>
 800d1a2:	4682      	mov	sl, r0
 800d1a4:	468b      	mov	fp, r1
 800d1a6:	e028      	b.n	800d1fa <_dtoa_r+0x3d2>
 800d1a8:	2502      	movs	r5, #2
 800d1aa:	e7f2      	b.n	800d192 <_dtoa_r+0x36a>
 800d1ac:	07f9      	lsls	r1, r7, #31
 800d1ae:	d508      	bpl.n	800d1c2 <_dtoa_r+0x39a>
 800d1b0:	4640      	mov	r0, r8
 800d1b2:	4649      	mov	r1, r9
 800d1b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d1b8:	f7fb fe1e 	bl	8008df8 <__aeabi_dmul>
 800d1bc:	3501      	adds	r5, #1
 800d1be:	4680      	mov	r8, r0
 800d1c0:	4689      	mov	r9, r1
 800d1c2:	107f      	asrs	r7, r7, #1
 800d1c4:	3608      	adds	r6, #8
 800d1c6:	e7e5      	b.n	800d194 <_dtoa_r+0x36c>
 800d1c8:	f000 809b 	beq.w	800d302 <_dtoa_r+0x4da>
 800d1cc:	9b00      	ldr	r3, [sp, #0]
 800d1ce:	4f9d      	ldr	r7, [pc, #628]	; (800d444 <_dtoa_r+0x61c>)
 800d1d0:	425e      	negs	r6, r3
 800d1d2:	4b9b      	ldr	r3, [pc, #620]	; (800d440 <_dtoa_r+0x618>)
 800d1d4:	f006 020f 	and.w	r2, r6, #15
 800d1d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e0:	ec51 0b19 	vmov	r0, r1, d9
 800d1e4:	f7fb fe08 	bl	8008df8 <__aeabi_dmul>
 800d1e8:	1136      	asrs	r6, r6, #4
 800d1ea:	4682      	mov	sl, r0
 800d1ec:	468b      	mov	fp, r1
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	2502      	movs	r5, #2
 800d1f2:	2e00      	cmp	r6, #0
 800d1f4:	d17a      	bne.n	800d2ec <_dtoa_r+0x4c4>
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d1d3      	bne.n	800d1a2 <_dtoa_r+0x37a>
 800d1fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f000 8082 	beq.w	800d306 <_dtoa_r+0x4de>
 800d202:	4b91      	ldr	r3, [pc, #580]	; (800d448 <_dtoa_r+0x620>)
 800d204:	2200      	movs	r2, #0
 800d206:	4650      	mov	r0, sl
 800d208:	4659      	mov	r1, fp
 800d20a:	f7fc f867 	bl	80092dc <__aeabi_dcmplt>
 800d20e:	2800      	cmp	r0, #0
 800d210:	d079      	beq.n	800d306 <_dtoa_r+0x4de>
 800d212:	9b03      	ldr	r3, [sp, #12]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d076      	beq.n	800d306 <_dtoa_r+0x4de>
 800d218:	9b02      	ldr	r3, [sp, #8]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	dd36      	ble.n	800d28c <_dtoa_r+0x464>
 800d21e:	9b00      	ldr	r3, [sp, #0]
 800d220:	4650      	mov	r0, sl
 800d222:	4659      	mov	r1, fp
 800d224:	1e5f      	subs	r7, r3, #1
 800d226:	2200      	movs	r2, #0
 800d228:	4b88      	ldr	r3, [pc, #544]	; (800d44c <_dtoa_r+0x624>)
 800d22a:	f7fb fde5 	bl	8008df8 <__aeabi_dmul>
 800d22e:	9e02      	ldr	r6, [sp, #8]
 800d230:	4682      	mov	sl, r0
 800d232:	468b      	mov	fp, r1
 800d234:	3501      	adds	r5, #1
 800d236:	4628      	mov	r0, r5
 800d238:	f7fb fd74 	bl	8008d24 <__aeabi_i2d>
 800d23c:	4652      	mov	r2, sl
 800d23e:	465b      	mov	r3, fp
 800d240:	f7fb fdda 	bl	8008df8 <__aeabi_dmul>
 800d244:	4b82      	ldr	r3, [pc, #520]	; (800d450 <_dtoa_r+0x628>)
 800d246:	2200      	movs	r2, #0
 800d248:	f7fb fc20 	bl	8008a8c <__adddf3>
 800d24c:	46d0      	mov	r8, sl
 800d24e:	46d9      	mov	r9, fp
 800d250:	4682      	mov	sl, r0
 800d252:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d256:	2e00      	cmp	r6, #0
 800d258:	d158      	bne.n	800d30c <_dtoa_r+0x4e4>
 800d25a:	4b7e      	ldr	r3, [pc, #504]	; (800d454 <_dtoa_r+0x62c>)
 800d25c:	2200      	movs	r2, #0
 800d25e:	4640      	mov	r0, r8
 800d260:	4649      	mov	r1, r9
 800d262:	f7fb fc11 	bl	8008a88 <__aeabi_dsub>
 800d266:	4652      	mov	r2, sl
 800d268:	465b      	mov	r3, fp
 800d26a:	4680      	mov	r8, r0
 800d26c:	4689      	mov	r9, r1
 800d26e:	f7fc f853 	bl	8009318 <__aeabi_dcmpgt>
 800d272:	2800      	cmp	r0, #0
 800d274:	f040 8295 	bne.w	800d7a2 <_dtoa_r+0x97a>
 800d278:	4652      	mov	r2, sl
 800d27a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d27e:	4640      	mov	r0, r8
 800d280:	4649      	mov	r1, r9
 800d282:	f7fc f82b 	bl	80092dc <__aeabi_dcmplt>
 800d286:	2800      	cmp	r0, #0
 800d288:	f040 8289 	bne.w	800d79e <_dtoa_r+0x976>
 800d28c:	ec5b ab19 	vmov	sl, fp, d9
 800d290:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d292:	2b00      	cmp	r3, #0
 800d294:	f2c0 8148 	blt.w	800d528 <_dtoa_r+0x700>
 800d298:	9a00      	ldr	r2, [sp, #0]
 800d29a:	2a0e      	cmp	r2, #14
 800d29c:	f300 8144 	bgt.w	800d528 <_dtoa_r+0x700>
 800d2a0:	4b67      	ldr	r3, [pc, #412]	; (800d440 <_dtoa_r+0x618>)
 800d2a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d2a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d2aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	f280 80d5 	bge.w	800d45c <_dtoa_r+0x634>
 800d2b2:	9b03      	ldr	r3, [sp, #12]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	f300 80d1 	bgt.w	800d45c <_dtoa_r+0x634>
 800d2ba:	f040 826f 	bne.w	800d79c <_dtoa_r+0x974>
 800d2be:	4b65      	ldr	r3, [pc, #404]	; (800d454 <_dtoa_r+0x62c>)
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	4640      	mov	r0, r8
 800d2c4:	4649      	mov	r1, r9
 800d2c6:	f7fb fd97 	bl	8008df8 <__aeabi_dmul>
 800d2ca:	4652      	mov	r2, sl
 800d2cc:	465b      	mov	r3, fp
 800d2ce:	f7fc f819 	bl	8009304 <__aeabi_dcmpge>
 800d2d2:	9e03      	ldr	r6, [sp, #12]
 800d2d4:	4637      	mov	r7, r6
 800d2d6:	2800      	cmp	r0, #0
 800d2d8:	f040 8245 	bne.w	800d766 <_dtoa_r+0x93e>
 800d2dc:	9d01      	ldr	r5, [sp, #4]
 800d2de:	2331      	movs	r3, #49	; 0x31
 800d2e0:	f805 3b01 	strb.w	r3, [r5], #1
 800d2e4:	9b00      	ldr	r3, [sp, #0]
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	9300      	str	r3, [sp, #0]
 800d2ea:	e240      	b.n	800d76e <_dtoa_r+0x946>
 800d2ec:	07f2      	lsls	r2, r6, #31
 800d2ee:	d505      	bpl.n	800d2fc <_dtoa_r+0x4d4>
 800d2f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2f4:	f7fb fd80 	bl	8008df8 <__aeabi_dmul>
 800d2f8:	3501      	adds	r5, #1
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	1076      	asrs	r6, r6, #1
 800d2fe:	3708      	adds	r7, #8
 800d300:	e777      	b.n	800d1f2 <_dtoa_r+0x3ca>
 800d302:	2502      	movs	r5, #2
 800d304:	e779      	b.n	800d1fa <_dtoa_r+0x3d2>
 800d306:	9f00      	ldr	r7, [sp, #0]
 800d308:	9e03      	ldr	r6, [sp, #12]
 800d30a:	e794      	b.n	800d236 <_dtoa_r+0x40e>
 800d30c:	9901      	ldr	r1, [sp, #4]
 800d30e:	4b4c      	ldr	r3, [pc, #304]	; (800d440 <_dtoa_r+0x618>)
 800d310:	4431      	add	r1, r6
 800d312:	910d      	str	r1, [sp, #52]	; 0x34
 800d314:	9908      	ldr	r1, [sp, #32]
 800d316:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d31a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d31e:	2900      	cmp	r1, #0
 800d320:	d043      	beq.n	800d3aa <_dtoa_r+0x582>
 800d322:	494d      	ldr	r1, [pc, #308]	; (800d458 <_dtoa_r+0x630>)
 800d324:	2000      	movs	r0, #0
 800d326:	f7fb fe91 	bl	800904c <__aeabi_ddiv>
 800d32a:	4652      	mov	r2, sl
 800d32c:	465b      	mov	r3, fp
 800d32e:	f7fb fbab 	bl	8008a88 <__aeabi_dsub>
 800d332:	9d01      	ldr	r5, [sp, #4]
 800d334:	4682      	mov	sl, r0
 800d336:	468b      	mov	fp, r1
 800d338:	4649      	mov	r1, r9
 800d33a:	4640      	mov	r0, r8
 800d33c:	f7fc f80c 	bl	8009358 <__aeabi_d2iz>
 800d340:	4606      	mov	r6, r0
 800d342:	f7fb fcef 	bl	8008d24 <__aeabi_i2d>
 800d346:	4602      	mov	r2, r0
 800d348:	460b      	mov	r3, r1
 800d34a:	4640      	mov	r0, r8
 800d34c:	4649      	mov	r1, r9
 800d34e:	f7fb fb9b 	bl	8008a88 <__aeabi_dsub>
 800d352:	3630      	adds	r6, #48	; 0x30
 800d354:	f805 6b01 	strb.w	r6, [r5], #1
 800d358:	4652      	mov	r2, sl
 800d35a:	465b      	mov	r3, fp
 800d35c:	4680      	mov	r8, r0
 800d35e:	4689      	mov	r9, r1
 800d360:	f7fb ffbc 	bl	80092dc <__aeabi_dcmplt>
 800d364:	2800      	cmp	r0, #0
 800d366:	d163      	bne.n	800d430 <_dtoa_r+0x608>
 800d368:	4642      	mov	r2, r8
 800d36a:	464b      	mov	r3, r9
 800d36c:	4936      	ldr	r1, [pc, #216]	; (800d448 <_dtoa_r+0x620>)
 800d36e:	2000      	movs	r0, #0
 800d370:	f7fb fb8a 	bl	8008a88 <__aeabi_dsub>
 800d374:	4652      	mov	r2, sl
 800d376:	465b      	mov	r3, fp
 800d378:	f7fb ffb0 	bl	80092dc <__aeabi_dcmplt>
 800d37c:	2800      	cmp	r0, #0
 800d37e:	f040 80b5 	bne.w	800d4ec <_dtoa_r+0x6c4>
 800d382:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d384:	429d      	cmp	r5, r3
 800d386:	d081      	beq.n	800d28c <_dtoa_r+0x464>
 800d388:	4b30      	ldr	r3, [pc, #192]	; (800d44c <_dtoa_r+0x624>)
 800d38a:	2200      	movs	r2, #0
 800d38c:	4650      	mov	r0, sl
 800d38e:	4659      	mov	r1, fp
 800d390:	f7fb fd32 	bl	8008df8 <__aeabi_dmul>
 800d394:	4b2d      	ldr	r3, [pc, #180]	; (800d44c <_dtoa_r+0x624>)
 800d396:	4682      	mov	sl, r0
 800d398:	468b      	mov	fp, r1
 800d39a:	4640      	mov	r0, r8
 800d39c:	4649      	mov	r1, r9
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f7fb fd2a 	bl	8008df8 <__aeabi_dmul>
 800d3a4:	4680      	mov	r8, r0
 800d3a6:	4689      	mov	r9, r1
 800d3a8:	e7c6      	b.n	800d338 <_dtoa_r+0x510>
 800d3aa:	4650      	mov	r0, sl
 800d3ac:	4659      	mov	r1, fp
 800d3ae:	f7fb fd23 	bl	8008df8 <__aeabi_dmul>
 800d3b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d3b4:	9d01      	ldr	r5, [sp, #4]
 800d3b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3b8:	4682      	mov	sl, r0
 800d3ba:	468b      	mov	fp, r1
 800d3bc:	4649      	mov	r1, r9
 800d3be:	4640      	mov	r0, r8
 800d3c0:	f7fb ffca 	bl	8009358 <__aeabi_d2iz>
 800d3c4:	4606      	mov	r6, r0
 800d3c6:	f7fb fcad 	bl	8008d24 <__aeabi_i2d>
 800d3ca:	3630      	adds	r6, #48	; 0x30
 800d3cc:	4602      	mov	r2, r0
 800d3ce:	460b      	mov	r3, r1
 800d3d0:	4640      	mov	r0, r8
 800d3d2:	4649      	mov	r1, r9
 800d3d4:	f7fb fb58 	bl	8008a88 <__aeabi_dsub>
 800d3d8:	f805 6b01 	strb.w	r6, [r5], #1
 800d3dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d3de:	429d      	cmp	r5, r3
 800d3e0:	4680      	mov	r8, r0
 800d3e2:	4689      	mov	r9, r1
 800d3e4:	f04f 0200 	mov.w	r2, #0
 800d3e8:	d124      	bne.n	800d434 <_dtoa_r+0x60c>
 800d3ea:	4b1b      	ldr	r3, [pc, #108]	; (800d458 <_dtoa_r+0x630>)
 800d3ec:	4650      	mov	r0, sl
 800d3ee:	4659      	mov	r1, fp
 800d3f0:	f7fb fb4c 	bl	8008a8c <__adddf3>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	460b      	mov	r3, r1
 800d3f8:	4640      	mov	r0, r8
 800d3fa:	4649      	mov	r1, r9
 800d3fc:	f7fb ff8c 	bl	8009318 <__aeabi_dcmpgt>
 800d400:	2800      	cmp	r0, #0
 800d402:	d173      	bne.n	800d4ec <_dtoa_r+0x6c4>
 800d404:	4652      	mov	r2, sl
 800d406:	465b      	mov	r3, fp
 800d408:	4913      	ldr	r1, [pc, #76]	; (800d458 <_dtoa_r+0x630>)
 800d40a:	2000      	movs	r0, #0
 800d40c:	f7fb fb3c 	bl	8008a88 <__aeabi_dsub>
 800d410:	4602      	mov	r2, r0
 800d412:	460b      	mov	r3, r1
 800d414:	4640      	mov	r0, r8
 800d416:	4649      	mov	r1, r9
 800d418:	f7fb ff60 	bl	80092dc <__aeabi_dcmplt>
 800d41c:	2800      	cmp	r0, #0
 800d41e:	f43f af35 	beq.w	800d28c <_dtoa_r+0x464>
 800d422:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d424:	1e6b      	subs	r3, r5, #1
 800d426:	930f      	str	r3, [sp, #60]	; 0x3c
 800d428:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d42c:	2b30      	cmp	r3, #48	; 0x30
 800d42e:	d0f8      	beq.n	800d422 <_dtoa_r+0x5fa>
 800d430:	9700      	str	r7, [sp, #0]
 800d432:	e049      	b.n	800d4c8 <_dtoa_r+0x6a0>
 800d434:	4b05      	ldr	r3, [pc, #20]	; (800d44c <_dtoa_r+0x624>)
 800d436:	f7fb fcdf 	bl	8008df8 <__aeabi_dmul>
 800d43a:	4680      	mov	r8, r0
 800d43c:	4689      	mov	r9, r1
 800d43e:	e7bd      	b.n	800d3bc <_dtoa_r+0x594>
 800d440:	0800f3b0 	.word	0x0800f3b0
 800d444:	0800f388 	.word	0x0800f388
 800d448:	3ff00000 	.word	0x3ff00000
 800d44c:	40240000 	.word	0x40240000
 800d450:	401c0000 	.word	0x401c0000
 800d454:	40140000 	.word	0x40140000
 800d458:	3fe00000 	.word	0x3fe00000
 800d45c:	9d01      	ldr	r5, [sp, #4]
 800d45e:	4656      	mov	r6, sl
 800d460:	465f      	mov	r7, fp
 800d462:	4642      	mov	r2, r8
 800d464:	464b      	mov	r3, r9
 800d466:	4630      	mov	r0, r6
 800d468:	4639      	mov	r1, r7
 800d46a:	f7fb fdef 	bl	800904c <__aeabi_ddiv>
 800d46e:	f7fb ff73 	bl	8009358 <__aeabi_d2iz>
 800d472:	4682      	mov	sl, r0
 800d474:	f7fb fc56 	bl	8008d24 <__aeabi_i2d>
 800d478:	4642      	mov	r2, r8
 800d47a:	464b      	mov	r3, r9
 800d47c:	f7fb fcbc 	bl	8008df8 <__aeabi_dmul>
 800d480:	4602      	mov	r2, r0
 800d482:	460b      	mov	r3, r1
 800d484:	4630      	mov	r0, r6
 800d486:	4639      	mov	r1, r7
 800d488:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d48c:	f7fb fafc 	bl	8008a88 <__aeabi_dsub>
 800d490:	f805 6b01 	strb.w	r6, [r5], #1
 800d494:	9e01      	ldr	r6, [sp, #4]
 800d496:	9f03      	ldr	r7, [sp, #12]
 800d498:	1bae      	subs	r6, r5, r6
 800d49a:	42b7      	cmp	r7, r6
 800d49c:	4602      	mov	r2, r0
 800d49e:	460b      	mov	r3, r1
 800d4a0:	d135      	bne.n	800d50e <_dtoa_r+0x6e6>
 800d4a2:	f7fb faf3 	bl	8008a8c <__adddf3>
 800d4a6:	4642      	mov	r2, r8
 800d4a8:	464b      	mov	r3, r9
 800d4aa:	4606      	mov	r6, r0
 800d4ac:	460f      	mov	r7, r1
 800d4ae:	f7fb ff33 	bl	8009318 <__aeabi_dcmpgt>
 800d4b2:	b9d0      	cbnz	r0, 800d4ea <_dtoa_r+0x6c2>
 800d4b4:	4642      	mov	r2, r8
 800d4b6:	464b      	mov	r3, r9
 800d4b8:	4630      	mov	r0, r6
 800d4ba:	4639      	mov	r1, r7
 800d4bc:	f7fb ff04 	bl	80092c8 <__aeabi_dcmpeq>
 800d4c0:	b110      	cbz	r0, 800d4c8 <_dtoa_r+0x6a0>
 800d4c2:	f01a 0f01 	tst.w	sl, #1
 800d4c6:	d110      	bne.n	800d4ea <_dtoa_r+0x6c2>
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	ee18 1a10 	vmov	r1, s16
 800d4ce:	f000 faf3 	bl	800dab8 <_Bfree>
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	9800      	ldr	r0, [sp, #0]
 800d4d6:	702b      	strb	r3, [r5, #0]
 800d4d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4da:	3001      	adds	r0, #1
 800d4dc:	6018      	str	r0, [r3, #0]
 800d4de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	f43f acf1 	beq.w	800cec8 <_dtoa_r+0xa0>
 800d4e6:	601d      	str	r5, [r3, #0]
 800d4e8:	e4ee      	b.n	800cec8 <_dtoa_r+0xa0>
 800d4ea:	9f00      	ldr	r7, [sp, #0]
 800d4ec:	462b      	mov	r3, r5
 800d4ee:	461d      	mov	r5, r3
 800d4f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d4f4:	2a39      	cmp	r2, #57	; 0x39
 800d4f6:	d106      	bne.n	800d506 <_dtoa_r+0x6de>
 800d4f8:	9a01      	ldr	r2, [sp, #4]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d1f7      	bne.n	800d4ee <_dtoa_r+0x6c6>
 800d4fe:	9901      	ldr	r1, [sp, #4]
 800d500:	2230      	movs	r2, #48	; 0x30
 800d502:	3701      	adds	r7, #1
 800d504:	700a      	strb	r2, [r1, #0]
 800d506:	781a      	ldrb	r2, [r3, #0]
 800d508:	3201      	adds	r2, #1
 800d50a:	701a      	strb	r2, [r3, #0]
 800d50c:	e790      	b.n	800d430 <_dtoa_r+0x608>
 800d50e:	4ba6      	ldr	r3, [pc, #664]	; (800d7a8 <_dtoa_r+0x980>)
 800d510:	2200      	movs	r2, #0
 800d512:	f7fb fc71 	bl	8008df8 <__aeabi_dmul>
 800d516:	2200      	movs	r2, #0
 800d518:	2300      	movs	r3, #0
 800d51a:	4606      	mov	r6, r0
 800d51c:	460f      	mov	r7, r1
 800d51e:	f7fb fed3 	bl	80092c8 <__aeabi_dcmpeq>
 800d522:	2800      	cmp	r0, #0
 800d524:	d09d      	beq.n	800d462 <_dtoa_r+0x63a>
 800d526:	e7cf      	b.n	800d4c8 <_dtoa_r+0x6a0>
 800d528:	9a08      	ldr	r2, [sp, #32]
 800d52a:	2a00      	cmp	r2, #0
 800d52c:	f000 80d7 	beq.w	800d6de <_dtoa_r+0x8b6>
 800d530:	9a06      	ldr	r2, [sp, #24]
 800d532:	2a01      	cmp	r2, #1
 800d534:	f300 80ba 	bgt.w	800d6ac <_dtoa_r+0x884>
 800d538:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d53a:	2a00      	cmp	r2, #0
 800d53c:	f000 80b2 	beq.w	800d6a4 <_dtoa_r+0x87c>
 800d540:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d544:	9e07      	ldr	r6, [sp, #28]
 800d546:	9d04      	ldr	r5, [sp, #16]
 800d548:	9a04      	ldr	r2, [sp, #16]
 800d54a:	441a      	add	r2, r3
 800d54c:	9204      	str	r2, [sp, #16]
 800d54e:	9a05      	ldr	r2, [sp, #20]
 800d550:	2101      	movs	r1, #1
 800d552:	441a      	add	r2, r3
 800d554:	4620      	mov	r0, r4
 800d556:	9205      	str	r2, [sp, #20]
 800d558:	f000 fb66 	bl	800dc28 <__i2b>
 800d55c:	4607      	mov	r7, r0
 800d55e:	2d00      	cmp	r5, #0
 800d560:	dd0c      	ble.n	800d57c <_dtoa_r+0x754>
 800d562:	9b05      	ldr	r3, [sp, #20]
 800d564:	2b00      	cmp	r3, #0
 800d566:	dd09      	ble.n	800d57c <_dtoa_r+0x754>
 800d568:	42ab      	cmp	r3, r5
 800d56a:	9a04      	ldr	r2, [sp, #16]
 800d56c:	bfa8      	it	ge
 800d56e:	462b      	movge	r3, r5
 800d570:	1ad2      	subs	r2, r2, r3
 800d572:	9204      	str	r2, [sp, #16]
 800d574:	9a05      	ldr	r2, [sp, #20]
 800d576:	1aed      	subs	r5, r5, r3
 800d578:	1ad3      	subs	r3, r2, r3
 800d57a:	9305      	str	r3, [sp, #20]
 800d57c:	9b07      	ldr	r3, [sp, #28]
 800d57e:	b31b      	cbz	r3, 800d5c8 <_dtoa_r+0x7a0>
 800d580:	9b08      	ldr	r3, [sp, #32]
 800d582:	2b00      	cmp	r3, #0
 800d584:	f000 80af 	beq.w	800d6e6 <_dtoa_r+0x8be>
 800d588:	2e00      	cmp	r6, #0
 800d58a:	dd13      	ble.n	800d5b4 <_dtoa_r+0x78c>
 800d58c:	4639      	mov	r1, r7
 800d58e:	4632      	mov	r2, r6
 800d590:	4620      	mov	r0, r4
 800d592:	f000 fc09 	bl	800dda8 <__pow5mult>
 800d596:	ee18 2a10 	vmov	r2, s16
 800d59a:	4601      	mov	r1, r0
 800d59c:	4607      	mov	r7, r0
 800d59e:	4620      	mov	r0, r4
 800d5a0:	f000 fb58 	bl	800dc54 <__multiply>
 800d5a4:	ee18 1a10 	vmov	r1, s16
 800d5a8:	4680      	mov	r8, r0
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	f000 fa84 	bl	800dab8 <_Bfree>
 800d5b0:	ee08 8a10 	vmov	s16, r8
 800d5b4:	9b07      	ldr	r3, [sp, #28]
 800d5b6:	1b9a      	subs	r2, r3, r6
 800d5b8:	d006      	beq.n	800d5c8 <_dtoa_r+0x7a0>
 800d5ba:	ee18 1a10 	vmov	r1, s16
 800d5be:	4620      	mov	r0, r4
 800d5c0:	f000 fbf2 	bl	800dda8 <__pow5mult>
 800d5c4:	ee08 0a10 	vmov	s16, r0
 800d5c8:	2101      	movs	r1, #1
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	f000 fb2c 	bl	800dc28 <__i2b>
 800d5d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	4606      	mov	r6, r0
 800d5d6:	f340 8088 	ble.w	800d6ea <_dtoa_r+0x8c2>
 800d5da:	461a      	mov	r2, r3
 800d5dc:	4601      	mov	r1, r0
 800d5de:	4620      	mov	r0, r4
 800d5e0:	f000 fbe2 	bl	800dda8 <__pow5mult>
 800d5e4:	9b06      	ldr	r3, [sp, #24]
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	4606      	mov	r6, r0
 800d5ea:	f340 8081 	ble.w	800d6f0 <_dtoa_r+0x8c8>
 800d5ee:	f04f 0800 	mov.w	r8, #0
 800d5f2:	6933      	ldr	r3, [r6, #16]
 800d5f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d5f8:	6918      	ldr	r0, [r3, #16]
 800d5fa:	f000 fac5 	bl	800db88 <__hi0bits>
 800d5fe:	f1c0 0020 	rsb	r0, r0, #32
 800d602:	9b05      	ldr	r3, [sp, #20]
 800d604:	4418      	add	r0, r3
 800d606:	f010 001f 	ands.w	r0, r0, #31
 800d60a:	f000 8092 	beq.w	800d732 <_dtoa_r+0x90a>
 800d60e:	f1c0 0320 	rsb	r3, r0, #32
 800d612:	2b04      	cmp	r3, #4
 800d614:	f340 808a 	ble.w	800d72c <_dtoa_r+0x904>
 800d618:	f1c0 001c 	rsb	r0, r0, #28
 800d61c:	9b04      	ldr	r3, [sp, #16]
 800d61e:	4403      	add	r3, r0
 800d620:	9304      	str	r3, [sp, #16]
 800d622:	9b05      	ldr	r3, [sp, #20]
 800d624:	4403      	add	r3, r0
 800d626:	4405      	add	r5, r0
 800d628:	9305      	str	r3, [sp, #20]
 800d62a:	9b04      	ldr	r3, [sp, #16]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	dd07      	ble.n	800d640 <_dtoa_r+0x818>
 800d630:	ee18 1a10 	vmov	r1, s16
 800d634:	461a      	mov	r2, r3
 800d636:	4620      	mov	r0, r4
 800d638:	f000 fc10 	bl	800de5c <__lshift>
 800d63c:	ee08 0a10 	vmov	s16, r0
 800d640:	9b05      	ldr	r3, [sp, #20]
 800d642:	2b00      	cmp	r3, #0
 800d644:	dd05      	ble.n	800d652 <_dtoa_r+0x82a>
 800d646:	4631      	mov	r1, r6
 800d648:	461a      	mov	r2, r3
 800d64a:	4620      	mov	r0, r4
 800d64c:	f000 fc06 	bl	800de5c <__lshift>
 800d650:	4606      	mov	r6, r0
 800d652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d654:	2b00      	cmp	r3, #0
 800d656:	d06e      	beq.n	800d736 <_dtoa_r+0x90e>
 800d658:	ee18 0a10 	vmov	r0, s16
 800d65c:	4631      	mov	r1, r6
 800d65e:	f000 fc6d 	bl	800df3c <__mcmp>
 800d662:	2800      	cmp	r0, #0
 800d664:	da67      	bge.n	800d736 <_dtoa_r+0x90e>
 800d666:	9b00      	ldr	r3, [sp, #0]
 800d668:	3b01      	subs	r3, #1
 800d66a:	ee18 1a10 	vmov	r1, s16
 800d66e:	9300      	str	r3, [sp, #0]
 800d670:	220a      	movs	r2, #10
 800d672:	2300      	movs	r3, #0
 800d674:	4620      	mov	r0, r4
 800d676:	f000 fa41 	bl	800dafc <__multadd>
 800d67a:	9b08      	ldr	r3, [sp, #32]
 800d67c:	ee08 0a10 	vmov	s16, r0
 800d680:	2b00      	cmp	r3, #0
 800d682:	f000 81b1 	beq.w	800d9e8 <_dtoa_r+0xbc0>
 800d686:	2300      	movs	r3, #0
 800d688:	4639      	mov	r1, r7
 800d68a:	220a      	movs	r2, #10
 800d68c:	4620      	mov	r0, r4
 800d68e:	f000 fa35 	bl	800dafc <__multadd>
 800d692:	9b02      	ldr	r3, [sp, #8]
 800d694:	2b00      	cmp	r3, #0
 800d696:	4607      	mov	r7, r0
 800d698:	f300 808e 	bgt.w	800d7b8 <_dtoa_r+0x990>
 800d69c:	9b06      	ldr	r3, [sp, #24]
 800d69e:	2b02      	cmp	r3, #2
 800d6a0:	dc51      	bgt.n	800d746 <_dtoa_r+0x91e>
 800d6a2:	e089      	b.n	800d7b8 <_dtoa_r+0x990>
 800d6a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d6aa:	e74b      	b.n	800d544 <_dtoa_r+0x71c>
 800d6ac:	9b03      	ldr	r3, [sp, #12]
 800d6ae:	1e5e      	subs	r6, r3, #1
 800d6b0:	9b07      	ldr	r3, [sp, #28]
 800d6b2:	42b3      	cmp	r3, r6
 800d6b4:	bfbf      	itttt	lt
 800d6b6:	9b07      	ldrlt	r3, [sp, #28]
 800d6b8:	9607      	strlt	r6, [sp, #28]
 800d6ba:	1af2      	sublt	r2, r6, r3
 800d6bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d6be:	bfb6      	itet	lt
 800d6c0:	189b      	addlt	r3, r3, r2
 800d6c2:	1b9e      	subge	r6, r3, r6
 800d6c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d6c6:	9b03      	ldr	r3, [sp, #12]
 800d6c8:	bfb8      	it	lt
 800d6ca:	2600      	movlt	r6, #0
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	bfb7      	itett	lt
 800d6d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d6d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d6d8:	1a9d      	sublt	r5, r3, r2
 800d6da:	2300      	movlt	r3, #0
 800d6dc:	e734      	b.n	800d548 <_dtoa_r+0x720>
 800d6de:	9e07      	ldr	r6, [sp, #28]
 800d6e0:	9d04      	ldr	r5, [sp, #16]
 800d6e2:	9f08      	ldr	r7, [sp, #32]
 800d6e4:	e73b      	b.n	800d55e <_dtoa_r+0x736>
 800d6e6:	9a07      	ldr	r2, [sp, #28]
 800d6e8:	e767      	b.n	800d5ba <_dtoa_r+0x792>
 800d6ea:	9b06      	ldr	r3, [sp, #24]
 800d6ec:	2b01      	cmp	r3, #1
 800d6ee:	dc18      	bgt.n	800d722 <_dtoa_r+0x8fa>
 800d6f0:	f1ba 0f00 	cmp.w	sl, #0
 800d6f4:	d115      	bne.n	800d722 <_dtoa_r+0x8fa>
 800d6f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d6fa:	b993      	cbnz	r3, 800d722 <_dtoa_r+0x8fa>
 800d6fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d700:	0d1b      	lsrs	r3, r3, #20
 800d702:	051b      	lsls	r3, r3, #20
 800d704:	b183      	cbz	r3, 800d728 <_dtoa_r+0x900>
 800d706:	9b04      	ldr	r3, [sp, #16]
 800d708:	3301      	adds	r3, #1
 800d70a:	9304      	str	r3, [sp, #16]
 800d70c:	9b05      	ldr	r3, [sp, #20]
 800d70e:	3301      	adds	r3, #1
 800d710:	9305      	str	r3, [sp, #20]
 800d712:	f04f 0801 	mov.w	r8, #1
 800d716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d718:	2b00      	cmp	r3, #0
 800d71a:	f47f af6a 	bne.w	800d5f2 <_dtoa_r+0x7ca>
 800d71e:	2001      	movs	r0, #1
 800d720:	e76f      	b.n	800d602 <_dtoa_r+0x7da>
 800d722:	f04f 0800 	mov.w	r8, #0
 800d726:	e7f6      	b.n	800d716 <_dtoa_r+0x8ee>
 800d728:	4698      	mov	r8, r3
 800d72a:	e7f4      	b.n	800d716 <_dtoa_r+0x8ee>
 800d72c:	f43f af7d 	beq.w	800d62a <_dtoa_r+0x802>
 800d730:	4618      	mov	r0, r3
 800d732:	301c      	adds	r0, #28
 800d734:	e772      	b.n	800d61c <_dtoa_r+0x7f4>
 800d736:	9b03      	ldr	r3, [sp, #12]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	dc37      	bgt.n	800d7ac <_dtoa_r+0x984>
 800d73c:	9b06      	ldr	r3, [sp, #24]
 800d73e:	2b02      	cmp	r3, #2
 800d740:	dd34      	ble.n	800d7ac <_dtoa_r+0x984>
 800d742:	9b03      	ldr	r3, [sp, #12]
 800d744:	9302      	str	r3, [sp, #8]
 800d746:	9b02      	ldr	r3, [sp, #8]
 800d748:	b96b      	cbnz	r3, 800d766 <_dtoa_r+0x93e>
 800d74a:	4631      	mov	r1, r6
 800d74c:	2205      	movs	r2, #5
 800d74e:	4620      	mov	r0, r4
 800d750:	f000 f9d4 	bl	800dafc <__multadd>
 800d754:	4601      	mov	r1, r0
 800d756:	4606      	mov	r6, r0
 800d758:	ee18 0a10 	vmov	r0, s16
 800d75c:	f000 fbee 	bl	800df3c <__mcmp>
 800d760:	2800      	cmp	r0, #0
 800d762:	f73f adbb 	bgt.w	800d2dc <_dtoa_r+0x4b4>
 800d766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d768:	9d01      	ldr	r5, [sp, #4]
 800d76a:	43db      	mvns	r3, r3
 800d76c:	9300      	str	r3, [sp, #0]
 800d76e:	f04f 0800 	mov.w	r8, #0
 800d772:	4631      	mov	r1, r6
 800d774:	4620      	mov	r0, r4
 800d776:	f000 f99f 	bl	800dab8 <_Bfree>
 800d77a:	2f00      	cmp	r7, #0
 800d77c:	f43f aea4 	beq.w	800d4c8 <_dtoa_r+0x6a0>
 800d780:	f1b8 0f00 	cmp.w	r8, #0
 800d784:	d005      	beq.n	800d792 <_dtoa_r+0x96a>
 800d786:	45b8      	cmp	r8, r7
 800d788:	d003      	beq.n	800d792 <_dtoa_r+0x96a>
 800d78a:	4641      	mov	r1, r8
 800d78c:	4620      	mov	r0, r4
 800d78e:	f000 f993 	bl	800dab8 <_Bfree>
 800d792:	4639      	mov	r1, r7
 800d794:	4620      	mov	r0, r4
 800d796:	f000 f98f 	bl	800dab8 <_Bfree>
 800d79a:	e695      	b.n	800d4c8 <_dtoa_r+0x6a0>
 800d79c:	2600      	movs	r6, #0
 800d79e:	4637      	mov	r7, r6
 800d7a0:	e7e1      	b.n	800d766 <_dtoa_r+0x93e>
 800d7a2:	9700      	str	r7, [sp, #0]
 800d7a4:	4637      	mov	r7, r6
 800d7a6:	e599      	b.n	800d2dc <_dtoa_r+0x4b4>
 800d7a8:	40240000 	.word	0x40240000
 800d7ac:	9b08      	ldr	r3, [sp, #32]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	f000 80ca 	beq.w	800d948 <_dtoa_r+0xb20>
 800d7b4:	9b03      	ldr	r3, [sp, #12]
 800d7b6:	9302      	str	r3, [sp, #8]
 800d7b8:	2d00      	cmp	r5, #0
 800d7ba:	dd05      	ble.n	800d7c8 <_dtoa_r+0x9a0>
 800d7bc:	4639      	mov	r1, r7
 800d7be:	462a      	mov	r2, r5
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	f000 fb4b 	bl	800de5c <__lshift>
 800d7c6:	4607      	mov	r7, r0
 800d7c8:	f1b8 0f00 	cmp.w	r8, #0
 800d7cc:	d05b      	beq.n	800d886 <_dtoa_r+0xa5e>
 800d7ce:	6879      	ldr	r1, [r7, #4]
 800d7d0:	4620      	mov	r0, r4
 800d7d2:	f000 f931 	bl	800da38 <_Balloc>
 800d7d6:	4605      	mov	r5, r0
 800d7d8:	b928      	cbnz	r0, 800d7e6 <_dtoa_r+0x9be>
 800d7da:	4b87      	ldr	r3, [pc, #540]	; (800d9f8 <_dtoa_r+0xbd0>)
 800d7dc:	4602      	mov	r2, r0
 800d7de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d7e2:	f7ff bb3b 	b.w	800ce5c <_dtoa_r+0x34>
 800d7e6:	693a      	ldr	r2, [r7, #16]
 800d7e8:	3202      	adds	r2, #2
 800d7ea:	0092      	lsls	r2, r2, #2
 800d7ec:	f107 010c 	add.w	r1, r7, #12
 800d7f0:	300c      	adds	r0, #12
 800d7f2:	f000 f913 	bl	800da1c <memcpy>
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	4629      	mov	r1, r5
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	f000 fb2e 	bl	800de5c <__lshift>
 800d800:	9b01      	ldr	r3, [sp, #4]
 800d802:	f103 0901 	add.w	r9, r3, #1
 800d806:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d80a:	4413      	add	r3, r2
 800d80c:	9305      	str	r3, [sp, #20]
 800d80e:	f00a 0301 	and.w	r3, sl, #1
 800d812:	46b8      	mov	r8, r7
 800d814:	9304      	str	r3, [sp, #16]
 800d816:	4607      	mov	r7, r0
 800d818:	4631      	mov	r1, r6
 800d81a:	ee18 0a10 	vmov	r0, s16
 800d81e:	f7ff fa75 	bl	800cd0c <quorem>
 800d822:	4641      	mov	r1, r8
 800d824:	9002      	str	r0, [sp, #8]
 800d826:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d82a:	ee18 0a10 	vmov	r0, s16
 800d82e:	f000 fb85 	bl	800df3c <__mcmp>
 800d832:	463a      	mov	r2, r7
 800d834:	9003      	str	r0, [sp, #12]
 800d836:	4631      	mov	r1, r6
 800d838:	4620      	mov	r0, r4
 800d83a:	f000 fb9b 	bl	800df74 <__mdiff>
 800d83e:	68c2      	ldr	r2, [r0, #12]
 800d840:	f109 3bff 	add.w	fp, r9, #4294967295
 800d844:	4605      	mov	r5, r0
 800d846:	bb02      	cbnz	r2, 800d88a <_dtoa_r+0xa62>
 800d848:	4601      	mov	r1, r0
 800d84a:	ee18 0a10 	vmov	r0, s16
 800d84e:	f000 fb75 	bl	800df3c <__mcmp>
 800d852:	4602      	mov	r2, r0
 800d854:	4629      	mov	r1, r5
 800d856:	4620      	mov	r0, r4
 800d858:	9207      	str	r2, [sp, #28]
 800d85a:	f000 f92d 	bl	800dab8 <_Bfree>
 800d85e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d862:	ea43 0102 	orr.w	r1, r3, r2
 800d866:	9b04      	ldr	r3, [sp, #16]
 800d868:	430b      	orrs	r3, r1
 800d86a:	464d      	mov	r5, r9
 800d86c:	d10f      	bne.n	800d88e <_dtoa_r+0xa66>
 800d86e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d872:	d02a      	beq.n	800d8ca <_dtoa_r+0xaa2>
 800d874:	9b03      	ldr	r3, [sp, #12]
 800d876:	2b00      	cmp	r3, #0
 800d878:	dd02      	ble.n	800d880 <_dtoa_r+0xa58>
 800d87a:	9b02      	ldr	r3, [sp, #8]
 800d87c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d880:	f88b a000 	strb.w	sl, [fp]
 800d884:	e775      	b.n	800d772 <_dtoa_r+0x94a>
 800d886:	4638      	mov	r0, r7
 800d888:	e7ba      	b.n	800d800 <_dtoa_r+0x9d8>
 800d88a:	2201      	movs	r2, #1
 800d88c:	e7e2      	b.n	800d854 <_dtoa_r+0xa2c>
 800d88e:	9b03      	ldr	r3, [sp, #12]
 800d890:	2b00      	cmp	r3, #0
 800d892:	db04      	blt.n	800d89e <_dtoa_r+0xa76>
 800d894:	9906      	ldr	r1, [sp, #24]
 800d896:	430b      	orrs	r3, r1
 800d898:	9904      	ldr	r1, [sp, #16]
 800d89a:	430b      	orrs	r3, r1
 800d89c:	d122      	bne.n	800d8e4 <_dtoa_r+0xabc>
 800d89e:	2a00      	cmp	r2, #0
 800d8a0:	ddee      	ble.n	800d880 <_dtoa_r+0xa58>
 800d8a2:	ee18 1a10 	vmov	r1, s16
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	f000 fad7 	bl	800de5c <__lshift>
 800d8ae:	4631      	mov	r1, r6
 800d8b0:	ee08 0a10 	vmov	s16, r0
 800d8b4:	f000 fb42 	bl	800df3c <__mcmp>
 800d8b8:	2800      	cmp	r0, #0
 800d8ba:	dc03      	bgt.n	800d8c4 <_dtoa_r+0xa9c>
 800d8bc:	d1e0      	bne.n	800d880 <_dtoa_r+0xa58>
 800d8be:	f01a 0f01 	tst.w	sl, #1
 800d8c2:	d0dd      	beq.n	800d880 <_dtoa_r+0xa58>
 800d8c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d8c8:	d1d7      	bne.n	800d87a <_dtoa_r+0xa52>
 800d8ca:	2339      	movs	r3, #57	; 0x39
 800d8cc:	f88b 3000 	strb.w	r3, [fp]
 800d8d0:	462b      	mov	r3, r5
 800d8d2:	461d      	mov	r5, r3
 800d8d4:	3b01      	subs	r3, #1
 800d8d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d8da:	2a39      	cmp	r2, #57	; 0x39
 800d8dc:	d071      	beq.n	800d9c2 <_dtoa_r+0xb9a>
 800d8de:	3201      	adds	r2, #1
 800d8e0:	701a      	strb	r2, [r3, #0]
 800d8e2:	e746      	b.n	800d772 <_dtoa_r+0x94a>
 800d8e4:	2a00      	cmp	r2, #0
 800d8e6:	dd07      	ble.n	800d8f8 <_dtoa_r+0xad0>
 800d8e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d8ec:	d0ed      	beq.n	800d8ca <_dtoa_r+0xaa2>
 800d8ee:	f10a 0301 	add.w	r3, sl, #1
 800d8f2:	f88b 3000 	strb.w	r3, [fp]
 800d8f6:	e73c      	b.n	800d772 <_dtoa_r+0x94a>
 800d8f8:	9b05      	ldr	r3, [sp, #20]
 800d8fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d8fe:	4599      	cmp	r9, r3
 800d900:	d047      	beq.n	800d992 <_dtoa_r+0xb6a>
 800d902:	ee18 1a10 	vmov	r1, s16
 800d906:	2300      	movs	r3, #0
 800d908:	220a      	movs	r2, #10
 800d90a:	4620      	mov	r0, r4
 800d90c:	f000 f8f6 	bl	800dafc <__multadd>
 800d910:	45b8      	cmp	r8, r7
 800d912:	ee08 0a10 	vmov	s16, r0
 800d916:	f04f 0300 	mov.w	r3, #0
 800d91a:	f04f 020a 	mov.w	r2, #10
 800d91e:	4641      	mov	r1, r8
 800d920:	4620      	mov	r0, r4
 800d922:	d106      	bne.n	800d932 <_dtoa_r+0xb0a>
 800d924:	f000 f8ea 	bl	800dafc <__multadd>
 800d928:	4680      	mov	r8, r0
 800d92a:	4607      	mov	r7, r0
 800d92c:	f109 0901 	add.w	r9, r9, #1
 800d930:	e772      	b.n	800d818 <_dtoa_r+0x9f0>
 800d932:	f000 f8e3 	bl	800dafc <__multadd>
 800d936:	4639      	mov	r1, r7
 800d938:	4680      	mov	r8, r0
 800d93a:	2300      	movs	r3, #0
 800d93c:	220a      	movs	r2, #10
 800d93e:	4620      	mov	r0, r4
 800d940:	f000 f8dc 	bl	800dafc <__multadd>
 800d944:	4607      	mov	r7, r0
 800d946:	e7f1      	b.n	800d92c <_dtoa_r+0xb04>
 800d948:	9b03      	ldr	r3, [sp, #12]
 800d94a:	9302      	str	r3, [sp, #8]
 800d94c:	9d01      	ldr	r5, [sp, #4]
 800d94e:	ee18 0a10 	vmov	r0, s16
 800d952:	4631      	mov	r1, r6
 800d954:	f7ff f9da 	bl	800cd0c <quorem>
 800d958:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d95c:	9b01      	ldr	r3, [sp, #4]
 800d95e:	f805 ab01 	strb.w	sl, [r5], #1
 800d962:	1aea      	subs	r2, r5, r3
 800d964:	9b02      	ldr	r3, [sp, #8]
 800d966:	4293      	cmp	r3, r2
 800d968:	dd09      	ble.n	800d97e <_dtoa_r+0xb56>
 800d96a:	ee18 1a10 	vmov	r1, s16
 800d96e:	2300      	movs	r3, #0
 800d970:	220a      	movs	r2, #10
 800d972:	4620      	mov	r0, r4
 800d974:	f000 f8c2 	bl	800dafc <__multadd>
 800d978:	ee08 0a10 	vmov	s16, r0
 800d97c:	e7e7      	b.n	800d94e <_dtoa_r+0xb26>
 800d97e:	9b02      	ldr	r3, [sp, #8]
 800d980:	2b00      	cmp	r3, #0
 800d982:	bfc8      	it	gt
 800d984:	461d      	movgt	r5, r3
 800d986:	9b01      	ldr	r3, [sp, #4]
 800d988:	bfd8      	it	le
 800d98a:	2501      	movle	r5, #1
 800d98c:	441d      	add	r5, r3
 800d98e:	f04f 0800 	mov.w	r8, #0
 800d992:	ee18 1a10 	vmov	r1, s16
 800d996:	2201      	movs	r2, #1
 800d998:	4620      	mov	r0, r4
 800d99a:	f000 fa5f 	bl	800de5c <__lshift>
 800d99e:	4631      	mov	r1, r6
 800d9a0:	ee08 0a10 	vmov	s16, r0
 800d9a4:	f000 faca 	bl	800df3c <__mcmp>
 800d9a8:	2800      	cmp	r0, #0
 800d9aa:	dc91      	bgt.n	800d8d0 <_dtoa_r+0xaa8>
 800d9ac:	d102      	bne.n	800d9b4 <_dtoa_r+0xb8c>
 800d9ae:	f01a 0f01 	tst.w	sl, #1
 800d9b2:	d18d      	bne.n	800d8d0 <_dtoa_r+0xaa8>
 800d9b4:	462b      	mov	r3, r5
 800d9b6:	461d      	mov	r5, r3
 800d9b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d9bc:	2a30      	cmp	r2, #48	; 0x30
 800d9be:	d0fa      	beq.n	800d9b6 <_dtoa_r+0xb8e>
 800d9c0:	e6d7      	b.n	800d772 <_dtoa_r+0x94a>
 800d9c2:	9a01      	ldr	r2, [sp, #4]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d184      	bne.n	800d8d2 <_dtoa_r+0xaaa>
 800d9c8:	9b00      	ldr	r3, [sp, #0]
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	9300      	str	r3, [sp, #0]
 800d9ce:	2331      	movs	r3, #49	; 0x31
 800d9d0:	7013      	strb	r3, [r2, #0]
 800d9d2:	e6ce      	b.n	800d772 <_dtoa_r+0x94a>
 800d9d4:	4b09      	ldr	r3, [pc, #36]	; (800d9fc <_dtoa_r+0xbd4>)
 800d9d6:	f7ff ba95 	b.w	800cf04 <_dtoa_r+0xdc>
 800d9da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	f47f aa6e 	bne.w	800cebe <_dtoa_r+0x96>
 800d9e2:	4b07      	ldr	r3, [pc, #28]	; (800da00 <_dtoa_r+0xbd8>)
 800d9e4:	f7ff ba8e 	b.w	800cf04 <_dtoa_r+0xdc>
 800d9e8:	9b02      	ldr	r3, [sp, #8]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	dcae      	bgt.n	800d94c <_dtoa_r+0xb24>
 800d9ee:	9b06      	ldr	r3, [sp, #24]
 800d9f0:	2b02      	cmp	r3, #2
 800d9f2:	f73f aea8 	bgt.w	800d746 <_dtoa_r+0x91e>
 800d9f6:	e7a9      	b.n	800d94c <_dtoa_r+0xb24>
 800d9f8:	0800f317 	.word	0x0800f317
 800d9fc:	0800f274 	.word	0x0800f274
 800da00:	0800f298 	.word	0x0800f298

0800da04 <_localeconv_r>:
 800da04:	4800      	ldr	r0, [pc, #0]	; (800da08 <_localeconv_r+0x4>)
 800da06:	4770      	bx	lr
 800da08:	20000160 	.word	0x20000160

0800da0c <malloc>:
 800da0c:	4b02      	ldr	r3, [pc, #8]	; (800da18 <malloc+0xc>)
 800da0e:	4601      	mov	r1, r0
 800da10:	6818      	ldr	r0, [r3, #0]
 800da12:	f000 bc17 	b.w	800e244 <_malloc_r>
 800da16:	bf00      	nop
 800da18:	2000000c 	.word	0x2000000c

0800da1c <memcpy>:
 800da1c:	440a      	add	r2, r1
 800da1e:	4291      	cmp	r1, r2
 800da20:	f100 33ff 	add.w	r3, r0, #4294967295
 800da24:	d100      	bne.n	800da28 <memcpy+0xc>
 800da26:	4770      	bx	lr
 800da28:	b510      	push	{r4, lr}
 800da2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da32:	4291      	cmp	r1, r2
 800da34:	d1f9      	bne.n	800da2a <memcpy+0xe>
 800da36:	bd10      	pop	{r4, pc}

0800da38 <_Balloc>:
 800da38:	b570      	push	{r4, r5, r6, lr}
 800da3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800da3c:	4604      	mov	r4, r0
 800da3e:	460d      	mov	r5, r1
 800da40:	b976      	cbnz	r6, 800da60 <_Balloc+0x28>
 800da42:	2010      	movs	r0, #16
 800da44:	f7ff ffe2 	bl	800da0c <malloc>
 800da48:	4602      	mov	r2, r0
 800da4a:	6260      	str	r0, [r4, #36]	; 0x24
 800da4c:	b920      	cbnz	r0, 800da58 <_Balloc+0x20>
 800da4e:	4b18      	ldr	r3, [pc, #96]	; (800dab0 <_Balloc+0x78>)
 800da50:	4818      	ldr	r0, [pc, #96]	; (800dab4 <_Balloc+0x7c>)
 800da52:	2166      	movs	r1, #102	; 0x66
 800da54:	f000 fdd6 	bl	800e604 <__assert_func>
 800da58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da5c:	6006      	str	r6, [r0, #0]
 800da5e:	60c6      	str	r6, [r0, #12]
 800da60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800da62:	68f3      	ldr	r3, [r6, #12]
 800da64:	b183      	cbz	r3, 800da88 <_Balloc+0x50>
 800da66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da68:	68db      	ldr	r3, [r3, #12]
 800da6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800da6e:	b9b8      	cbnz	r0, 800daa0 <_Balloc+0x68>
 800da70:	2101      	movs	r1, #1
 800da72:	fa01 f605 	lsl.w	r6, r1, r5
 800da76:	1d72      	adds	r2, r6, #5
 800da78:	0092      	lsls	r2, r2, #2
 800da7a:	4620      	mov	r0, r4
 800da7c:	f000 fb60 	bl	800e140 <_calloc_r>
 800da80:	b160      	cbz	r0, 800da9c <_Balloc+0x64>
 800da82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800da86:	e00e      	b.n	800daa6 <_Balloc+0x6e>
 800da88:	2221      	movs	r2, #33	; 0x21
 800da8a:	2104      	movs	r1, #4
 800da8c:	4620      	mov	r0, r4
 800da8e:	f000 fb57 	bl	800e140 <_calloc_r>
 800da92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da94:	60f0      	str	r0, [r6, #12]
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d1e4      	bne.n	800da66 <_Balloc+0x2e>
 800da9c:	2000      	movs	r0, #0
 800da9e:	bd70      	pop	{r4, r5, r6, pc}
 800daa0:	6802      	ldr	r2, [r0, #0]
 800daa2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800daa6:	2300      	movs	r3, #0
 800daa8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800daac:	e7f7      	b.n	800da9e <_Balloc+0x66>
 800daae:	bf00      	nop
 800dab0:	0800f2a5 	.word	0x0800f2a5
 800dab4:	0800f328 	.word	0x0800f328

0800dab8 <_Bfree>:
 800dab8:	b570      	push	{r4, r5, r6, lr}
 800daba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dabc:	4605      	mov	r5, r0
 800dabe:	460c      	mov	r4, r1
 800dac0:	b976      	cbnz	r6, 800dae0 <_Bfree+0x28>
 800dac2:	2010      	movs	r0, #16
 800dac4:	f7ff ffa2 	bl	800da0c <malloc>
 800dac8:	4602      	mov	r2, r0
 800daca:	6268      	str	r0, [r5, #36]	; 0x24
 800dacc:	b920      	cbnz	r0, 800dad8 <_Bfree+0x20>
 800dace:	4b09      	ldr	r3, [pc, #36]	; (800daf4 <_Bfree+0x3c>)
 800dad0:	4809      	ldr	r0, [pc, #36]	; (800daf8 <_Bfree+0x40>)
 800dad2:	218a      	movs	r1, #138	; 0x8a
 800dad4:	f000 fd96 	bl	800e604 <__assert_func>
 800dad8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dadc:	6006      	str	r6, [r0, #0]
 800dade:	60c6      	str	r6, [r0, #12]
 800dae0:	b13c      	cbz	r4, 800daf2 <_Bfree+0x3a>
 800dae2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dae4:	6862      	ldr	r2, [r4, #4]
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800daec:	6021      	str	r1, [r4, #0]
 800daee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800daf2:	bd70      	pop	{r4, r5, r6, pc}
 800daf4:	0800f2a5 	.word	0x0800f2a5
 800daf8:	0800f328 	.word	0x0800f328

0800dafc <__multadd>:
 800dafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db00:	690d      	ldr	r5, [r1, #16]
 800db02:	4607      	mov	r7, r0
 800db04:	460c      	mov	r4, r1
 800db06:	461e      	mov	r6, r3
 800db08:	f101 0c14 	add.w	ip, r1, #20
 800db0c:	2000      	movs	r0, #0
 800db0e:	f8dc 3000 	ldr.w	r3, [ip]
 800db12:	b299      	uxth	r1, r3
 800db14:	fb02 6101 	mla	r1, r2, r1, r6
 800db18:	0c1e      	lsrs	r6, r3, #16
 800db1a:	0c0b      	lsrs	r3, r1, #16
 800db1c:	fb02 3306 	mla	r3, r2, r6, r3
 800db20:	b289      	uxth	r1, r1
 800db22:	3001      	adds	r0, #1
 800db24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800db28:	4285      	cmp	r5, r0
 800db2a:	f84c 1b04 	str.w	r1, [ip], #4
 800db2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800db32:	dcec      	bgt.n	800db0e <__multadd+0x12>
 800db34:	b30e      	cbz	r6, 800db7a <__multadd+0x7e>
 800db36:	68a3      	ldr	r3, [r4, #8]
 800db38:	42ab      	cmp	r3, r5
 800db3a:	dc19      	bgt.n	800db70 <__multadd+0x74>
 800db3c:	6861      	ldr	r1, [r4, #4]
 800db3e:	4638      	mov	r0, r7
 800db40:	3101      	adds	r1, #1
 800db42:	f7ff ff79 	bl	800da38 <_Balloc>
 800db46:	4680      	mov	r8, r0
 800db48:	b928      	cbnz	r0, 800db56 <__multadd+0x5a>
 800db4a:	4602      	mov	r2, r0
 800db4c:	4b0c      	ldr	r3, [pc, #48]	; (800db80 <__multadd+0x84>)
 800db4e:	480d      	ldr	r0, [pc, #52]	; (800db84 <__multadd+0x88>)
 800db50:	21b5      	movs	r1, #181	; 0xb5
 800db52:	f000 fd57 	bl	800e604 <__assert_func>
 800db56:	6922      	ldr	r2, [r4, #16]
 800db58:	3202      	adds	r2, #2
 800db5a:	f104 010c 	add.w	r1, r4, #12
 800db5e:	0092      	lsls	r2, r2, #2
 800db60:	300c      	adds	r0, #12
 800db62:	f7ff ff5b 	bl	800da1c <memcpy>
 800db66:	4621      	mov	r1, r4
 800db68:	4638      	mov	r0, r7
 800db6a:	f7ff ffa5 	bl	800dab8 <_Bfree>
 800db6e:	4644      	mov	r4, r8
 800db70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800db74:	3501      	adds	r5, #1
 800db76:	615e      	str	r6, [r3, #20]
 800db78:	6125      	str	r5, [r4, #16]
 800db7a:	4620      	mov	r0, r4
 800db7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db80:	0800f317 	.word	0x0800f317
 800db84:	0800f328 	.word	0x0800f328

0800db88 <__hi0bits>:
 800db88:	0c03      	lsrs	r3, r0, #16
 800db8a:	041b      	lsls	r3, r3, #16
 800db8c:	b9d3      	cbnz	r3, 800dbc4 <__hi0bits+0x3c>
 800db8e:	0400      	lsls	r0, r0, #16
 800db90:	2310      	movs	r3, #16
 800db92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800db96:	bf04      	itt	eq
 800db98:	0200      	lsleq	r0, r0, #8
 800db9a:	3308      	addeq	r3, #8
 800db9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dba0:	bf04      	itt	eq
 800dba2:	0100      	lsleq	r0, r0, #4
 800dba4:	3304      	addeq	r3, #4
 800dba6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dbaa:	bf04      	itt	eq
 800dbac:	0080      	lsleq	r0, r0, #2
 800dbae:	3302      	addeq	r3, #2
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	db05      	blt.n	800dbc0 <__hi0bits+0x38>
 800dbb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dbb8:	f103 0301 	add.w	r3, r3, #1
 800dbbc:	bf08      	it	eq
 800dbbe:	2320      	moveq	r3, #32
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	4770      	bx	lr
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	e7e4      	b.n	800db92 <__hi0bits+0xa>

0800dbc8 <__lo0bits>:
 800dbc8:	6803      	ldr	r3, [r0, #0]
 800dbca:	f013 0207 	ands.w	r2, r3, #7
 800dbce:	4601      	mov	r1, r0
 800dbd0:	d00b      	beq.n	800dbea <__lo0bits+0x22>
 800dbd2:	07da      	lsls	r2, r3, #31
 800dbd4:	d423      	bmi.n	800dc1e <__lo0bits+0x56>
 800dbd6:	0798      	lsls	r0, r3, #30
 800dbd8:	bf49      	itett	mi
 800dbda:	085b      	lsrmi	r3, r3, #1
 800dbdc:	089b      	lsrpl	r3, r3, #2
 800dbde:	2001      	movmi	r0, #1
 800dbe0:	600b      	strmi	r3, [r1, #0]
 800dbe2:	bf5c      	itt	pl
 800dbe4:	600b      	strpl	r3, [r1, #0]
 800dbe6:	2002      	movpl	r0, #2
 800dbe8:	4770      	bx	lr
 800dbea:	b298      	uxth	r0, r3
 800dbec:	b9a8      	cbnz	r0, 800dc1a <__lo0bits+0x52>
 800dbee:	0c1b      	lsrs	r3, r3, #16
 800dbf0:	2010      	movs	r0, #16
 800dbf2:	b2da      	uxtb	r2, r3
 800dbf4:	b90a      	cbnz	r2, 800dbfa <__lo0bits+0x32>
 800dbf6:	3008      	adds	r0, #8
 800dbf8:	0a1b      	lsrs	r3, r3, #8
 800dbfa:	071a      	lsls	r2, r3, #28
 800dbfc:	bf04      	itt	eq
 800dbfe:	091b      	lsreq	r3, r3, #4
 800dc00:	3004      	addeq	r0, #4
 800dc02:	079a      	lsls	r2, r3, #30
 800dc04:	bf04      	itt	eq
 800dc06:	089b      	lsreq	r3, r3, #2
 800dc08:	3002      	addeq	r0, #2
 800dc0a:	07da      	lsls	r2, r3, #31
 800dc0c:	d403      	bmi.n	800dc16 <__lo0bits+0x4e>
 800dc0e:	085b      	lsrs	r3, r3, #1
 800dc10:	f100 0001 	add.w	r0, r0, #1
 800dc14:	d005      	beq.n	800dc22 <__lo0bits+0x5a>
 800dc16:	600b      	str	r3, [r1, #0]
 800dc18:	4770      	bx	lr
 800dc1a:	4610      	mov	r0, r2
 800dc1c:	e7e9      	b.n	800dbf2 <__lo0bits+0x2a>
 800dc1e:	2000      	movs	r0, #0
 800dc20:	4770      	bx	lr
 800dc22:	2020      	movs	r0, #32
 800dc24:	4770      	bx	lr
	...

0800dc28 <__i2b>:
 800dc28:	b510      	push	{r4, lr}
 800dc2a:	460c      	mov	r4, r1
 800dc2c:	2101      	movs	r1, #1
 800dc2e:	f7ff ff03 	bl	800da38 <_Balloc>
 800dc32:	4602      	mov	r2, r0
 800dc34:	b928      	cbnz	r0, 800dc42 <__i2b+0x1a>
 800dc36:	4b05      	ldr	r3, [pc, #20]	; (800dc4c <__i2b+0x24>)
 800dc38:	4805      	ldr	r0, [pc, #20]	; (800dc50 <__i2b+0x28>)
 800dc3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dc3e:	f000 fce1 	bl	800e604 <__assert_func>
 800dc42:	2301      	movs	r3, #1
 800dc44:	6144      	str	r4, [r0, #20]
 800dc46:	6103      	str	r3, [r0, #16]
 800dc48:	bd10      	pop	{r4, pc}
 800dc4a:	bf00      	nop
 800dc4c:	0800f317 	.word	0x0800f317
 800dc50:	0800f328 	.word	0x0800f328

0800dc54 <__multiply>:
 800dc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc58:	4691      	mov	r9, r2
 800dc5a:	690a      	ldr	r2, [r1, #16]
 800dc5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc60:	429a      	cmp	r2, r3
 800dc62:	bfb8      	it	lt
 800dc64:	460b      	movlt	r3, r1
 800dc66:	460c      	mov	r4, r1
 800dc68:	bfbc      	itt	lt
 800dc6a:	464c      	movlt	r4, r9
 800dc6c:	4699      	movlt	r9, r3
 800dc6e:	6927      	ldr	r7, [r4, #16]
 800dc70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dc74:	68a3      	ldr	r3, [r4, #8]
 800dc76:	6861      	ldr	r1, [r4, #4]
 800dc78:	eb07 060a 	add.w	r6, r7, sl
 800dc7c:	42b3      	cmp	r3, r6
 800dc7e:	b085      	sub	sp, #20
 800dc80:	bfb8      	it	lt
 800dc82:	3101      	addlt	r1, #1
 800dc84:	f7ff fed8 	bl	800da38 <_Balloc>
 800dc88:	b930      	cbnz	r0, 800dc98 <__multiply+0x44>
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	4b44      	ldr	r3, [pc, #272]	; (800dda0 <__multiply+0x14c>)
 800dc8e:	4845      	ldr	r0, [pc, #276]	; (800dda4 <__multiply+0x150>)
 800dc90:	f240 115d 	movw	r1, #349	; 0x15d
 800dc94:	f000 fcb6 	bl	800e604 <__assert_func>
 800dc98:	f100 0514 	add.w	r5, r0, #20
 800dc9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dca0:	462b      	mov	r3, r5
 800dca2:	2200      	movs	r2, #0
 800dca4:	4543      	cmp	r3, r8
 800dca6:	d321      	bcc.n	800dcec <__multiply+0x98>
 800dca8:	f104 0314 	add.w	r3, r4, #20
 800dcac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dcb0:	f109 0314 	add.w	r3, r9, #20
 800dcb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dcb8:	9202      	str	r2, [sp, #8]
 800dcba:	1b3a      	subs	r2, r7, r4
 800dcbc:	3a15      	subs	r2, #21
 800dcbe:	f022 0203 	bic.w	r2, r2, #3
 800dcc2:	3204      	adds	r2, #4
 800dcc4:	f104 0115 	add.w	r1, r4, #21
 800dcc8:	428f      	cmp	r7, r1
 800dcca:	bf38      	it	cc
 800dccc:	2204      	movcc	r2, #4
 800dcce:	9201      	str	r2, [sp, #4]
 800dcd0:	9a02      	ldr	r2, [sp, #8]
 800dcd2:	9303      	str	r3, [sp, #12]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d80c      	bhi.n	800dcf2 <__multiply+0x9e>
 800dcd8:	2e00      	cmp	r6, #0
 800dcda:	dd03      	ble.n	800dce4 <__multiply+0x90>
 800dcdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d05a      	beq.n	800dd9a <__multiply+0x146>
 800dce4:	6106      	str	r6, [r0, #16]
 800dce6:	b005      	add	sp, #20
 800dce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcec:	f843 2b04 	str.w	r2, [r3], #4
 800dcf0:	e7d8      	b.n	800dca4 <__multiply+0x50>
 800dcf2:	f8b3 a000 	ldrh.w	sl, [r3]
 800dcf6:	f1ba 0f00 	cmp.w	sl, #0
 800dcfa:	d024      	beq.n	800dd46 <__multiply+0xf2>
 800dcfc:	f104 0e14 	add.w	lr, r4, #20
 800dd00:	46a9      	mov	r9, r5
 800dd02:	f04f 0c00 	mov.w	ip, #0
 800dd06:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dd0a:	f8d9 1000 	ldr.w	r1, [r9]
 800dd0e:	fa1f fb82 	uxth.w	fp, r2
 800dd12:	b289      	uxth	r1, r1
 800dd14:	fb0a 110b 	mla	r1, sl, fp, r1
 800dd18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dd1c:	f8d9 2000 	ldr.w	r2, [r9]
 800dd20:	4461      	add	r1, ip
 800dd22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dd26:	fb0a c20b 	mla	r2, sl, fp, ip
 800dd2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dd2e:	b289      	uxth	r1, r1
 800dd30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dd34:	4577      	cmp	r7, lr
 800dd36:	f849 1b04 	str.w	r1, [r9], #4
 800dd3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dd3e:	d8e2      	bhi.n	800dd06 <__multiply+0xb2>
 800dd40:	9a01      	ldr	r2, [sp, #4]
 800dd42:	f845 c002 	str.w	ip, [r5, r2]
 800dd46:	9a03      	ldr	r2, [sp, #12]
 800dd48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dd4c:	3304      	adds	r3, #4
 800dd4e:	f1b9 0f00 	cmp.w	r9, #0
 800dd52:	d020      	beq.n	800dd96 <__multiply+0x142>
 800dd54:	6829      	ldr	r1, [r5, #0]
 800dd56:	f104 0c14 	add.w	ip, r4, #20
 800dd5a:	46ae      	mov	lr, r5
 800dd5c:	f04f 0a00 	mov.w	sl, #0
 800dd60:	f8bc b000 	ldrh.w	fp, [ip]
 800dd64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dd68:	fb09 220b 	mla	r2, r9, fp, r2
 800dd6c:	4492      	add	sl, r2
 800dd6e:	b289      	uxth	r1, r1
 800dd70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dd74:	f84e 1b04 	str.w	r1, [lr], #4
 800dd78:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dd7c:	f8be 1000 	ldrh.w	r1, [lr]
 800dd80:	0c12      	lsrs	r2, r2, #16
 800dd82:	fb09 1102 	mla	r1, r9, r2, r1
 800dd86:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dd8a:	4567      	cmp	r7, ip
 800dd8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dd90:	d8e6      	bhi.n	800dd60 <__multiply+0x10c>
 800dd92:	9a01      	ldr	r2, [sp, #4]
 800dd94:	50a9      	str	r1, [r5, r2]
 800dd96:	3504      	adds	r5, #4
 800dd98:	e79a      	b.n	800dcd0 <__multiply+0x7c>
 800dd9a:	3e01      	subs	r6, #1
 800dd9c:	e79c      	b.n	800dcd8 <__multiply+0x84>
 800dd9e:	bf00      	nop
 800dda0:	0800f317 	.word	0x0800f317
 800dda4:	0800f328 	.word	0x0800f328

0800dda8 <__pow5mult>:
 800dda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddac:	4615      	mov	r5, r2
 800ddae:	f012 0203 	ands.w	r2, r2, #3
 800ddb2:	4606      	mov	r6, r0
 800ddb4:	460f      	mov	r7, r1
 800ddb6:	d007      	beq.n	800ddc8 <__pow5mult+0x20>
 800ddb8:	4c25      	ldr	r4, [pc, #148]	; (800de50 <__pow5mult+0xa8>)
 800ddba:	3a01      	subs	r2, #1
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ddc2:	f7ff fe9b 	bl	800dafc <__multadd>
 800ddc6:	4607      	mov	r7, r0
 800ddc8:	10ad      	asrs	r5, r5, #2
 800ddca:	d03d      	beq.n	800de48 <__pow5mult+0xa0>
 800ddcc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ddce:	b97c      	cbnz	r4, 800ddf0 <__pow5mult+0x48>
 800ddd0:	2010      	movs	r0, #16
 800ddd2:	f7ff fe1b 	bl	800da0c <malloc>
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	6270      	str	r0, [r6, #36]	; 0x24
 800ddda:	b928      	cbnz	r0, 800dde8 <__pow5mult+0x40>
 800dddc:	4b1d      	ldr	r3, [pc, #116]	; (800de54 <__pow5mult+0xac>)
 800ddde:	481e      	ldr	r0, [pc, #120]	; (800de58 <__pow5mult+0xb0>)
 800dde0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dde4:	f000 fc0e 	bl	800e604 <__assert_func>
 800dde8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ddec:	6004      	str	r4, [r0, #0]
 800ddee:	60c4      	str	r4, [r0, #12]
 800ddf0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ddf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ddf8:	b94c      	cbnz	r4, 800de0e <__pow5mult+0x66>
 800ddfa:	f240 2171 	movw	r1, #625	; 0x271
 800ddfe:	4630      	mov	r0, r6
 800de00:	f7ff ff12 	bl	800dc28 <__i2b>
 800de04:	2300      	movs	r3, #0
 800de06:	f8c8 0008 	str.w	r0, [r8, #8]
 800de0a:	4604      	mov	r4, r0
 800de0c:	6003      	str	r3, [r0, #0]
 800de0e:	f04f 0900 	mov.w	r9, #0
 800de12:	07eb      	lsls	r3, r5, #31
 800de14:	d50a      	bpl.n	800de2c <__pow5mult+0x84>
 800de16:	4639      	mov	r1, r7
 800de18:	4622      	mov	r2, r4
 800de1a:	4630      	mov	r0, r6
 800de1c:	f7ff ff1a 	bl	800dc54 <__multiply>
 800de20:	4639      	mov	r1, r7
 800de22:	4680      	mov	r8, r0
 800de24:	4630      	mov	r0, r6
 800de26:	f7ff fe47 	bl	800dab8 <_Bfree>
 800de2a:	4647      	mov	r7, r8
 800de2c:	106d      	asrs	r5, r5, #1
 800de2e:	d00b      	beq.n	800de48 <__pow5mult+0xa0>
 800de30:	6820      	ldr	r0, [r4, #0]
 800de32:	b938      	cbnz	r0, 800de44 <__pow5mult+0x9c>
 800de34:	4622      	mov	r2, r4
 800de36:	4621      	mov	r1, r4
 800de38:	4630      	mov	r0, r6
 800de3a:	f7ff ff0b 	bl	800dc54 <__multiply>
 800de3e:	6020      	str	r0, [r4, #0]
 800de40:	f8c0 9000 	str.w	r9, [r0]
 800de44:	4604      	mov	r4, r0
 800de46:	e7e4      	b.n	800de12 <__pow5mult+0x6a>
 800de48:	4638      	mov	r0, r7
 800de4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de4e:	bf00      	nop
 800de50:	0800f478 	.word	0x0800f478
 800de54:	0800f2a5 	.word	0x0800f2a5
 800de58:	0800f328 	.word	0x0800f328

0800de5c <__lshift>:
 800de5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de60:	460c      	mov	r4, r1
 800de62:	6849      	ldr	r1, [r1, #4]
 800de64:	6923      	ldr	r3, [r4, #16]
 800de66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de6a:	68a3      	ldr	r3, [r4, #8]
 800de6c:	4607      	mov	r7, r0
 800de6e:	4691      	mov	r9, r2
 800de70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de74:	f108 0601 	add.w	r6, r8, #1
 800de78:	42b3      	cmp	r3, r6
 800de7a:	db0b      	blt.n	800de94 <__lshift+0x38>
 800de7c:	4638      	mov	r0, r7
 800de7e:	f7ff fddb 	bl	800da38 <_Balloc>
 800de82:	4605      	mov	r5, r0
 800de84:	b948      	cbnz	r0, 800de9a <__lshift+0x3e>
 800de86:	4602      	mov	r2, r0
 800de88:	4b2a      	ldr	r3, [pc, #168]	; (800df34 <__lshift+0xd8>)
 800de8a:	482b      	ldr	r0, [pc, #172]	; (800df38 <__lshift+0xdc>)
 800de8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800de90:	f000 fbb8 	bl	800e604 <__assert_func>
 800de94:	3101      	adds	r1, #1
 800de96:	005b      	lsls	r3, r3, #1
 800de98:	e7ee      	b.n	800de78 <__lshift+0x1c>
 800de9a:	2300      	movs	r3, #0
 800de9c:	f100 0114 	add.w	r1, r0, #20
 800dea0:	f100 0210 	add.w	r2, r0, #16
 800dea4:	4618      	mov	r0, r3
 800dea6:	4553      	cmp	r3, sl
 800dea8:	db37      	blt.n	800df1a <__lshift+0xbe>
 800deaa:	6920      	ldr	r0, [r4, #16]
 800deac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800deb0:	f104 0314 	add.w	r3, r4, #20
 800deb4:	f019 091f 	ands.w	r9, r9, #31
 800deb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800debc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dec0:	d02f      	beq.n	800df22 <__lshift+0xc6>
 800dec2:	f1c9 0e20 	rsb	lr, r9, #32
 800dec6:	468a      	mov	sl, r1
 800dec8:	f04f 0c00 	mov.w	ip, #0
 800decc:	681a      	ldr	r2, [r3, #0]
 800dece:	fa02 f209 	lsl.w	r2, r2, r9
 800ded2:	ea42 020c 	orr.w	r2, r2, ip
 800ded6:	f84a 2b04 	str.w	r2, [sl], #4
 800deda:	f853 2b04 	ldr.w	r2, [r3], #4
 800dede:	4298      	cmp	r0, r3
 800dee0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dee4:	d8f2      	bhi.n	800decc <__lshift+0x70>
 800dee6:	1b03      	subs	r3, r0, r4
 800dee8:	3b15      	subs	r3, #21
 800deea:	f023 0303 	bic.w	r3, r3, #3
 800deee:	3304      	adds	r3, #4
 800def0:	f104 0215 	add.w	r2, r4, #21
 800def4:	4290      	cmp	r0, r2
 800def6:	bf38      	it	cc
 800def8:	2304      	movcc	r3, #4
 800defa:	f841 c003 	str.w	ip, [r1, r3]
 800defe:	f1bc 0f00 	cmp.w	ip, #0
 800df02:	d001      	beq.n	800df08 <__lshift+0xac>
 800df04:	f108 0602 	add.w	r6, r8, #2
 800df08:	3e01      	subs	r6, #1
 800df0a:	4638      	mov	r0, r7
 800df0c:	612e      	str	r6, [r5, #16]
 800df0e:	4621      	mov	r1, r4
 800df10:	f7ff fdd2 	bl	800dab8 <_Bfree>
 800df14:	4628      	mov	r0, r5
 800df16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df1a:	f842 0f04 	str.w	r0, [r2, #4]!
 800df1e:	3301      	adds	r3, #1
 800df20:	e7c1      	b.n	800dea6 <__lshift+0x4a>
 800df22:	3904      	subs	r1, #4
 800df24:	f853 2b04 	ldr.w	r2, [r3], #4
 800df28:	f841 2f04 	str.w	r2, [r1, #4]!
 800df2c:	4298      	cmp	r0, r3
 800df2e:	d8f9      	bhi.n	800df24 <__lshift+0xc8>
 800df30:	e7ea      	b.n	800df08 <__lshift+0xac>
 800df32:	bf00      	nop
 800df34:	0800f317 	.word	0x0800f317
 800df38:	0800f328 	.word	0x0800f328

0800df3c <__mcmp>:
 800df3c:	b530      	push	{r4, r5, lr}
 800df3e:	6902      	ldr	r2, [r0, #16]
 800df40:	690c      	ldr	r4, [r1, #16]
 800df42:	1b12      	subs	r2, r2, r4
 800df44:	d10e      	bne.n	800df64 <__mcmp+0x28>
 800df46:	f100 0314 	add.w	r3, r0, #20
 800df4a:	3114      	adds	r1, #20
 800df4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800df50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800df54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800df58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800df5c:	42a5      	cmp	r5, r4
 800df5e:	d003      	beq.n	800df68 <__mcmp+0x2c>
 800df60:	d305      	bcc.n	800df6e <__mcmp+0x32>
 800df62:	2201      	movs	r2, #1
 800df64:	4610      	mov	r0, r2
 800df66:	bd30      	pop	{r4, r5, pc}
 800df68:	4283      	cmp	r3, r0
 800df6a:	d3f3      	bcc.n	800df54 <__mcmp+0x18>
 800df6c:	e7fa      	b.n	800df64 <__mcmp+0x28>
 800df6e:	f04f 32ff 	mov.w	r2, #4294967295
 800df72:	e7f7      	b.n	800df64 <__mcmp+0x28>

0800df74 <__mdiff>:
 800df74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df78:	460c      	mov	r4, r1
 800df7a:	4606      	mov	r6, r0
 800df7c:	4611      	mov	r1, r2
 800df7e:	4620      	mov	r0, r4
 800df80:	4690      	mov	r8, r2
 800df82:	f7ff ffdb 	bl	800df3c <__mcmp>
 800df86:	1e05      	subs	r5, r0, #0
 800df88:	d110      	bne.n	800dfac <__mdiff+0x38>
 800df8a:	4629      	mov	r1, r5
 800df8c:	4630      	mov	r0, r6
 800df8e:	f7ff fd53 	bl	800da38 <_Balloc>
 800df92:	b930      	cbnz	r0, 800dfa2 <__mdiff+0x2e>
 800df94:	4b3a      	ldr	r3, [pc, #232]	; (800e080 <__mdiff+0x10c>)
 800df96:	4602      	mov	r2, r0
 800df98:	f240 2132 	movw	r1, #562	; 0x232
 800df9c:	4839      	ldr	r0, [pc, #228]	; (800e084 <__mdiff+0x110>)
 800df9e:	f000 fb31 	bl	800e604 <__assert_func>
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dfa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfac:	bfa4      	itt	ge
 800dfae:	4643      	movge	r3, r8
 800dfb0:	46a0      	movge	r8, r4
 800dfb2:	4630      	mov	r0, r6
 800dfb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dfb8:	bfa6      	itte	ge
 800dfba:	461c      	movge	r4, r3
 800dfbc:	2500      	movge	r5, #0
 800dfbe:	2501      	movlt	r5, #1
 800dfc0:	f7ff fd3a 	bl	800da38 <_Balloc>
 800dfc4:	b920      	cbnz	r0, 800dfd0 <__mdiff+0x5c>
 800dfc6:	4b2e      	ldr	r3, [pc, #184]	; (800e080 <__mdiff+0x10c>)
 800dfc8:	4602      	mov	r2, r0
 800dfca:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dfce:	e7e5      	b.n	800df9c <__mdiff+0x28>
 800dfd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dfd4:	6926      	ldr	r6, [r4, #16]
 800dfd6:	60c5      	str	r5, [r0, #12]
 800dfd8:	f104 0914 	add.w	r9, r4, #20
 800dfdc:	f108 0514 	add.w	r5, r8, #20
 800dfe0:	f100 0e14 	add.w	lr, r0, #20
 800dfe4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dfe8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dfec:	f108 0210 	add.w	r2, r8, #16
 800dff0:	46f2      	mov	sl, lr
 800dff2:	2100      	movs	r1, #0
 800dff4:	f859 3b04 	ldr.w	r3, [r9], #4
 800dff8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dffc:	fa1f f883 	uxth.w	r8, r3
 800e000:	fa11 f18b 	uxtah	r1, r1, fp
 800e004:	0c1b      	lsrs	r3, r3, #16
 800e006:	eba1 0808 	sub.w	r8, r1, r8
 800e00a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e00e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e012:	fa1f f888 	uxth.w	r8, r8
 800e016:	1419      	asrs	r1, r3, #16
 800e018:	454e      	cmp	r6, r9
 800e01a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e01e:	f84a 3b04 	str.w	r3, [sl], #4
 800e022:	d8e7      	bhi.n	800dff4 <__mdiff+0x80>
 800e024:	1b33      	subs	r3, r6, r4
 800e026:	3b15      	subs	r3, #21
 800e028:	f023 0303 	bic.w	r3, r3, #3
 800e02c:	3304      	adds	r3, #4
 800e02e:	3415      	adds	r4, #21
 800e030:	42a6      	cmp	r6, r4
 800e032:	bf38      	it	cc
 800e034:	2304      	movcc	r3, #4
 800e036:	441d      	add	r5, r3
 800e038:	4473      	add	r3, lr
 800e03a:	469e      	mov	lr, r3
 800e03c:	462e      	mov	r6, r5
 800e03e:	4566      	cmp	r6, ip
 800e040:	d30e      	bcc.n	800e060 <__mdiff+0xec>
 800e042:	f10c 0203 	add.w	r2, ip, #3
 800e046:	1b52      	subs	r2, r2, r5
 800e048:	f022 0203 	bic.w	r2, r2, #3
 800e04c:	3d03      	subs	r5, #3
 800e04e:	45ac      	cmp	ip, r5
 800e050:	bf38      	it	cc
 800e052:	2200      	movcc	r2, #0
 800e054:	441a      	add	r2, r3
 800e056:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e05a:	b17b      	cbz	r3, 800e07c <__mdiff+0x108>
 800e05c:	6107      	str	r7, [r0, #16]
 800e05e:	e7a3      	b.n	800dfa8 <__mdiff+0x34>
 800e060:	f856 8b04 	ldr.w	r8, [r6], #4
 800e064:	fa11 f288 	uxtah	r2, r1, r8
 800e068:	1414      	asrs	r4, r2, #16
 800e06a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e06e:	b292      	uxth	r2, r2
 800e070:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e074:	f84e 2b04 	str.w	r2, [lr], #4
 800e078:	1421      	asrs	r1, r4, #16
 800e07a:	e7e0      	b.n	800e03e <__mdiff+0xca>
 800e07c:	3f01      	subs	r7, #1
 800e07e:	e7ea      	b.n	800e056 <__mdiff+0xe2>
 800e080:	0800f317 	.word	0x0800f317
 800e084:	0800f328 	.word	0x0800f328

0800e088 <__d2b>:
 800e088:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e08c:	4689      	mov	r9, r1
 800e08e:	2101      	movs	r1, #1
 800e090:	ec57 6b10 	vmov	r6, r7, d0
 800e094:	4690      	mov	r8, r2
 800e096:	f7ff fccf 	bl	800da38 <_Balloc>
 800e09a:	4604      	mov	r4, r0
 800e09c:	b930      	cbnz	r0, 800e0ac <__d2b+0x24>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	4b25      	ldr	r3, [pc, #148]	; (800e138 <__d2b+0xb0>)
 800e0a2:	4826      	ldr	r0, [pc, #152]	; (800e13c <__d2b+0xb4>)
 800e0a4:	f240 310a 	movw	r1, #778	; 0x30a
 800e0a8:	f000 faac 	bl	800e604 <__assert_func>
 800e0ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e0b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e0b4:	bb35      	cbnz	r5, 800e104 <__d2b+0x7c>
 800e0b6:	2e00      	cmp	r6, #0
 800e0b8:	9301      	str	r3, [sp, #4]
 800e0ba:	d028      	beq.n	800e10e <__d2b+0x86>
 800e0bc:	4668      	mov	r0, sp
 800e0be:	9600      	str	r6, [sp, #0]
 800e0c0:	f7ff fd82 	bl	800dbc8 <__lo0bits>
 800e0c4:	9900      	ldr	r1, [sp, #0]
 800e0c6:	b300      	cbz	r0, 800e10a <__d2b+0x82>
 800e0c8:	9a01      	ldr	r2, [sp, #4]
 800e0ca:	f1c0 0320 	rsb	r3, r0, #32
 800e0ce:	fa02 f303 	lsl.w	r3, r2, r3
 800e0d2:	430b      	orrs	r3, r1
 800e0d4:	40c2      	lsrs	r2, r0
 800e0d6:	6163      	str	r3, [r4, #20]
 800e0d8:	9201      	str	r2, [sp, #4]
 800e0da:	9b01      	ldr	r3, [sp, #4]
 800e0dc:	61a3      	str	r3, [r4, #24]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	bf14      	ite	ne
 800e0e2:	2202      	movne	r2, #2
 800e0e4:	2201      	moveq	r2, #1
 800e0e6:	6122      	str	r2, [r4, #16]
 800e0e8:	b1d5      	cbz	r5, 800e120 <__d2b+0x98>
 800e0ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e0ee:	4405      	add	r5, r0
 800e0f0:	f8c9 5000 	str.w	r5, [r9]
 800e0f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e0f8:	f8c8 0000 	str.w	r0, [r8]
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	b003      	add	sp, #12
 800e100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e104:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e108:	e7d5      	b.n	800e0b6 <__d2b+0x2e>
 800e10a:	6161      	str	r1, [r4, #20]
 800e10c:	e7e5      	b.n	800e0da <__d2b+0x52>
 800e10e:	a801      	add	r0, sp, #4
 800e110:	f7ff fd5a 	bl	800dbc8 <__lo0bits>
 800e114:	9b01      	ldr	r3, [sp, #4]
 800e116:	6163      	str	r3, [r4, #20]
 800e118:	2201      	movs	r2, #1
 800e11a:	6122      	str	r2, [r4, #16]
 800e11c:	3020      	adds	r0, #32
 800e11e:	e7e3      	b.n	800e0e8 <__d2b+0x60>
 800e120:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e124:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e128:	f8c9 0000 	str.w	r0, [r9]
 800e12c:	6918      	ldr	r0, [r3, #16]
 800e12e:	f7ff fd2b 	bl	800db88 <__hi0bits>
 800e132:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e136:	e7df      	b.n	800e0f8 <__d2b+0x70>
 800e138:	0800f317 	.word	0x0800f317
 800e13c:	0800f328 	.word	0x0800f328

0800e140 <_calloc_r>:
 800e140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e142:	fba1 2402 	umull	r2, r4, r1, r2
 800e146:	b94c      	cbnz	r4, 800e15c <_calloc_r+0x1c>
 800e148:	4611      	mov	r1, r2
 800e14a:	9201      	str	r2, [sp, #4]
 800e14c:	f000 f87a 	bl	800e244 <_malloc_r>
 800e150:	9a01      	ldr	r2, [sp, #4]
 800e152:	4605      	mov	r5, r0
 800e154:	b930      	cbnz	r0, 800e164 <_calloc_r+0x24>
 800e156:	4628      	mov	r0, r5
 800e158:	b003      	add	sp, #12
 800e15a:	bd30      	pop	{r4, r5, pc}
 800e15c:	220c      	movs	r2, #12
 800e15e:	6002      	str	r2, [r0, #0]
 800e160:	2500      	movs	r5, #0
 800e162:	e7f8      	b.n	800e156 <_calloc_r+0x16>
 800e164:	4621      	mov	r1, r4
 800e166:	f7fe f93f 	bl	800c3e8 <memset>
 800e16a:	e7f4      	b.n	800e156 <_calloc_r+0x16>

0800e16c <_free_r>:
 800e16c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e16e:	2900      	cmp	r1, #0
 800e170:	d044      	beq.n	800e1fc <_free_r+0x90>
 800e172:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e176:	9001      	str	r0, [sp, #4]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	f1a1 0404 	sub.w	r4, r1, #4
 800e17e:	bfb8      	it	lt
 800e180:	18e4      	addlt	r4, r4, r3
 800e182:	f000 fa9b 	bl	800e6bc <__malloc_lock>
 800e186:	4a1e      	ldr	r2, [pc, #120]	; (800e200 <_free_r+0x94>)
 800e188:	9801      	ldr	r0, [sp, #4]
 800e18a:	6813      	ldr	r3, [r2, #0]
 800e18c:	b933      	cbnz	r3, 800e19c <_free_r+0x30>
 800e18e:	6063      	str	r3, [r4, #4]
 800e190:	6014      	str	r4, [r2, #0]
 800e192:	b003      	add	sp, #12
 800e194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e198:	f000 ba96 	b.w	800e6c8 <__malloc_unlock>
 800e19c:	42a3      	cmp	r3, r4
 800e19e:	d908      	bls.n	800e1b2 <_free_r+0x46>
 800e1a0:	6825      	ldr	r5, [r4, #0]
 800e1a2:	1961      	adds	r1, r4, r5
 800e1a4:	428b      	cmp	r3, r1
 800e1a6:	bf01      	itttt	eq
 800e1a8:	6819      	ldreq	r1, [r3, #0]
 800e1aa:	685b      	ldreq	r3, [r3, #4]
 800e1ac:	1949      	addeq	r1, r1, r5
 800e1ae:	6021      	streq	r1, [r4, #0]
 800e1b0:	e7ed      	b.n	800e18e <_free_r+0x22>
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	b10b      	cbz	r3, 800e1bc <_free_r+0x50>
 800e1b8:	42a3      	cmp	r3, r4
 800e1ba:	d9fa      	bls.n	800e1b2 <_free_r+0x46>
 800e1bc:	6811      	ldr	r1, [r2, #0]
 800e1be:	1855      	adds	r5, r2, r1
 800e1c0:	42a5      	cmp	r5, r4
 800e1c2:	d10b      	bne.n	800e1dc <_free_r+0x70>
 800e1c4:	6824      	ldr	r4, [r4, #0]
 800e1c6:	4421      	add	r1, r4
 800e1c8:	1854      	adds	r4, r2, r1
 800e1ca:	42a3      	cmp	r3, r4
 800e1cc:	6011      	str	r1, [r2, #0]
 800e1ce:	d1e0      	bne.n	800e192 <_free_r+0x26>
 800e1d0:	681c      	ldr	r4, [r3, #0]
 800e1d2:	685b      	ldr	r3, [r3, #4]
 800e1d4:	6053      	str	r3, [r2, #4]
 800e1d6:	4421      	add	r1, r4
 800e1d8:	6011      	str	r1, [r2, #0]
 800e1da:	e7da      	b.n	800e192 <_free_r+0x26>
 800e1dc:	d902      	bls.n	800e1e4 <_free_r+0x78>
 800e1de:	230c      	movs	r3, #12
 800e1e0:	6003      	str	r3, [r0, #0]
 800e1e2:	e7d6      	b.n	800e192 <_free_r+0x26>
 800e1e4:	6825      	ldr	r5, [r4, #0]
 800e1e6:	1961      	adds	r1, r4, r5
 800e1e8:	428b      	cmp	r3, r1
 800e1ea:	bf04      	itt	eq
 800e1ec:	6819      	ldreq	r1, [r3, #0]
 800e1ee:	685b      	ldreq	r3, [r3, #4]
 800e1f0:	6063      	str	r3, [r4, #4]
 800e1f2:	bf04      	itt	eq
 800e1f4:	1949      	addeq	r1, r1, r5
 800e1f6:	6021      	streq	r1, [r4, #0]
 800e1f8:	6054      	str	r4, [r2, #4]
 800e1fa:	e7ca      	b.n	800e192 <_free_r+0x26>
 800e1fc:	b003      	add	sp, #12
 800e1fe:	bd30      	pop	{r4, r5, pc}
 800e200:	20000308 	.word	0x20000308

0800e204 <sbrk_aligned>:
 800e204:	b570      	push	{r4, r5, r6, lr}
 800e206:	4e0e      	ldr	r6, [pc, #56]	; (800e240 <sbrk_aligned+0x3c>)
 800e208:	460c      	mov	r4, r1
 800e20a:	6831      	ldr	r1, [r6, #0]
 800e20c:	4605      	mov	r5, r0
 800e20e:	b911      	cbnz	r1, 800e216 <sbrk_aligned+0x12>
 800e210:	f000 f9e8 	bl	800e5e4 <_sbrk_r>
 800e214:	6030      	str	r0, [r6, #0]
 800e216:	4621      	mov	r1, r4
 800e218:	4628      	mov	r0, r5
 800e21a:	f000 f9e3 	bl	800e5e4 <_sbrk_r>
 800e21e:	1c43      	adds	r3, r0, #1
 800e220:	d00a      	beq.n	800e238 <sbrk_aligned+0x34>
 800e222:	1cc4      	adds	r4, r0, #3
 800e224:	f024 0403 	bic.w	r4, r4, #3
 800e228:	42a0      	cmp	r0, r4
 800e22a:	d007      	beq.n	800e23c <sbrk_aligned+0x38>
 800e22c:	1a21      	subs	r1, r4, r0
 800e22e:	4628      	mov	r0, r5
 800e230:	f000 f9d8 	bl	800e5e4 <_sbrk_r>
 800e234:	3001      	adds	r0, #1
 800e236:	d101      	bne.n	800e23c <sbrk_aligned+0x38>
 800e238:	f04f 34ff 	mov.w	r4, #4294967295
 800e23c:	4620      	mov	r0, r4
 800e23e:	bd70      	pop	{r4, r5, r6, pc}
 800e240:	2000030c 	.word	0x2000030c

0800e244 <_malloc_r>:
 800e244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e248:	1ccd      	adds	r5, r1, #3
 800e24a:	f025 0503 	bic.w	r5, r5, #3
 800e24e:	3508      	adds	r5, #8
 800e250:	2d0c      	cmp	r5, #12
 800e252:	bf38      	it	cc
 800e254:	250c      	movcc	r5, #12
 800e256:	2d00      	cmp	r5, #0
 800e258:	4607      	mov	r7, r0
 800e25a:	db01      	blt.n	800e260 <_malloc_r+0x1c>
 800e25c:	42a9      	cmp	r1, r5
 800e25e:	d905      	bls.n	800e26c <_malloc_r+0x28>
 800e260:	230c      	movs	r3, #12
 800e262:	603b      	str	r3, [r7, #0]
 800e264:	2600      	movs	r6, #0
 800e266:	4630      	mov	r0, r6
 800e268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e26c:	4e2e      	ldr	r6, [pc, #184]	; (800e328 <_malloc_r+0xe4>)
 800e26e:	f000 fa25 	bl	800e6bc <__malloc_lock>
 800e272:	6833      	ldr	r3, [r6, #0]
 800e274:	461c      	mov	r4, r3
 800e276:	bb34      	cbnz	r4, 800e2c6 <_malloc_r+0x82>
 800e278:	4629      	mov	r1, r5
 800e27a:	4638      	mov	r0, r7
 800e27c:	f7ff ffc2 	bl	800e204 <sbrk_aligned>
 800e280:	1c43      	adds	r3, r0, #1
 800e282:	4604      	mov	r4, r0
 800e284:	d14d      	bne.n	800e322 <_malloc_r+0xde>
 800e286:	6834      	ldr	r4, [r6, #0]
 800e288:	4626      	mov	r6, r4
 800e28a:	2e00      	cmp	r6, #0
 800e28c:	d140      	bne.n	800e310 <_malloc_r+0xcc>
 800e28e:	6823      	ldr	r3, [r4, #0]
 800e290:	4631      	mov	r1, r6
 800e292:	4638      	mov	r0, r7
 800e294:	eb04 0803 	add.w	r8, r4, r3
 800e298:	f000 f9a4 	bl	800e5e4 <_sbrk_r>
 800e29c:	4580      	cmp	r8, r0
 800e29e:	d13a      	bne.n	800e316 <_malloc_r+0xd2>
 800e2a0:	6821      	ldr	r1, [r4, #0]
 800e2a2:	3503      	adds	r5, #3
 800e2a4:	1a6d      	subs	r5, r5, r1
 800e2a6:	f025 0503 	bic.w	r5, r5, #3
 800e2aa:	3508      	adds	r5, #8
 800e2ac:	2d0c      	cmp	r5, #12
 800e2ae:	bf38      	it	cc
 800e2b0:	250c      	movcc	r5, #12
 800e2b2:	4629      	mov	r1, r5
 800e2b4:	4638      	mov	r0, r7
 800e2b6:	f7ff ffa5 	bl	800e204 <sbrk_aligned>
 800e2ba:	3001      	adds	r0, #1
 800e2bc:	d02b      	beq.n	800e316 <_malloc_r+0xd2>
 800e2be:	6823      	ldr	r3, [r4, #0]
 800e2c0:	442b      	add	r3, r5
 800e2c2:	6023      	str	r3, [r4, #0]
 800e2c4:	e00e      	b.n	800e2e4 <_malloc_r+0xa0>
 800e2c6:	6822      	ldr	r2, [r4, #0]
 800e2c8:	1b52      	subs	r2, r2, r5
 800e2ca:	d41e      	bmi.n	800e30a <_malloc_r+0xc6>
 800e2cc:	2a0b      	cmp	r2, #11
 800e2ce:	d916      	bls.n	800e2fe <_malloc_r+0xba>
 800e2d0:	1961      	adds	r1, r4, r5
 800e2d2:	42a3      	cmp	r3, r4
 800e2d4:	6025      	str	r5, [r4, #0]
 800e2d6:	bf18      	it	ne
 800e2d8:	6059      	strne	r1, [r3, #4]
 800e2da:	6863      	ldr	r3, [r4, #4]
 800e2dc:	bf08      	it	eq
 800e2de:	6031      	streq	r1, [r6, #0]
 800e2e0:	5162      	str	r2, [r4, r5]
 800e2e2:	604b      	str	r3, [r1, #4]
 800e2e4:	4638      	mov	r0, r7
 800e2e6:	f104 060b 	add.w	r6, r4, #11
 800e2ea:	f000 f9ed 	bl	800e6c8 <__malloc_unlock>
 800e2ee:	f026 0607 	bic.w	r6, r6, #7
 800e2f2:	1d23      	adds	r3, r4, #4
 800e2f4:	1af2      	subs	r2, r6, r3
 800e2f6:	d0b6      	beq.n	800e266 <_malloc_r+0x22>
 800e2f8:	1b9b      	subs	r3, r3, r6
 800e2fa:	50a3      	str	r3, [r4, r2]
 800e2fc:	e7b3      	b.n	800e266 <_malloc_r+0x22>
 800e2fe:	6862      	ldr	r2, [r4, #4]
 800e300:	42a3      	cmp	r3, r4
 800e302:	bf0c      	ite	eq
 800e304:	6032      	streq	r2, [r6, #0]
 800e306:	605a      	strne	r2, [r3, #4]
 800e308:	e7ec      	b.n	800e2e4 <_malloc_r+0xa0>
 800e30a:	4623      	mov	r3, r4
 800e30c:	6864      	ldr	r4, [r4, #4]
 800e30e:	e7b2      	b.n	800e276 <_malloc_r+0x32>
 800e310:	4634      	mov	r4, r6
 800e312:	6876      	ldr	r6, [r6, #4]
 800e314:	e7b9      	b.n	800e28a <_malloc_r+0x46>
 800e316:	230c      	movs	r3, #12
 800e318:	603b      	str	r3, [r7, #0]
 800e31a:	4638      	mov	r0, r7
 800e31c:	f000 f9d4 	bl	800e6c8 <__malloc_unlock>
 800e320:	e7a1      	b.n	800e266 <_malloc_r+0x22>
 800e322:	6025      	str	r5, [r4, #0]
 800e324:	e7de      	b.n	800e2e4 <_malloc_r+0xa0>
 800e326:	bf00      	nop
 800e328:	20000308 	.word	0x20000308

0800e32c <__ssputs_r>:
 800e32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e330:	688e      	ldr	r6, [r1, #8]
 800e332:	429e      	cmp	r6, r3
 800e334:	4682      	mov	sl, r0
 800e336:	460c      	mov	r4, r1
 800e338:	4690      	mov	r8, r2
 800e33a:	461f      	mov	r7, r3
 800e33c:	d838      	bhi.n	800e3b0 <__ssputs_r+0x84>
 800e33e:	898a      	ldrh	r2, [r1, #12]
 800e340:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e344:	d032      	beq.n	800e3ac <__ssputs_r+0x80>
 800e346:	6825      	ldr	r5, [r4, #0]
 800e348:	6909      	ldr	r1, [r1, #16]
 800e34a:	eba5 0901 	sub.w	r9, r5, r1
 800e34e:	6965      	ldr	r5, [r4, #20]
 800e350:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e354:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e358:	3301      	adds	r3, #1
 800e35a:	444b      	add	r3, r9
 800e35c:	106d      	asrs	r5, r5, #1
 800e35e:	429d      	cmp	r5, r3
 800e360:	bf38      	it	cc
 800e362:	461d      	movcc	r5, r3
 800e364:	0553      	lsls	r3, r2, #21
 800e366:	d531      	bpl.n	800e3cc <__ssputs_r+0xa0>
 800e368:	4629      	mov	r1, r5
 800e36a:	f7ff ff6b 	bl	800e244 <_malloc_r>
 800e36e:	4606      	mov	r6, r0
 800e370:	b950      	cbnz	r0, 800e388 <__ssputs_r+0x5c>
 800e372:	230c      	movs	r3, #12
 800e374:	f8ca 3000 	str.w	r3, [sl]
 800e378:	89a3      	ldrh	r3, [r4, #12]
 800e37a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e37e:	81a3      	strh	r3, [r4, #12]
 800e380:	f04f 30ff 	mov.w	r0, #4294967295
 800e384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e388:	6921      	ldr	r1, [r4, #16]
 800e38a:	464a      	mov	r2, r9
 800e38c:	f7ff fb46 	bl	800da1c <memcpy>
 800e390:	89a3      	ldrh	r3, [r4, #12]
 800e392:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e39a:	81a3      	strh	r3, [r4, #12]
 800e39c:	6126      	str	r6, [r4, #16]
 800e39e:	6165      	str	r5, [r4, #20]
 800e3a0:	444e      	add	r6, r9
 800e3a2:	eba5 0509 	sub.w	r5, r5, r9
 800e3a6:	6026      	str	r6, [r4, #0]
 800e3a8:	60a5      	str	r5, [r4, #8]
 800e3aa:	463e      	mov	r6, r7
 800e3ac:	42be      	cmp	r6, r7
 800e3ae:	d900      	bls.n	800e3b2 <__ssputs_r+0x86>
 800e3b0:	463e      	mov	r6, r7
 800e3b2:	6820      	ldr	r0, [r4, #0]
 800e3b4:	4632      	mov	r2, r6
 800e3b6:	4641      	mov	r1, r8
 800e3b8:	f000 f966 	bl	800e688 <memmove>
 800e3bc:	68a3      	ldr	r3, [r4, #8]
 800e3be:	1b9b      	subs	r3, r3, r6
 800e3c0:	60a3      	str	r3, [r4, #8]
 800e3c2:	6823      	ldr	r3, [r4, #0]
 800e3c4:	4433      	add	r3, r6
 800e3c6:	6023      	str	r3, [r4, #0]
 800e3c8:	2000      	movs	r0, #0
 800e3ca:	e7db      	b.n	800e384 <__ssputs_r+0x58>
 800e3cc:	462a      	mov	r2, r5
 800e3ce:	f000 f981 	bl	800e6d4 <_realloc_r>
 800e3d2:	4606      	mov	r6, r0
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	d1e1      	bne.n	800e39c <__ssputs_r+0x70>
 800e3d8:	6921      	ldr	r1, [r4, #16]
 800e3da:	4650      	mov	r0, sl
 800e3dc:	f7ff fec6 	bl	800e16c <_free_r>
 800e3e0:	e7c7      	b.n	800e372 <__ssputs_r+0x46>
	...

0800e3e4 <_svfiprintf_r>:
 800e3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3e8:	4698      	mov	r8, r3
 800e3ea:	898b      	ldrh	r3, [r1, #12]
 800e3ec:	061b      	lsls	r3, r3, #24
 800e3ee:	b09d      	sub	sp, #116	; 0x74
 800e3f0:	4607      	mov	r7, r0
 800e3f2:	460d      	mov	r5, r1
 800e3f4:	4614      	mov	r4, r2
 800e3f6:	d50e      	bpl.n	800e416 <_svfiprintf_r+0x32>
 800e3f8:	690b      	ldr	r3, [r1, #16]
 800e3fa:	b963      	cbnz	r3, 800e416 <_svfiprintf_r+0x32>
 800e3fc:	2140      	movs	r1, #64	; 0x40
 800e3fe:	f7ff ff21 	bl	800e244 <_malloc_r>
 800e402:	6028      	str	r0, [r5, #0]
 800e404:	6128      	str	r0, [r5, #16]
 800e406:	b920      	cbnz	r0, 800e412 <_svfiprintf_r+0x2e>
 800e408:	230c      	movs	r3, #12
 800e40a:	603b      	str	r3, [r7, #0]
 800e40c:	f04f 30ff 	mov.w	r0, #4294967295
 800e410:	e0d1      	b.n	800e5b6 <_svfiprintf_r+0x1d2>
 800e412:	2340      	movs	r3, #64	; 0x40
 800e414:	616b      	str	r3, [r5, #20]
 800e416:	2300      	movs	r3, #0
 800e418:	9309      	str	r3, [sp, #36]	; 0x24
 800e41a:	2320      	movs	r3, #32
 800e41c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e420:	f8cd 800c 	str.w	r8, [sp, #12]
 800e424:	2330      	movs	r3, #48	; 0x30
 800e426:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e5d0 <_svfiprintf_r+0x1ec>
 800e42a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e42e:	f04f 0901 	mov.w	r9, #1
 800e432:	4623      	mov	r3, r4
 800e434:	469a      	mov	sl, r3
 800e436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e43a:	b10a      	cbz	r2, 800e440 <_svfiprintf_r+0x5c>
 800e43c:	2a25      	cmp	r2, #37	; 0x25
 800e43e:	d1f9      	bne.n	800e434 <_svfiprintf_r+0x50>
 800e440:	ebba 0b04 	subs.w	fp, sl, r4
 800e444:	d00b      	beq.n	800e45e <_svfiprintf_r+0x7a>
 800e446:	465b      	mov	r3, fp
 800e448:	4622      	mov	r2, r4
 800e44a:	4629      	mov	r1, r5
 800e44c:	4638      	mov	r0, r7
 800e44e:	f7ff ff6d 	bl	800e32c <__ssputs_r>
 800e452:	3001      	adds	r0, #1
 800e454:	f000 80aa 	beq.w	800e5ac <_svfiprintf_r+0x1c8>
 800e458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e45a:	445a      	add	r2, fp
 800e45c:	9209      	str	r2, [sp, #36]	; 0x24
 800e45e:	f89a 3000 	ldrb.w	r3, [sl]
 800e462:	2b00      	cmp	r3, #0
 800e464:	f000 80a2 	beq.w	800e5ac <_svfiprintf_r+0x1c8>
 800e468:	2300      	movs	r3, #0
 800e46a:	f04f 32ff 	mov.w	r2, #4294967295
 800e46e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e472:	f10a 0a01 	add.w	sl, sl, #1
 800e476:	9304      	str	r3, [sp, #16]
 800e478:	9307      	str	r3, [sp, #28]
 800e47a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e47e:	931a      	str	r3, [sp, #104]	; 0x68
 800e480:	4654      	mov	r4, sl
 800e482:	2205      	movs	r2, #5
 800e484:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e488:	4851      	ldr	r0, [pc, #324]	; (800e5d0 <_svfiprintf_r+0x1ec>)
 800e48a:	f7fa faa9 	bl	80089e0 <memchr>
 800e48e:	9a04      	ldr	r2, [sp, #16]
 800e490:	b9d8      	cbnz	r0, 800e4ca <_svfiprintf_r+0xe6>
 800e492:	06d0      	lsls	r0, r2, #27
 800e494:	bf44      	itt	mi
 800e496:	2320      	movmi	r3, #32
 800e498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e49c:	0711      	lsls	r1, r2, #28
 800e49e:	bf44      	itt	mi
 800e4a0:	232b      	movmi	r3, #43	; 0x2b
 800e4a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4a6:	f89a 3000 	ldrb.w	r3, [sl]
 800e4aa:	2b2a      	cmp	r3, #42	; 0x2a
 800e4ac:	d015      	beq.n	800e4da <_svfiprintf_r+0xf6>
 800e4ae:	9a07      	ldr	r2, [sp, #28]
 800e4b0:	4654      	mov	r4, sl
 800e4b2:	2000      	movs	r0, #0
 800e4b4:	f04f 0c0a 	mov.w	ip, #10
 800e4b8:	4621      	mov	r1, r4
 800e4ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4be:	3b30      	subs	r3, #48	; 0x30
 800e4c0:	2b09      	cmp	r3, #9
 800e4c2:	d94e      	bls.n	800e562 <_svfiprintf_r+0x17e>
 800e4c4:	b1b0      	cbz	r0, 800e4f4 <_svfiprintf_r+0x110>
 800e4c6:	9207      	str	r2, [sp, #28]
 800e4c8:	e014      	b.n	800e4f4 <_svfiprintf_r+0x110>
 800e4ca:	eba0 0308 	sub.w	r3, r0, r8
 800e4ce:	fa09 f303 	lsl.w	r3, r9, r3
 800e4d2:	4313      	orrs	r3, r2
 800e4d4:	9304      	str	r3, [sp, #16]
 800e4d6:	46a2      	mov	sl, r4
 800e4d8:	e7d2      	b.n	800e480 <_svfiprintf_r+0x9c>
 800e4da:	9b03      	ldr	r3, [sp, #12]
 800e4dc:	1d19      	adds	r1, r3, #4
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	9103      	str	r1, [sp, #12]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	bfbb      	ittet	lt
 800e4e6:	425b      	neglt	r3, r3
 800e4e8:	f042 0202 	orrlt.w	r2, r2, #2
 800e4ec:	9307      	strge	r3, [sp, #28]
 800e4ee:	9307      	strlt	r3, [sp, #28]
 800e4f0:	bfb8      	it	lt
 800e4f2:	9204      	strlt	r2, [sp, #16]
 800e4f4:	7823      	ldrb	r3, [r4, #0]
 800e4f6:	2b2e      	cmp	r3, #46	; 0x2e
 800e4f8:	d10c      	bne.n	800e514 <_svfiprintf_r+0x130>
 800e4fa:	7863      	ldrb	r3, [r4, #1]
 800e4fc:	2b2a      	cmp	r3, #42	; 0x2a
 800e4fe:	d135      	bne.n	800e56c <_svfiprintf_r+0x188>
 800e500:	9b03      	ldr	r3, [sp, #12]
 800e502:	1d1a      	adds	r2, r3, #4
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	9203      	str	r2, [sp, #12]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	bfb8      	it	lt
 800e50c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e510:	3402      	adds	r4, #2
 800e512:	9305      	str	r3, [sp, #20]
 800e514:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e5e0 <_svfiprintf_r+0x1fc>
 800e518:	7821      	ldrb	r1, [r4, #0]
 800e51a:	2203      	movs	r2, #3
 800e51c:	4650      	mov	r0, sl
 800e51e:	f7fa fa5f 	bl	80089e0 <memchr>
 800e522:	b140      	cbz	r0, 800e536 <_svfiprintf_r+0x152>
 800e524:	2340      	movs	r3, #64	; 0x40
 800e526:	eba0 000a 	sub.w	r0, r0, sl
 800e52a:	fa03 f000 	lsl.w	r0, r3, r0
 800e52e:	9b04      	ldr	r3, [sp, #16]
 800e530:	4303      	orrs	r3, r0
 800e532:	3401      	adds	r4, #1
 800e534:	9304      	str	r3, [sp, #16]
 800e536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e53a:	4826      	ldr	r0, [pc, #152]	; (800e5d4 <_svfiprintf_r+0x1f0>)
 800e53c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e540:	2206      	movs	r2, #6
 800e542:	f7fa fa4d 	bl	80089e0 <memchr>
 800e546:	2800      	cmp	r0, #0
 800e548:	d038      	beq.n	800e5bc <_svfiprintf_r+0x1d8>
 800e54a:	4b23      	ldr	r3, [pc, #140]	; (800e5d8 <_svfiprintf_r+0x1f4>)
 800e54c:	bb1b      	cbnz	r3, 800e596 <_svfiprintf_r+0x1b2>
 800e54e:	9b03      	ldr	r3, [sp, #12]
 800e550:	3307      	adds	r3, #7
 800e552:	f023 0307 	bic.w	r3, r3, #7
 800e556:	3308      	adds	r3, #8
 800e558:	9303      	str	r3, [sp, #12]
 800e55a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e55c:	4433      	add	r3, r6
 800e55e:	9309      	str	r3, [sp, #36]	; 0x24
 800e560:	e767      	b.n	800e432 <_svfiprintf_r+0x4e>
 800e562:	fb0c 3202 	mla	r2, ip, r2, r3
 800e566:	460c      	mov	r4, r1
 800e568:	2001      	movs	r0, #1
 800e56a:	e7a5      	b.n	800e4b8 <_svfiprintf_r+0xd4>
 800e56c:	2300      	movs	r3, #0
 800e56e:	3401      	adds	r4, #1
 800e570:	9305      	str	r3, [sp, #20]
 800e572:	4619      	mov	r1, r3
 800e574:	f04f 0c0a 	mov.w	ip, #10
 800e578:	4620      	mov	r0, r4
 800e57a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e57e:	3a30      	subs	r2, #48	; 0x30
 800e580:	2a09      	cmp	r2, #9
 800e582:	d903      	bls.n	800e58c <_svfiprintf_r+0x1a8>
 800e584:	2b00      	cmp	r3, #0
 800e586:	d0c5      	beq.n	800e514 <_svfiprintf_r+0x130>
 800e588:	9105      	str	r1, [sp, #20]
 800e58a:	e7c3      	b.n	800e514 <_svfiprintf_r+0x130>
 800e58c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e590:	4604      	mov	r4, r0
 800e592:	2301      	movs	r3, #1
 800e594:	e7f0      	b.n	800e578 <_svfiprintf_r+0x194>
 800e596:	ab03      	add	r3, sp, #12
 800e598:	9300      	str	r3, [sp, #0]
 800e59a:	462a      	mov	r2, r5
 800e59c:	4b0f      	ldr	r3, [pc, #60]	; (800e5dc <_svfiprintf_r+0x1f8>)
 800e59e:	a904      	add	r1, sp, #16
 800e5a0:	4638      	mov	r0, r7
 800e5a2:	f7fd ffc9 	bl	800c538 <_printf_float>
 800e5a6:	1c42      	adds	r2, r0, #1
 800e5a8:	4606      	mov	r6, r0
 800e5aa:	d1d6      	bne.n	800e55a <_svfiprintf_r+0x176>
 800e5ac:	89ab      	ldrh	r3, [r5, #12]
 800e5ae:	065b      	lsls	r3, r3, #25
 800e5b0:	f53f af2c 	bmi.w	800e40c <_svfiprintf_r+0x28>
 800e5b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5b6:	b01d      	add	sp, #116	; 0x74
 800e5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5bc:	ab03      	add	r3, sp, #12
 800e5be:	9300      	str	r3, [sp, #0]
 800e5c0:	462a      	mov	r2, r5
 800e5c2:	4b06      	ldr	r3, [pc, #24]	; (800e5dc <_svfiprintf_r+0x1f8>)
 800e5c4:	a904      	add	r1, sp, #16
 800e5c6:	4638      	mov	r0, r7
 800e5c8:	f7fe fa5a 	bl	800ca80 <_printf_i>
 800e5cc:	e7eb      	b.n	800e5a6 <_svfiprintf_r+0x1c2>
 800e5ce:	bf00      	nop
 800e5d0:	0800f484 	.word	0x0800f484
 800e5d4:	0800f48e 	.word	0x0800f48e
 800e5d8:	0800c539 	.word	0x0800c539
 800e5dc:	0800e32d 	.word	0x0800e32d
 800e5e0:	0800f48a 	.word	0x0800f48a

0800e5e4 <_sbrk_r>:
 800e5e4:	b538      	push	{r3, r4, r5, lr}
 800e5e6:	4d06      	ldr	r5, [pc, #24]	; (800e600 <_sbrk_r+0x1c>)
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	4604      	mov	r4, r0
 800e5ec:	4608      	mov	r0, r1
 800e5ee:	602b      	str	r3, [r5, #0]
 800e5f0:	f7fb fcfc 	bl	8009fec <_sbrk>
 800e5f4:	1c43      	adds	r3, r0, #1
 800e5f6:	d102      	bne.n	800e5fe <_sbrk_r+0x1a>
 800e5f8:	682b      	ldr	r3, [r5, #0]
 800e5fa:	b103      	cbz	r3, 800e5fe <_sbrk_r+0x1a>
 800e5fc:	6023      	str	r3, [r4, #0]
 800e5fe:	bd38      	pop	{r3, r4, r5, pc}
 800e600:	20000310 	.word	0x20000310

0800e604 <__assert_func>:
 800e604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e606:	4614      	mov	r4, r2
 800e608:	461a      	mov	r2, r3
 800e60a:	4b09      	ldr	r3, [pc, #36]	; (800e630 <__assert_func+0x2c>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	4605      	mov	r5, r0
 800e610:	68d8      	ldr	r0, [r3, #12]
 800e612:	b14c      	cbz	r4, 800e628 <__assert_func+0x24>
 800e614:	4b07      	ldr	r3, [pc, #28]	; (800e634 <__assert_func+0x30>)
 800e616:	9100      	str	r1, [sp, #0]
 800e618:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e61c:	4906      	ldr	r1, [pc, #24]	; (800e638 <__assert_func+0x34>)
 800e61e:	462b      	mov	r3, r5
 800e620:	f000 f80e 	bl	800e640 <fiprintf>
 800e624:	f000 faac 	bl	800eb80 <abort>
 800e628:	4b04      	ldr	r3, [pc, #16]	; (800e63c <__assert_func+0x38>)
 800e62a:	461c      	mov	r4, r3
 800e62c:	e7f3      	b.n	800e616 <__assert_func+0x12>
 800e62e:	bf00      	nop
 800e630:	2000000c 	.word	0x2000000c
 800e634:	0800f495 	.word	0x0800f495
 800e638:	0800f4a2 	.word	0x0800f4a2
 800e63c:	0800f4d0 	.word	0x0800f4d0

0800e640 <fiprintf>:
 800e640:	b40e      	push	{r1, r2, r3}
 800e642:	b503      	push	{r0, r1, lr}
 800e644:	4601      	mov	r1, r0
 800e646:	ab03      	add	r3, sp, #12
 800e648:	4805      	ldr	r0, [pc, #20]	; (800e660 <fiprintf+0x20>)
 800e64a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e64e:	6800      	ldr	r0, [r0, #0]
 800e650:	9301      	str	r3, [sp, #4]
 800e652:	f000 f897 	bl	800e784 <_vfiprintf_r>
 800e656:	b002      	add	sp, #8
 800e658:	f85d eb04 	ldr.w	lr, [sp], #4
 800e65c:	b003      	add	sp, #12
 800e65e:	4770      	bx	lr
 800e660:	2000000c 	.word	0x2000000c

0800e664 <__ascii_mbtowc>:
 800e664:	b082      	sub	sp, #8
 800e666:	b901      	cbnz	r1, 800e66a <__ascii_mbtowc+0x6>
 800e668:	a901      	add	r1, sp, #4
 800e66a:	b142      	cbz	r2, 800e67e <__ascii_mbtowc+0x1a>
 800e66c:	b14b      	cbz	r3, 800e682 <__ascii_mbtowc+0x1e>
 800e66e:	7813      	ldrb	r3, [r2, #0]
 800e670:	600b      	str	r3, [r1, #0]
 800e672:	7812      	ldrb	r2, [r2, #0]
 800e674:	1e10      	subs	r0, r2, #0
 800e676:	bf18      	it	ne
 800e678:	2001      	movne	r0, #1
 800e67a:	b002      	add	sp, #8
 800e67c:	4770      	bx	lr
 800e67e:	4610      	mov	r0, r2
 800e680:	e7fb      	b.n	800e67a <__ascii_mbtowc+0x16>
 800e682:	f06f 0001 	mvn.w	r0, #1
 800e686:	e7f8      	b.n	800e67a <__ascii_mbtowc+0x16>

0800e688 <memmove>:
 800e688:	4288      	cmp	r0, r1
 800e68a:	b510      	push	{r4, lr}
 800e68c:	eb01 0402 	add.w	r4, r1, r2
 800e690:	d902      	bls.n	800e698 <memmove+0x10>
 800e692:	4284      	cmp	r4, r0
 800e694:	4623      	mov	r3, r4
 800e696:	d807      	bhi.n	800e6a8 <memmove+0x20>
 800e698:	1e43      	subs	r3, r0, #1
 800e69a:	42a1      	cmp	r1, r4
 800e69c:	d008      	beq.n	800e6b0 <memmove+0x28>
 800e69e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e6a6:	e7f8      	b.n	800e69a <memmove+0x12>
 800e6a8:	4402      	add	r2, r0
 800e6aa:	4601      	mov	r1, r0
 800e6ac:	428a      	cmp	r2, r1
 800e6ae:	d100      	bne.n	800e6b2 <memmove+0x2a>
 800e6b0:	bd10      	pop	{r4, pc}
 800e6b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e6b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e6ba:	e7f7      	b.n	800e6ac <memmove+0x24>

0800e6bc <__malloc_lock>:
 800e6bc:	4801      	ldr	r0, [pc, #4]	; (800e6c4 <__malloc_lock+0x8>)
 800e6be:	f000 bc1f 	b.w	800ef00 <__retarget_lock_acquire_recursive>
 800e6c2:	bf00      	nop
 800e6c4:	20000314 	.word	0x20000314

0800e6c8 <__malloc_unlock>:
 800e6c8:	4801      	ldr	r0, [pc, #4]	; (800e6d0 <__malloc_unlock+0x8>)
 800e6ca:	f000 bc1a 	b.w	800ef02 <__retarget_lock_release_recursive>
 800e6ce:	bf00      	nop
 800e6d0:	20000314 	.word	0x20000314

0800e6d4 <_realloc_r>:
 800e6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6d8:	4680      	mov	r8, r0
 800e6da:	4614      	mov	r4, r2
 800e6dc:	460e      	mov	r6, r1
 800e6de:	b921      	cbnz	r1, 800e6ea <_realloc_r+0x16>
 800e6e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6e4:	4611      	mov	r1, r2
 800e6e6:	f7ff bdad 	b.w	800e244 <_malloc_r>
 800e6ea:	b92a      	cbnz	r2, 800e6f8 <_realloc_r+0x24>
 800e6ec:	f7ff fd3e 	bl	800e16c <_free_r>
 800e6f0:	4625      	mov	r5, r4
 800e6f2:	4628      	mov	r0, r5
 800e6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6f8:	f000 fc6a 	bl	800efd0 <_malloc_usable_size_r>
 800e6fc:	4284      	cmp	r4, r0
 800e6fe:	4607      	mov	r7, r0
 800e700:	d802      	bhi.n	800e708 <_realloc_r+0x34>
 800e702:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e706:	d812      	bhi.n	800e72e <_realloc_r+0x5a>
 800e708:	4621      	mov	r1, r4
 800e70a:	4640      	mov	r0, r8
 800e70c:	f7ff fd9a 	bl	800e244 <_malloc_r>
 800e710:	4605      	mov	r5, r0
 800e712:	2800      	cmp	r0, #0
 800e714:	d0ed      	beq.n	800e6f2 <_realloc_r+0x1e>
 800e716:	42bc      	cmp	r4, r7
 800e718:	4622      	mov	r2, r4
 800e71a:	4631      	mov	r1, r6
 800e71c:	bf28      	it	cs
 800e71e:	463a      	movcs	r2, r7
 800e720:	f7ff f97c 	bl	800da1c <memcpy>
 800e724:	4631      	mov	r1, r6
 800e726:	4640      	mov	r0, r8
 800e728:	f7ff fd20 	bl	800e16c <_free_r>
 800e72c:	e7e1      	b.n	800e6f2 <_realloc_r+0x1e>
 800e72e:	4635      	mov	r5, r6
 800e730:	e7df      	b.n	800e6f2 <_realloc_r+0x1e>

0800e732 <__sfputc_r>:
 800e732:	6893      	ldr	r3, [r2, #8]
 800e734:	3b01      	subs	r3, #1
 800e736:	2b00      	cmp	r3, #0
 800e738:	b410      	push	{r4}
 800e73a:	6093      	str	r3, [r2, #8]
 800e73c:	da08      	bge.n	800e750 <__sfputc_r+0x1e>
 800e73e:	6994      	ldr	r4, [r2, #24]
 800e740:	42a3      	cmp	r3, r4
 800e742:	db01      	blt.n	800e748 <__sfputc_r+0x16>
 800e744:	290a      	cmp	r1, #10
 800e746:	d103      	bne.n	800e750 <__sfputc_r+0x1e>
 800e748:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e74c:	f000 b94a 	b.w	800e9e4 <__swbuf_r>
 800e750:	6813      	ldr	r3, [r2, #0]
 800e752:	1c58      	adds	r0, r3, #1
 800e754:	6010      	str	r0, [r2, #0]
 800e756:	7019      	strb	r1, [r3, #0]
 800e758:	4608      	mov	r0, r1
 800e75a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e75e:	4770      	bx	lr

0800e760 <__sfputs_r>:
 800e760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e762:	4606      	mov	r6, r0
 800e764:	460f      	mov	r7, r1
 800e766:	4614      	mov	r4, r2
 800e768:	18d5      	adds	r5, r2, r3
 800e76a:	42ac      	cmp	r4, r5
 800e76c:	d101      	bne.n	800e772 <__sfputs_r+0x12>
 800e76e:	2000      	movs	r0, #0
 800e770:	e007      	b.n	800e782 <__sfputs_r+0x22>
 800e772:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e776:	463a      	mov	r2, r7
 800e778:	4630      	mov	r0, r6
 800e77a:	f7ff ffda 	bl	800e732 <__sfputc_r>
 800e77e:	1c43      	adds	r3, r0, #1
 800e780:	d1f3      	bne.n	800e76a <__sfputs_r+0xa>
 800e782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e784 <_vfiprintf_r>:
 800e784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e788:	460d      	mov	r5, r1
 800e78a:	b09d      	sub	sp, #116	; 0x74
 800e78c:	4614      	mov	r4, r2
 800e78e:	4698      	mov	r8, r3
 800e790:	4606      	mov	r6, r0
 800e792:	b118      	cbz	r0, 800e79c <_vfiprintf_r+0x18>
 800e794:	6983      	ldr	r3, [r0, #24]
 800e796:	b90b      	cbnz	r3, 800e79c <_vfiprintf_r+0x18>
 800e798:	f000 fb14 	bl	800edc4 <__sinit>
 800e79c:	4b89      	ldr	r3, [pc, #548]	; (800e9c4 <_vfiprintf_r+0x240>)
 800e79e:	429d      	cmp	r5, r3
 800e7a0:	d11b      	bne.n	800e7da <_vfiprintf_r+0x56>
 800e7a2:	6875      	ldr	r5, [r6, #4]
 800e7a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7a6:	07d9      	lsls	r1, r3, #31
 800e7a8:	d405      	bmi.n	800e7b6 <_vfiprintf_r+0x32>
 800e7aa:	89ab      	ldrh	r3, [r5, #12]
 800e7ac:	059a      	lsls	r2, r3, #22
 800e7ae:	d402      	bmi.n	800e7b6 <_vfiprintf_r+0x32>
 800e7b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7b2:	f000 fba5 	bl	800ef00 <__retarget_lock_acquire_recursive>
 800e7b6:	89ab      	ldrh	r3, [r5, #12]
 800e7b8:	071b      	lsls	r3, r3, #28
 800e7ba:	d501      	bpl.n	800e7c0 <_vfiprintf_r+0x3c>
 800e7bc:	692b      	ldr	r3, [r5, #16]
 800e7be:	b9eb      	cbnz	r3, 800e7fc <_vfiprintf_r+0x78>
 800e7c0:	4629      	mov	r1, r5
 800e7c2:	4630      	mov	r0, r6
 800e7c4:	f000 f96e 	bl	800eaa4 <__swsetup_r>
 800e7c8:	b1c0      	cbz	r0, 800e7fc <_vfiprintf_r+0x78>
 800e7ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7cc:	07dc      	lsls	r4, r3, #31
 800e7ce:	d50e      	bpl.n	800e7ee <_vfiprintf_r+0x6a>
 800e7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7d4:	b01d      	add	sp, #116	; 0x74
 800e7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7da:	4b7b      	ldr	r3, [pc, #492]	; (800e9c8 <_vfiprintf_r+0x244>)
 800e7dc:	429d      	cmp	r5, r3
 800e7de:	d101      	bne.n	800e7e4 <_vfiprintf_r+0x60>
 800e7e0:	68b5      	ldr	r5, [r6, #8]
 800e7e2:	e7df      	b.n	800e7a4 <_vfiprintf_r+0x20>
 800e7e4:	4b79      	ldr	r3, [pc, #484]	; (800e9cc <_vfiprintf_r+0x248>)
 800e7e6:	429d      	cmp	r5, r3
 800e7e8:	bf08      	it	eq
 800e7ea:	68f5      	ldreq	r5, [r6, #12]
 800e7ec:	e7da      	b.n	800e7a4 <_vfiprintf_r+0x20>
 800e7ee:	89ab      	ldrh	r3, [r5, #12]
 800e7f0:	0598      	lsls	r0, r3, #22
 800e7f2:	d4ed      	bmi.n	800e7d0 <_vfiprintf_r+0x4c>
 800e7f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7f6:	f000 fb84 	bl	800ef02 <__retarget_lock_release_recursive>
 800e7fa:	e7e9      	b.n	800e7d0 <_vfiprintf_r+0x4c>
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	9309      	str	r3, [sp, #36]	; 0x24
 800e800:	2320      	movs	r3, #32
 800e802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e806:	f8cd 800c 	str.w	r8, [sp, #12]
 800e80a:	2330      	movs	r3, #48	; 0x30
 800e80c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e9d0 <_vfiprintf_r+0x24c>
 800e810:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e814:	f04f 0901 	mov.w	r9, #1
 800e818:	4623      	mov	r3, r4
 800e81a:	469a      	mov	sl, r3
 800e81c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e820:	b10a      	cbz	r2, 800e826 <_vfiprintf_r+0xa2>
 800e822:	2a25      	cmp	r2, #37	; 0x25
 800e824:	d1f9      	bne.n	800e81a <_vfiprintf_r+0x96>
 800e826:	ebba 0b04 	subs.w	fp, sl, r4
 800e82a:	d00b      	beq.n	800e844 <_vfiprintf_r+0xc0>
 800e82c:	465b      	mov	r3, fp
 800e82e:	4622      	mov	r2, r4
 800e830:	4629      	mov	r1, r5
 800e832:	4630      	mov	r0, r6
 800e834:	f7ff ff94 	bl	800e760 <__sfputs_r>
 800e838:	3001      	adds	r0, #1
 800e83a:	f000 80aa 	beq.w	800e992 <_vfiprintf_r+0x20e>
 800e83e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e840:	445a      	add	r2, fp
 800e842:	9209      	str	r2, [sp, #36]	; 0x24
 800e844:	f89a 3000 	ldrb.w	r3, [sl]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	f000 80a2 	beq.w	800e992 <_vfiprintf_r+0x20e>
 800e84e:	2300      	movs	r3, #0
 800e850:	f04f 32ff 	mov.w	r2, #4294967295
 800e854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e858:	f10a 0a01 	add.w	sl, sl, #1
 800e85c:	9304      	str	r3, [sp, #16]
 800e85e:	9307      	str	r3, [sp, #28]
 800e860:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e864:	931a      	str	r3, [sp, #104]	; 0x68
 800e866:	4654      	mov	r4, sl
 800e868:	2205      	movs	r2, #5
 800e86a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e86e:	4858      	ldr	r0, [pc, #352]	; (800e9d0 <_vfiprintf_r+0x24c>)
 800e870:	f7fa f8b6 	bl	80089e0 <memchr>
 800e874:	9a04      	ldr	r2, [sp, #16]
 800e876:	b9d8      	cbnz	r0, 800e8b0 <_vfiprintf_r+0x12c>
 800e878:	06d1      	lsls	r1, r2, #27
 800e87a:	bf44      	itt	mi
 800e87c:	2320      	movmi	r3, #32
 800e87e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e882:	0713      	lsls	r3, r2, #28
 800e884:	bf44      	itt	mi
 800e886:	232b      	movmi	r3, #43	; 0x2b
 800e888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e88c:	f89a 3000 	ldrb.w	r3, [sl]
 800e890:	2b2a      	cmp	r3, #42	; 0x2a
 800e892:	d015      	beq.n	800e8c0 <_vfiprintf_r+0x13c>
 800e894:	9a07      	ldr	r2, [sp, #28]
 800e896:	4654      	mov	r4, sl
 800e898:	2000      	movs	r0, #0
 800e89a:	f04f 0c0a 	mov.w	ip, #10
 800e89e:	4621      	mov	r1, r4
 800e8a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8a4:	3b30      	subs	r3, #48	; 0x30
 800e8a6:	2b09      	cmp	r3, #9
 800e8a8:	d94e      	bls.n	800e948 <_vfiprintf_r+0x1c4>
 800e8aa:	b1b0      	cbz	r0, 800e8da <_vfiprintf_r+0x156>
 800e8ac:	9207      	str	r2, [sp, #28]
 800e8ae:	e014      	b.n	800e8da <_vfiprintf_r+0x156>
 800e8b0:	eba0 0308 	sub.w	r3, r0, r8
 800e8b4:	fa09 f303 	lsl.w	r3, r9, r3
 800e8b8:	4313      	orrs	r3, r2
 800e8ba:	9304      	str	r3, [sp, #16]
 800e8bc:	46a2      	mov	sl, r4
 800e8be:	e7d2      	b.n	800e866 <_vfiprintf_r+0xe2>
 800e8c0:	9b03      	ldr	r3, [sp, #12]
 800e8c2:	1d19      	adds	r1, r3, #4
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	9103      	str	r1, [sp, #12]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	bfbb      	ittet	lt
 800e8cc:	425b      	neglt	r3, r3
 800e8ce:	f042 0202 	orrlt.w	r2, r2, #2
 800e8d2:	9307      	strge	r3, [sp, #28]
 800e8d4:	9307      	strlt	r3, [sp, #28]
 800e8d6:	bfb8      	it	lt
 800e8d8:	9204      	strlt	r2, [sp, #16]
 800e8da:	7823      	ldrb	r3, [r4, #0]
 800e8dc:	2b2e      	cmp	r3, #46	; 0x2e
 800e8de:	d10c      	bne.n	800e8fa <_vfiprintf_r+0x176>
 800e8e0:	7863      	ldrb	r3, [r4, #1]
 800e8e2:	2b2a      	cmp	r3, #42	; 0x2a
 800e8e4:	d135      	bne.n	800e952 <_vfiprintf_r+0x1ce>
 800e8e6:	9b03      	ldr	r3, [sp, #12]
 800e8e8:	1d1a      	adds	r2, r3, #4
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	9203      	str	r2, [sp, #12]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	bfb8      	it	lt
 800e8f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800e8f6:	3402      	adds	r4, #2
 800e8f8:	9305      	str	r3, [sp, #20]
 800e8fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e9e0 <_vfiprintf_r+0x25c>
 800e8fe:	7821      	ldrb	r1, [r4, #0]
 800e900:	2203      	movs	r2, #3
 800e902:	4650      	mov	r0, sl
 800e904:	f7fa f86c 	bl	80089e0 <memchr>
 800e908:	b140      	cbz	r0, 800e91c <_vfiprintf_r+0x198>
 800e90a:	2340      	movs	r3, #64	; 0x40
 800e90c:	eba0 000a 	sub.w	r0, r0, sl
 800e910:	fa03 f000 	lsl.w	r0, r3, r0
 800e914:	9b04      	ldr	r3, [sp, #16]
 800e916:	4303      	orrs	r3, r0
 800e918:	3401      	adds	r4, #1
 800e91a:	9304      	str	r3, [sp, #16]
 800e91c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e920:	482c      	ldr	r0, [pc, #176]	; (800e9d4 <_vfiprintf_r+0x250>)
 800e922:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e926:	2206      	movs	r2, #6
 800e928:	f7fa f85a 	bl	80089e0 <memchr>
 800e92c:	2800      	cmp	r0, #0
 800e92e:	d03f      	beq.n	800e9b0 <_vfiprintf_r+0x22c>
 800e930:	4b29      	ldr	r3, [pc, #164]	; (800e9d8 <_vfiprintf_r+0x254>)
 800e932:	bb1b      	cbnz	r3, 800e97c <_vfiprintf_r+0x1f8>
 800e934:	9b03      	ldr	r3, [sp, #12]
 800e936:	3307      	adds	r3, #7
 800e938:	f023 0307 	bic.w	r3, r3, #7
 800e93c:	3308      	adds	r3, #8
 800e93e:	9303      	str	r3, [sp, #12]
 800e940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e942:	443b      	add	r3, r7
 800e944:	9309      	str	r3, [sp, #36]	; 0x24
 800e946:	e767      	b.n	800e818 <_vfiprintf_r+0x94>
 800e948:	fb0c 3202 	mla	r2, ip, r2, r3
 800e94c:	460c      	mov	r4, r1
 800e94e:	2001      	movs	r0, #1
 800e950:	e7a5      	b.n	800e89e <_vfiprintf_r+0x11a>
 800e952:	2300      	movs	r3, #0
 800e954:	3401      	adds	r4, #1
 800e956:	9305      	str	r3, [sp, #20]
 800e958:	4619      	mov	r1, r3
 800e95a:	f04f 0c0a 	mov.w	ip, #10
 800e95e:	4620      	mov	r0, r4
 800e960:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e964:	3a30      	subs	r2, #48	; 0x30
 800e966:	2a09      	cmp	r2, #9
 800e968:	d903      	bls.n	800e972 <_vfiprintf_r+0x1ee>
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d0c5      	beq.n	800e8fa <_vfiprintf_r+0x176>
 800e96e:	9105      	str	r1, [sp, #20]
 800e970:	e7c3      	b.n	800e8fa <_vfiprintf_r+0x176>
 800e972:	fb0c 2101 	mla	r1, ip, r1, r2
 800e976:	4604      	mov	r4, r0
 800e978:	2301      	movs	r3, #1
 800e97a:	e7f0      	b.n	800e95e <_vfiprintf_r+0x1da>
 800e97c:	ab03      	add	r3, sp, #12
 800e97e:	9300      	str	r3, [sp, #0]
 800e980:	462a      	mov	r2, r5
 800e982:	4b16      	ldr	r3, [pc, #88]	; (800e9dc <_vfiprintf_r+0x258>)
 800e984:	a904      	add	r1, sp, #16
 800e986:	4630      	mov	r0, r6
 800e988:	f7fd fdd6 	bl	800c538 <_printf_float>
 800e98c:	4607      	mov	r7, r0
 800e98e:	1c78      	adds	r0, r7, #1
 800e990:	d1d6      	bne.n	800e940 <_vfiprintf_r+0x1bc>
 800e992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e994:	07d9      	lsls	r1, r3, #31
 800e996:	d405      	bmi.n	800e9a4 <_vfiprintf_r+0x220>
 800e998:	89ab      	ldrh	r3, [r5, #12]
 800e99a:	059a      	lsls	r2, r3, #22
 800e99c:	d402      	bmi.n	800e9a4 <_vfiprintf_r+0x220>
 800e99e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9a0:	f000 faaf 	bl	800ef02 <__retarget_lock_release_recursive>
 800e9a4:	89ab      	ldrh	r3, [r5, #12]
 800e9a6:	065b      	lsls	r3, r3, #25
 800e9a8:	f53f af12 	bmi.w	800e7d0 <_vfiprintf_r+0x4c>
 800e9ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9ae:	e711      	b.n	800e7d4 <_vfiprintf_r+0x50>
 800e9b0:	ab03      	add	r3, sp, #12
 800e9b2:	9300      	str	r3, [sp, #0]
 800e9b4:	462a      	mov	r2, r5
 800e9b6:	4b09      	ldr	r3, [pc, #36]	; (800e9dc <_vfiprintf_r+0x258>)
 800e9b8:	a904      	add	r1, sp, #16
 800e9ba:	4630      	mov	r0, r6
 800e9bc:	f7fe f860 	bl	800ca80 <_printf_i>
 800e9c0:	e7e4      	b.n	800e98c <_vfiprintf_r+0x208>
 800e9c2:	bf00      	nop
 800e9c4:	0800f5fc 	.word	0x0800f5fc
 800e9c8:	0800f61c 	.word	0x0800f61c
 800e9cc:	0800f5dc 	.word	0x0800f5dc
 800e9d0:	0800f484 	.word	0x0800f484
 800e9d4:	0800f48e 	.word	0x0800f48e
 800e9d8:	0800c539 	.word	0x0800c539
 800e9dc:	0800e761 	.word	0x0800e761
 800e9e0:	0800f48a 	.word	0x0800f48a

0800e9e4 <__swbuf_r>:
 800e9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9e6:	460e      	mov	r6, r1
 800e9e8:	4614      	mov	r4, r2
 800e9ea:	4605      	mov	r5, r0
 800e9ec:	b118      	cbz	r0, 800e9f6 <__swbuf_r+0x12>
 800e9ee:	6983      	ldr	r3, [r0, #24]
 800e9f0:	b90b      	cbnz	r3, 800e9f6 <__swbuf_r+0x12>
 800e9f2:	f000 f9e7 	bl	800edc4 <__sinit>
 800e9f6:	4b21      	ldr	r3, [pc, #132]	; (800ea7c <__swbuf_r+0x98>)
 800e9f8:	429c      	cmp	r4, r3
 800e9fa:	d12b      	bne.n	800ea54 <__swbuf_r+0x70>
 800e9fc:	686c      	ldr	r4, [r5, #4]
 800e9fe:	69a3      	ldr	r3, [r4, #24]
 800ea00:	60a3      	str	r3, [r4, #8]
 800ea02:	89a3      	ldrh	r3, [r4, #12]
 800ea04:	071a      	lsls	r2, r3, #28
 800ea06:	d52f      	bpl.n	800ea68 <__swbuf_r+0x84>
 800ea08:	6923      	ldr	r3, [r4, #16]
 800ea0a:	b36b      	cbz	r3, 800ea68 <__swbuf_r+0x84>
 800ea0c:	6923      	ldr	r3, [r4, #16]
 800ea0e:	6820      	ldr	r0, [r4, #0]
 800ea10:	1ac0      	subs	r0, r0, r3
 800ea12:	6963      	ldr	r3, [r4, #20]
 800ea14:	b2f6      	uxtb	r6, r6
 800ea16:	4283      	cmp	r3, r0
 800ea18:	4637      	mov	r7, r6
 800ea1a:	dc04      	bgt.n	800ea26 <__swbuf_r+0x42>
 800ea1c:	4621      	mov	r1, r4
 800ea1e:	4628      	mov	r0, r5
 800ea20:	f000 f93c 	bl	800ec9c <_fflush_r>
 800ea24:	bb30      	cbnz	r0, 800ea74 <__swbuf_r+0x90>
 800ea26:	68a3      	ldr	r3, [r4, #8]
 800ea28:	3b01      	subs	r3, #1
 800ea2a:	60a3      	str	r3, [r4, #8]
 800ea2c:	6823      	ldr	r3, [r4, #0]
 800ea2e:	1c5a      	adds	r2, r3, #1
 800ea30:	6022      	str	r2, [r4, #0]
 800ea32:	701e      	strb	r6, [r3, #0]
 800ea34:	6963      	ldr	r3, [r4, #20]
 800ea36:	3001      	adds	r0, #1
 800ea38:	4283      	cmp	r3, r0
 800ea3a:	d004      	beq.n	800ea46 <__swbuf_r+0x62>
 800ea3c:	89a3      	ldrh	r3, [r4, #12]
 800ea3e:	07db      	lsls	r3, r3, #31
 800ea40:	d506      	bpl.n	800ea50 <__swbuf_r+0x6c>
 800ea42:	2e0a      	cmp	r6, #10
 800ea44:	d104      	bne.n	800ea50 <__swbuf_r+0x6c>
 800ea46:	4621      	mov	r1, r4
 800ea48:	4628      	mov	r0, r5
 800ea4a:	f000 f927 	bl	800ec9c <_fflush_r>
 800ea4e:	b988      	cbnz	r0, 800ea74 <__swbuf_r+0x90>
 800ea50:	4638      	mov	r0, r7
 800ea52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea54:	4b0a      	ldr	r3, [pc, #40]	; (800ea80 <__swbuf_r+0x9c>)
 800ea56:	429c      	cmp	r4, r3
 800ea58:	d101      	bne.n	800ea5e <__swbuf_r+0x7a>
 800ea5a:	68ac      	ldr	r4, [r5, #8]
 800ea5c:	e7cf      	b.n	800e9fe <__swbuf_r+0x1a>
 800ea5e:	4b09      	ldr	r3, [pc, #36]	; (800ea84 <__swbuf_r+0xa0>)
 800ea60:	429c      	cmp	r4, r3
 800ea62:	bf08      	it	eq
 800ea64:	68ec      	ldreq	r4, [r5, #12]
 800ea66:	e7ca      	b.n	800e9fe <__swbuf_r+0x1a>
 800ea68:	4621      	mov	r1, r4
 800ea6a:	4628      	mov	r0, r5
 800ea6c:	f000 f81a 	bl	800eaa4 <__swsetup_r>
 800ea70:	2800      	cmp	r0, #0
 800ea72:	d0cb      	beq.n	800ea0c <__swbuf_r+0x28>
 800ea74:	f04f 37ff 	mov.w	r7, #4294967295
 800ea78:	e7ea      	b.n	800ea50 <__swbuf_r+0x6c>
 800ea7a:	bf00      	nop
 800ea7c:	0800f5fc 	.word	0x0800f5fc
 800ea80:	0800f61c 	.word	0x0800f61c
 800ea84:	0800f5dc 	.word	0x0800f5dc

0800ea88 <__ascii_wctomb>:
 800ea88:	b149      	cbz	r1, 800ea9e <__ascii_wctomb+0x16>
 800ea8a:	2aff      	cmp	r2, #255	; 0xff
 800ea8c:	bf85      	ittet	hi
 800ea8e:	238a      	movhi	r3, #138	; 0x8a
 800ea90:	6003      	strhi	r3, [r0, #0]
 800ea92:	700a      	strbls	r2, [r1, #0]
 800ea94:	f04f 30ff 	movhi.w	r0, #4294967295
 800ea98:	bf98      	it	ls
 800ea9a:	2001      	movls	r0, #1
 800ea9c:	4770      	bx	lr
 800ea9e:	4608      	mov	r0, r1
 800eaa0:	4770      	bx	lr
	...

0800eaa4 <__swsetup_r>:
 800eaa4:	4b32      	ldr	r3, [pc, #200]	; (800eb70 <__swsetup_r+0xcc>)
 800eaa6:	b570      	push	{r4, r5, r6, lr}
 800eaa8:	681d      	ldr	r5, [r3, #0]
 800eaaa:	4606      	mov	r6, r0
 800eaac:	460c      	mov	r4, r1
 800eaae:	b125      	cbz	r5, 800eaba <__swsetup_r+0x16>
 800eab0:	69ab      	ldr	r3, [r5, #24]
 800eab2:	b913      	cbnz	r3, 800eaba <__swsetup_r+0x16>
 800eab4:	4628      	mov	r0, r5
 800eab6:	f000 f985 	bl	800edc4 <__sinit>
 800eaba:	4b2e      	ldr	r3, [pc, #184]	; (800eb74 <__swsetup_r+0xd0>)
 800eabc:	429c      	cmp	r4, r3
 800eabe:	d10f      	bne.n	800eae0 <__swsetup_r+0x3c>
 800eac0:	686c      	ldr	r4, [r5, #4]
 800eac2:	89a3      	ldrh	r3, [r4, #12]
 800eac4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eac8:	0719      	lsls	r1, r3, #28
 800eaca:	d42c      	bmi.n	800eb26 <__swsetup_r+0x82>
 800eacc:	06dd      	lsls	r5, r3, #27
 800eace:	d411      	bmi.n	800eaf4 <__swsetup_r+0x50>
 800ead0:	2309      	movs	r3, #9
 800ead2:	6033      	str	r3, [r6, #0]
 800ead4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ead8:	81a3      	strh	r3, [r4, #12]
 800eada:	f04f 30ff 	mov.w	r0, #4294967295
 800eade:	e03e      	b.n	800eb5e <__swsetup_r+0xba>
 800eae0:	4b25      	ldr	r3, [pc, #148]	; (800eb78 <__swsetup_r+0xd4>)
 800eae2:	429c      	cmp	r4, r3
 800eae4:	d101      	bne.n	800eaea <__swsetup_r+0x46>
 800eae6:	68ac      	ldr	r4, [r5, #8]
 800eae8:	e7eb      	b.n	800eac2 <__swsetup_r+0x1e>
 800eaea:	4b24      	ldr	r3, [pc, #144]	; (800eb7c <__swsetup_r+0xd8>)
 800eaec:	429c      	cmp	r4, r3
 800eaee:	bf08      	it	eq
 800eaf0:	68ec      	ldreq	r4, [r5, #12]
 800eaf2:	e7e6      	b.n	800eac2 <__swsetup_r+0x1e>
 800eaf4:	0758      	lsls	r0, r3, #29
 800eaf6:	d512      	bpl.n	800eb1e <__swsetup_r+0x7a>
 800eaf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eafa:	b141      	cbz	r1, 800eb0e <__swsetup_r+0x6a>
 800eafc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb00:	4299      	cmp	r1, r3
 800eb02:	d002      	beq.n	800eb0a <__swsetup_r+0x66>
 800eb04:	4630      	mov	r0, r6
 800eb06:	f7ff fb31 	bl	800e16c <_free_r>
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	6363      	str	r3, [r4, #52]	; 0x34
 800eb0e:	89a3      	ldrh	r3, [r4, #12]
 800eb10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eb14:	81a3      	strh	r3, [r4, #12]
 800eb16:	2300      	movs	r3, #0
 800eb18:	6063      	str	r3, [r4, #4]
 800eb1a:	6923      	ldr	r3, [r4, #16]
 800eb1c:	6023      	str	r3, [r4, #0]
 800eb1e:	89a3      	ldrh	r3, [r4, #12]
 800eb20:	f043 0308 	orr.w	r3, r3, #8
 800eb24:	81a3      	strh	r3, [r4, #12]
 800eb26:	6923      	ldr	r3, [r4, #16]
 800eb28:	b94b      	cbnz	r3, 800eb3e <__swsetup_r+0x9a>
 800eb2a:	89a3      	ldrh	r3, [r4, #12]
 800eb2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eb30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb34:	d003      	beq.n	800eb3e <__swsetup_r+0x9a>
 800eb36:	4621      	mov	r1, r4
 800eb38:	4630      	mov	r0, r6
 800eb3a:	f000 fa09 	bl	800ef50 <__smakebuf_r>
 800eb3e:	89a0      	ldrh	r0, [r4, #12]
 800eb40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eb44:	f010 0301 	ands.w	r3, r0, #1
 800eb48:	d00a      	beq.n	800eb60 <__swsetup_r+0xbc>
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	60a3      	str	r3, [r4, #8]
 800eb4e:	6963      	ldr	r3, [r4, #20]
 800eb50:	425b      	negs	r3, r3
 800eb52:	61a3      	str	r3, [r4, #24]
 800eb54:	6923      	ldr	r3, [r4, #16]
 800eb56:	b943      	cbnz	r3, 800eb6a <__swsetup_r+0xc6>
 800eb58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eb5c:	d1ba      	bne.n	800ead4 <__swsetup_r+0x30>
 800eb5e:	bd70      	pop	{r4, r5, r6, pc}
 800eb60:	0781      	lsls	r1, r0, #30
 800eb62:	bf58      	it	pl
 800eb64:	6963      	ldrpl	r3, [r4, #20]
 800eb66:	60a3      	str	r3, [r4, #8]
 800eb68:	e7f4      	b.n	800eb54 <__swsetup_r+0xb0>
 800eb6a:	2000      	movs	r0, #0
 800eb6c:	e7f7      	b.n	800eb5e <__swsetup_r+0xba>
 800eb6e:	bf00      	nop
 800eb70:	2000000c 	.word	0x2000000c
 800eb74:	0800f5fc 	.word	0x0800f5fc
 800eb78:	0800f61c 	.word	0x0800f61c
 800eb7c:	0800f5dc 	.word	0x0800f5dc

0800eb80 <abort>:
 800eb80:	b508      	push	{r3, lr}
 800eb82:	2006      	movs	r0, #6
 800eb84:	f000 fa54 	bl	800f030 <raise>
 800eb88:	2001      	movs	r0, #1
 800eb8a:	f7fb f9b8 	bl	8009efe <_exit>
	...

0800eb90 <__sflush_r>:
 800eb90:	898a      	ldrh	r2, [r1, #12]
 800eb92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb96:	4605      	mov	r5, r0
 800eb98:	0710      	lsls	r0, r2, #28
 800eb9a:	460c      	mov	r4, r1
 800eb9c:	d458      	bmi.n	800ec50 <__sflush_r+0xc0>
 800eb9e:	684b      	ldr	r3, [r1, #4]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	dc05      	bgt.n	800ebb0 <__sflush_r+0x20>
 800eba4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	dc02      	bgt.n	800ebb0 <__sflush_r+0x20>
 800ebaa:	2000      	movs	r0, #0
 800ebac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebb2:	2e00      	cmp	r6, #0
 800ebb4:	d0f9      	beq.n	800ebaa <__sflush_r+0x1a>
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ebbc:	682f      	ldr	r7, [r5, #0]
 800ebbe:	602b      	str	r3, [r5, #0]
 800ebc0:	d032      	beq.n	800ec28 <__sflush_r+0x98>
 800ebc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ebc4:	89a3      	ldrh	r3, [r4, #12]
 800ebc6:	075a      	lsls	r2, r3, #29
 800ebc8:	d505      	bpl.n	800ebd6 <__sflush_r+0x46>
 800ebca:	6863      	ldr	r3, [r4, #4]
 800ebcc:	1ac0      	subs	r0, r0, r3
 800ebce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ebd0:	b10b      	cbz	r3, 800ebd6 <__sflush_r+0x46>
 800ebd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ebd4:	1ac0      	subs	r0, r0, r3
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	4602      	mov	r2, r0
 800ebda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebdc:	6a21      	ldr	r1, [r4, #32]
 800ebde:	4628      	mov	r0, r5
 800ebe0:	47b0      	blx	r6
 800ebe2:	1c43      	adds	r3, r0, #1
 800ebe4:	89a3      	ldrh	r3, [r4, #12]
 800ebe6:	d106      	bne.n	800ebf6 <__sflush_r+0x66>
 800ebe8:	6829      	ldr	r1, [r5, #0]
 800ebea:	291d      	cmp	r1, #29
 800ebec:	d82c      	bhi.n	800ec48 <__sflush_r+0xb8>
 800ebee:	4a2a      	ldr	r2, [pc, #168]	; (800ec98 <__sflush_r+0x108>)
 800ebf0:	40ca      	lsrs	r2, r1
 800ebf2:	07d6      	lsls	r6, r2, #31
 800ebf4:	d528      	bpl.n	800ec48 <__sflush_r+0xb8>
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	6062      	str	r2, [r4, #4]
 800ebfa:	04d9      	lsls	r1, r3, #19
 800ebfc:	6922      	ldr	r2, [r4, #16]
 800ebfe:	6022      	str	r2, [r4, #0]
 800ec00:	d504      	bpl.n	800ec0c <__sflush_r+0x7c>
 800ec02:	1c42      	adds	r2, r0, #1
 800ec04:	d101      	bne.n	800ec0a <__sflush_r+0x7a>
 800ec06:	682b      	ldr	r3, [r5, #0]
 800ec08:	b903      	cbnz	r3, 800ec0c <__sflush_r+0x7c>
 800ec0a:	6560      	str	r0, [r4, #84]	; 0x54
 800ec0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec0e:	602f      	str	r7, [r5, #0]
 800ec10:	2900      	cmp	r1, #0
 800ec12:	d0ca      	beq.n	800ebaa <__sflush_r+0x1a>
 800ec14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec18:	4299      	cmp	r1, r3
 800ec1a:	d002      	beq.n	800ec22 <__sflush_r+0x92>
 800ec1c:	4628      	mov	r0, r5
 800ec1e:	f7ff faa5 	bl	800e16c <_free_r>
 800ec22:	2000      	movs	r0, #0
 800ec24:	6360      	str	r0, [r4, #52]	; 0x34
 800ec26:	e7c1      	b.n	800ebac <__sflush_r+0x1c>
 800ec28:	6a21      	ldr	r1, [r4, #32]
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	4628      	mov	r0, r5
 800ec2e:	47b0      	blx	r6
 800ec30:	1c41      	adds	r1, r0, #1
 800ec32:	d1c7      	bne.n	800ebc4 <__sflush_r+0x34>
 800ec34:	682b      	ldr	r3, [r5, #0]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d0c4      	beq.n	800ebc4 <__sflush_r+0x34>
 800ec3a:	2b1d      	cmp	r3, #29
 800ec3c:	d001      	beq.n	800ec42 <__sflush_r+0xb2>
 800ec3e:	2b16      	cmp	r3, #22
 800ec40:	d101      	bne.n	800ec46 <__sflush_r+0xb6>
 800ec42:	602f      	str	r7, [r5, #0]
 800ec44:	e7b1      	b.n	800ebaa <__sflush_r+0x1a>
 800ec46:	89a3      	ldrh	r3, [r4, #12]
 800ec48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec4c:	81a3      	strh	r3, [r4, #12]
 800ec4e:	e7ad      	b.n	800ebac <__sflush_r+0x1c>
 800ec50:	690f      	ldr	r7, [r1, #16]
 800ec52:	2f00      	cmp	r7, #0
 800ec54:	d0a9      	beq.n	800ebaa <__sflush_r+0x1a>
 800ec56:	0793      	lsls	r3, r2, #30
 800ec58:	680e      	ldr	r6, [r1, #0]
 800ec5a:	bf08      	it	eq
 800ec5c:	694b      	ldreq	r3, [r1, #20]
 800ec5e:	600f      	str	r7, [r1, #0]
 800ec60:	bf18      	it	ne
 800ec62:	2300      	movne	r3, #0
 800ec64:	eba6 0807 	sub.w	r8, r6, r7
 800ec68:	608b      	str	r3, [r1, #8]
 800ec6a:	f1b8 0f00 	cmp.w	r8, #0
 800ec6e:	dd9c      	ble.n	800ebaa <__sflush_r+0x1a>
 800ec70:	6a21      	ldr	r1, [r4, #32]
 800ec72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ec74:	4643      	mov	r3, r8
 800ec76:	463a      	mov	r2, r7
 800ec78:	4628      	mov	r0, r5
 800ec7a:	47b0      	blx	r6
 800ec7c:	2800      	cmp	r0, #0
 800ec7e:	dc06      	bgt.n	800ec8e <__sflush_r+0xfe>
 800ec80:	89a3      	ldrh	r3, [r4, #12]
 800ec82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec86:	81a3      	strh	r3, [r4, #12]
 800ec88:	f04f 30ff 	mov.w	r0, #4294967295
 800ec8c:	e78e      	b.n	800ebac <__sflush_r+0x1c>
 800ec8e:	4407      	add	r7, r0
 800ec90:	eba8 0800 	sub.w	r8, r8, r0
 800ec94:	e7e9      	b.n	800ec6a <__sflush_r+0xda>
 800ec96:	bf00      	nop
 800ec98:	20400001 	.word	0x20400001

0800ec9c <_fflush_r>:
 800ec9c:	b538      	push	{r3, r4, r5, lr}
 800ec9e:	690b      	ldr	r3, [r1, #16]
 800eca0:	4605      	mov	r5, r0
 800eca2:	460c      	mov	r4, r1
 800eca4:	b913      	cbnz	r3, 800ecac <_fflush_r+0x10>
 800eca6:	2500      	movs	r5, #0
 800eca8:	4628      	mov	r0, r5
 800ecaa:	bd38      	pop	{r3, r4, r5, pc}
 800ecac:	b118      	cbz	r0, 800ecb6 <_fflush_r+0x1a>
 800ecae:	6983      	ldr	r3, [r0, #24]
 800ecb0:	b90b      	cbnz	r3, 800ecb6 <_fflush_r+0x1a>
 800ecb2:	f000 f887 	bl	800edc4 <__sinit>
 800ecb6:	4b14      	ldr	r3, [pc, #80]	; (800ed08 <_fflush_r+0x6c>)
 800ecb8:	429c      	cmp	r4, r3
 800ecba:	d11b      	bne.n	800ecf4 <_fflush_r+0x58>
 800ecbc:	686c      	ldr	r4, [r5, #4]
 800ecbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d0ef      	beq.n	800eca6 <_fflush_r+0xa>
 800ecc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ecc8:	07d0      	lsls	r0, r2, #31
 800ecca:	d404      	bmi.n	800ecd6 <_fflush_r+0x3a>
 800eccc:	0599      	lsls	r1, r3, #22
 800ecce:	d402      	bmi.n	800ecd6 <_fflush_r+0x3a>
 800ecd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecd2:	f000 f915 	bl	800ef00 <__retarget_lock_acquire_recursive>
 800ecd6:	4628      	mov	r0, r5
 800ecd8:	4621      	mov	r1, r4
 800ecda:	f7ff ff59 	bl	800eb90 <__sflush_r>
 800ecde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ece0:	07da      	lsls	r2, r3, #31
 800ece2:	4605      	mov	r5, r0
 800ece4:	d4e0      	bmi.n	800eca8 <_fflush_r+0xc>
 800ece6:	89a3      	ldrh	r3, [r4, #12]
 800ece8:	059b      	lsls	r3, r3, #22
 800ecea:	d4dd      	bmi.n	800eca8 <_fflush_r+0xc>
 800ecec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecee:	f000 f908 	bl	800ef02 <__retarget_lock_release_recursive>
 800ecf2:	e7d9      	b.n	800eca8 <_fflush_r+0xc>
 800ecf4:	4b05      	ldr	r3, [pc, #20]	; (800ed0c <_fflush_r+0x70>)
 800ecf6:	429c      	cmp	r4, r3
 800ecf8:	d101      	bne.n	800ecfe <_fflush_r+0x62>
 800ecfa:	68ac      	ldr	r4, [r5, #8]
 800ecfc:	e7df      	b.n	800ecbe <_fflush_r+0x22>
 800ecfe:	4b04      	ldr	r3, [pc, #16]	; (800ed10 <_fflush_r+0x74>)
 800ed00:	429c      	cmp	r4, r3
 800ed02:	bf08      	it	eq
 800ed04:	68ec      	ldreq	r4, [r5, #12]
 800ed06:	e7da      	b.n	800ecbe <_fflush_r+0x22>
 800ed08:	0800f5fc 	.word	0x0800f5fc
 800ed0c:	0800f61c 	.word	0x0800f61c
 800ed10:	0800f5dc 	.word	0x0800f5dc

0800ed14 <std>:
 800ed14:	2300      	movs	r3, #0
 800ed16:	b510      	push	{r4, lr}
 800ed18:	4604      	mov	r4, r0
 800ed1a:	e9c0 3300 	strd	r3, r3, [r0]
 800ed1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed22:	6083      	str	r3, [r0, #8]
 800ed24:	8181      	strh	r1, [r0, #12]
 800ed26:	6643      	str	r3, [r0, #100]	; 0x64
 800ed28:	81c2      	strh	r2, [r0, #14]
 800ed2a:	6183      	str	r3, [r0, #24]
 800ed2c:	4619      	mov	r1, r3
 800ed2e:	2208      	movs	r2, #8
 800ed30:	305c      	adds	r0, #92	; 0x5c
 800ed32:	f7fd fb59 	bl	800c3e8 <memset>
 800ed36:	4b05      	ldr	r3, [pc, #20]	; (800ed4c <std+0x38>)
 800ed38:	6263      	str	r3, [r4, #36]	; 0x24
 800ed3a:	4b05      	ldr	r3, [pc, #20]	; (800ed50 <std+0x3c>)
 800ed3c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed3e:	4b05      	ldr	r3, [pc, #20]	; (800ed54 <std+0x40>)
 800ed40:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed42:	4b05      	ldr	r3, [pc, #20]	; (800ed58 <std+0x44>)
 800ed44:	6224      	str	r4, [r4, #32]
 800ed46:	6323      	str	r3, [r4, #48]	; 0x30
 800ed48:	bd10      	pop	{r4, pc}
 800ed4a:	bf00      	nop
 800ed4c:	0800f069 	.word	0x0800f069
 800ed50:	0800f08b 	.word	0x0800f08b
 800ed54:	0800f0c3 	.word	0x0800f0c3
 800ed58:	0800f0e7 	.word	0x0800f0e7

0800ed5c <_cleanup_r>:
 800ed5c:	4901      	ldr	r1, [pc, #4]	; (800ed64 <_cleanup_r+0x8>)
 800ed5e:	f000 b8af 	b.w	800eec0 <_fwalk_reent>
 800ed62:	bf00      	nop
 800ed64:	0800ec9d 	.word	0x0800ec9d

0800ed68 <__sfmoreglue>:
 800ed68:	b570      	push	{r4, r5, r6, lr}
 800ed6a:	2268      	movs	r2, #104	; 0x68
 800ed6c:	1e4d      	subs	r5, r1, #1
 800ed6e:	4355      	muls	r5, r2
 800ed70:	460e      	mov	r6, r1
 800ed72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ed76:	f7ff fa65 	bl	800e244 <_malloc_r>
 800ed7a:	4604      	mov	r4, r0
 800ed7c:	b140      	cbz	r0, 800ed90 <__sfmoreglue+0x28>
 800ed7e:	2100      	movs	r1, #0
 800ed80:	e9c0 1600 	strd	r1, r6, [r0]
 800ed84:	300c      	adds	r0, #12
 800ed86:	60a0      	str	r0, [r4, #8]
 800ed88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ed8c:	f7fd fb2c 	bl	800c3e8 <memset>
 800ed90:	4620      	mov	r0, r4
 800ed92:	bd70      	pop	{r4, r5, r6, pc}

0800ed94 <__sfp_lock_acquire>:
 800ed94:	4801      	ldr	r0, [pc, #4]	; (800ed9c <__sfp_lock_acquire+0x8>)
 800ed96:	f000 b8b3 	b.w	800ef00 <__retarget_lock_acquire_recursive>
 800ed9a:	bf00      	nop
 800ed9c:	20000315 	.word	0x20000315

0800eda0 <__sfp_lock_release>:
 800eda0:	4801      	ldr	r0, [pc, #4]	; (800eda8 <__sfp_lock_release+0x8>)
 800eda2:	f000 b8ae 	b.w	800ef02 <__retarget_lock_release_recursive>
 800eda6:	bf00      	nop
 800eda8:	20000315 	.word	0x20000315

0800edac <__sinit_lock_acquire>:
 800edac:	4801      	ldr	r0, [pc, #4]	; (800edb4 <__sinit_lock_acquire+0x8>)
 800edae:	f000 b8a7 	b.w	800ef00 <__retarget_lock_acquire_recursive>
 800edb2:	bf00      	nop
 800edb4:	20000316 	.word	0x20000316

0800edb8 <__sinit_lock_release>:
 800edb8:	4801      	ldr	r0, [pc, #4]	; (800edc0 <__sinit_lock_release+0x8>)
 800edba:	f000 b8a2 	b.w	800ef02 <__retarget_lock_release_recursive>
 800edbe:	bf00      	nop
 800edc0:	20000316 	.word	0x20000316

0800edc4 <__sinit>:
 800edc4:	b510      	push	{r4, lr}
 800edc6:	4604      	mov	r4, r0
 800edc8:	f7ff fff0 	bl	800edac <__sinit_lock_acquire>
 800edcc:	69a3      	ldr	r3, [r4, #24]
 800edce:	b11b      	cbz	r3, 800edd8 <__sinit+0x14>
 800edd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edd4:	f7ff bff0 	b.w	800edb8 <__sinit_lock_release>
 800edd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eddc:	6523      	str	r3, [r4, #80]	; 0x50
 800edde:	4b13      	ldr	r3, [pc, #76]	; (800ee2c <__sinit+0x68>)
 800ede0:	4a13      	ldr	r2, [pc, #76]	; (800ee30 <__sinit+0x6c>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	62a2      	str	r2, [r4, #40]	; 0x28
 800ede6:	42a3      	cmp	r3, r4
 800ede8:	bf04      	itt	eq
 800edea:	2301      	moveq	r3, #1
 800edec:	61a3      	streq	r3, [r4, #24]
 800edee:	4620      	mov	r0, r4
 800edf0:	f000 f820 	bl	800ee34 <__sfp>
 800edf4:	6060      	str	r0, [r4, #4]
 800edf6:	4620      	mov	r0, r4
 800edf8:	f000 f81c 	bl	800ee34 <__sfp>
 800edfc:	60a0      	str	r0, [r4, #8]
 800edfe:	4620      	mov	r0, r4
 800ee00:	f000 f818 	bl	800ee34 <__sfp>
 800ee04:	2200      	movs	r2, #0
 800ee06:	60e0      	str	r0, [r4, #12]
 800ee08:	2104      	movs	r1, #4
 800ee0a:	6860      	ldr	r0, [r4, #4]
 800ee0c:	f7ff ff82 	bl	800ed14 <std>
 800ee10:	68a0      	ldr	r0, [r4, #8]
 800ee12:	2201      	movs	r2, #1
 800ee14:	2109      	movs	r1, #9
 800ee16:	f7ff ff7d 	bl	800ed14 <std>
 800ee1a:	68e0      	ldr	r0, [r4, #12]
 800ee1c:	2202      	movs	r2, #2
 800ee1e:	2112      	movs	r1, #18
 800ee20:	f7ff ff78 	bl	800ed14 <std>
 800ee24:	2301      	movs	r3, #1
 800ee26:	61a3      	str	r3, [r4, #24]
 800ee28:	e7d2      	b.n	800edd0 <__sinit+0xc>
 800ee2a:	bf00      	nop
 800ee2c:	0800f260 	.word	0x0800f260
 800ee30:	0800ed5d 	.word	0x0800ed5d

0800ee34 <__sfp>:
 800ee34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee36:	4607      	mov	r7, r0
 800ee38:	f7ff ffac 	bl	800ed94 <__sfp_lock_acquire>
 800ee3c:	4b1e      	ldr	r3, [pc, #120]	; (800eeb8 <__sfp+0x84>)
 800ee3e:	681e      	ldr	r6, [r3, #0]
 800ee40:	69b3      	ldr	r3, [r6, #24]
 800ee42:	b913      	cbnz	r3, 800ee4a <__sfp+0x16>
 800ee44:	4630      	mov	r0, r6
 800ee46:	f7ff ffbd 	bl	800edc4 <__sinit>
 800ee4a:	3648      	adds	r6, #72	; 0x48
 800ee4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ee50:	3b01      	subs	r3, #1
 800ee52:	d503      	bpl.n	800ee5c <__sfp+0x28>
 800ee54:	6833      	ldr	r3, [r6, #0]
 800ee56:	b30b      	cbz	r3, 800ee9c <__sfp+0x68>
 800ee58:	6836      	ldr	r6, [r6, #0]
 800ee5a:	e7f7      	b.n	800ee4c <__sfp+0x18>
 800ee5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ee60:	b9d5      	cbnz	r5, 800ee98 <__sfp+0x64>
 800ee62:	4b16      	ldr	r3, [pc, #88]	; (800eebc <__sfp+0x88>)
 800ee64:	60e3      	str	r3, [r4, #12]
 800ee66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ee6a:	6665      	str	r5, [r4, #100]	; 0x64
 800ee6c:	f000 f847 	bl	800eefe <__retarget_lock_init_recursive>
 800ee70:	f7ff ff96 	bl	800eda0 <__sfp_lock_release>
 800ee74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ee78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ee7c:	6025      	str	r5, [r4, #0]
 800ee7e:	61a5      	str	r5, [r4, #24]
 800ee80:	2208      	movs	r2, #8
 800ee82:	4629      	mov	r1, r5
 800ee84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ee88:	f7fd faae 	bl	800c3e8 <memset>
 800ee8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ee90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ee94:	4620      	mov	r0, r4
 800ee96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee98:	3468      	adds	r4, #104	; 0x68
 800ee9a:	e7d9      	b.n	800ee50 <__sfp+0x1c>
 800ee9c:	2104      	movs	r1, #4
 800ee9e:	4638      	mov	r0, r7
 800eea0:	f7ff ff62 	bl	800ed68 <__sfmoreglue>
 800eea4:	4604      	mov	r4, r0
 800eea6:	6030      	str	r0, [r6, #0]
 800eea8:	2800      	cmp	r0, #0
 800eeaa:	d1d5      	bne.n	800ee58 <__sfp+0x24>
 800eeac:	f7ff ff78 	bl	800eda0 <__sfp_lock_release>
 800eeb0:	230c      	movs	r3, #12
 800eeb2:	603b      	str	r3, [r7, #0]
 800eeb4:	e7ee      	b.n	800ee94 <__sfp+0x60>
 800eeb6:	bf00      	nop
 800eeb8:	0800f260 	.word	0x0800f260
 800eebc:	ffff0001 	.word	0xffff0001

0800eec0 <_fwalk_reent>:
 800eec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eec4:	4606      	mov	r6, r0
 800eec6:	4688      	mov	r8, r1
 800eec8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eecc:	2700      	movs	r7, #0
 800eece:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eed2:	f1b9 0901 	subs.w	r9, r9, #1
 800eed6:	d505      	bpl.n	800eee4 <_fwalk_reent+0x24>
 800eed8:	6824      	ldr	r4, [r4, #0]
 800eeda:	2c00      	cmp	r4, #0
 800eedc:	d1f7      	bne.n	800eece <_fwalk_reent+0xe>
 800eede:	4638      	mov	r0, r7
 800eee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eee4:	89ab      	ldrh	r3, [r5, #12]
 800eee6:	2b01      	cmp	r3, #1
 800eee8:	d907      	bls.n	800eefa <_fwalk_reent+0x3a>
 800eeea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eeee:	3301      	adds	r3, #1
 800eef0:	d003      	beq.n	800eefa <_fwalk_reent+0x3a>
 800eef2:	4629      	mov	r1, r5
 800eef4:	4630      	mov	r0, r6
 800eef6:	47c0      	blx	r8
 800eef8:	4307      	orrs	r7, r0
 800eefa:	3568      	adds	r5, #104	; 0x68
 800eefc:	e7e9      	b.n	800eed2 <_fwalk_reent+0x12>

0800eefe <__retarget_lock_init_recursive>:
 800eefe:	4770      	bx	lr

0800ef00 <__retarget_lock_acquire_recursive>:
 800ef00:	4770      	bx	lr

0800ef02 <__retarget_lock_release_recursive>:
 800ef02:	4770      	bx	lr

0800ef04 <__swhatbuf_r>:
 800ef04:	b570      	push	{r4, r5, r6, lr}
 800ef06:	460e      	mov	r6, r1
 800ef08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef0c:	2900      	cmp	r1, #0
 800ef0e:	b096      	sub	sp, #88	; 0x58
 800ef10:	4614      	mov	r4, r2
 800ef12:	461d      	mov	r5, r3
 800ef14:	da08      	bge.n	800ef28 <__swhatbuf_r+0x24>
 800ef16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	602a      	str	r2, [r5, #0]
 800ef1e:	061a      	lsls	r2, r3, #24
 800ef20:	d410      	bmi.n	800ef44 <__swhatbuf_r+0x40>
 800ef22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef26:	e00e      	b.n	800ef46 <__swhatbuf_r+0x42>
 800ef28:	466a      	mov	r2, sp
 800ef2a:	f000 f903 	bl	800f134 <_fstat_r>
 800ef2e:	2800      	cmp	r0, #0
 800ef30:	dbf1      	blt.n	800ef16 <__swhatbuf_r+0x12>
 800ef32:	9a01      	ldr	r2, [sp, #4]
 800ef34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ef38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ef3c:	425a      	negs	r2, r3
 800ef3e:	415a      	adcs	r2, r3
 800ef40:	602a      	str	r2, [r5, #0]
 800ef42:	e7ee      	b.n	800ef22 <__swhatbuf_r+0x1e>
 800ef44:	2340      	movs	r3, #64	; 0x40
 800ef46:	2000      	movs	r0, #0
 800ef48:	6023      	str	r3, [r4, #0]
 800ef4a:	b016      	add	sp, #88	; 0x58
 800ef4c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ef50 <__smakebuf_r>:
 800ef50:	898b      	ldrh	r3, [r1, #12]
 800ef52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef54:	079d      	lsls	r5, r3, #30
 800ef56:	4606      	mov	r6, r0
 800ef58:	460c      	mov	r4, r1
 800ef5a:	d507      	bpl.n	800ef6c <__smakebuf_r+0x1c>
 800ef5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ef60:	6023      	str	r3, [r4, #0]
 800ef62:	6123      	str	r3, [r4, #16]
 800ef64:	2301      	movs	r3, #1
 800ef66:	6163      	str	r3, [r4, #20]
 800ef68:	b002      	add	sp, #8
 800ef6a:	bd70      	pop	{r4, r5, r6, pc}
 800ef6c:	ab01      	add	r3, sp, #4
 800ef6e:	466a      	mov	r2, sp
 800ef70:	f7ff ffc8 	bl	800ef04 <__swhatbuf_r>
 800ef74:	9900      	ldr	r1, [sp, #0]
 800ef76:	4605      	mov	r5, r0
 800ef78:	4630      	mov	r0, r6
 800ef7a:	f7ff f963 	bl	800e244 <_malloc_r>
 800ef7e:	b948      	cbnz	r0, 800ef94 <__smakebuf_r+0x44>
 800ef80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef84:	059a      	lsls	r2, r3, #22
 800ef86:	d4ef      	bmi.n	800ef68 <__smakebuf_r+0x18>
 800ef88:	f023 0303 	bic.w	r3, r3, #3
 800ef8c:	f043 0302 	orr.w	r3, r3, #2
 800ef90:	81a3      	strh	r3, [r4, #12]
 800ef92:	e7e3      	b.n	800ef5c <__smakebuf_r+0xc>
 800ef94:	4b0d      	ldr	r3, [pc, #52]	; (800efcc <__smakebuf_r+0x7c>)
 800ef96:	62b3      	str	r3, [r6, #40]	; 0x28
 800ef98:	89a3      	ldrh	r3, [r4, #12]
 800ef9a:	6020      	str	r0, [r4, #0]
 800ef9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efa0:	81a3      	strh	r3, [r4, #12]
 800efa2:	9b00      	ldr	r3, [sp, #0]
 800efa4:	6163      	str	r3, [r4, #20]
 800efa6:	9b01      	ldr	r3, [sp, #4]
 800efa8:	6120      	str	r0, [r4, #16]
 800efaa:	b15b      	cbz	r3, 800efc4 <__smakebuf_r+0x74>
 800efac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efb0:	4630      	mov	r0, r6
 800efb2:	f000 f8d1 	bl	800f158 <_isatty_r>
 800efb6:	b128      	cbz	r0, 800efc4 <__smakebuf_r+0x74>
 800efb8:	89a3      	ldrh	r3, [r4, #12]
 800efba:	f023 0303 	bic.w	r3, r3, #3
 800efbe:	f043 0301 	orr.w	r3, r3, #1
 800efc2:	81a3      	strh	r3, [r4, #12]
 800efc4:	89a0      	ldrh	r0, [r4, #12]
 800efc6:	4305      	orrs	r5, r0
 800efc8:	81a5      	strh	r5, [r4, #12]
 800efca:	e7cd      	b.n	800ef68 <__smakebuf_r+0x18>
 800efcc:	0800ed5d 	.word	0x0800ed5d

0800efd0 <_malloc_usable_size_r>:
 800efd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efd4:	1f18      	subs	r0, r3, #4
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	bfbc      	itt	lt
 800efda:	580b      	ldrlt	r3, [r1, r0]
 800efdc:	18c0      	addlt	r0, r0, r3
 800efde:	4770      	bx	lr

0800efe0 <_raise_r>:
 800efe0:	291f      	cmp	r1, #31
 800efe2:	b538      	push	{r3, r4, r5, lr}
 800efe4:	4604      	mov	r4, r0
 800efe6:	460d      	mov	r5, r1
 800efe8:	d904      	bls.n	800eff4 <_raise_r+0x14>
 800efea:	2316      	movs	r3, #22
 800efec:	6003      	str	r3, [r0, #0]
 800efee:	f04f 30ff 	mov.w	r0, #4294967295
 800eff2:	bd38      	pop	{r3, r4, r5, pc}
 800eff4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eff6:	b112      	cbz	r2, 800effe <_raise_r+0x1e>
 800eff8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800effc:	b94b      	cbnz	r3, 800f012 <_raise_r+0x32>
 800effe:	4620      	mov	r0, r4
 800f000:	f000 f830 	bl	800f064 <_getpid_r>
 800f004:	462a      	mov	r2, r5
 800f006:	4601      	mov	r1, r0
 800f008:	4620      	mov	r0, r4
 800f00a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f00e:	f000 b817 	b.w	800f040 <_kill_r>
 800f012:	2b01      	cmp	r3, #1
 800f014:	d00a      	beq.n	800f02c <_raise_r+0x4c>
 800f016:	1c59      	adds	r1, r3, #1
 800f018:	d103      	bne.n	800f022 <_raise_r+0x42>
 800f01a:	2316      	movs	r3, #22
 800f01c:	6003      	str	r3, [r0, #0]
 800f01e:	2001      	movs	r0, #1
 800f020:	e7e7      	b.n	800eff2 <_raise_r+0x12>
 800f022:	2400      	movs	r4, #0
 800f024:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f028:	4628      	mov	r0, r5
 800f02a:	4798      	blx	r3
 800f02c:	2000      	movs	r0, #0
 800f02e:	e7e0      	b.n	800eff2 <_raise_r+0x12>

0800f030 <raise>:
 800f030:	4b02      	ldr	r3, [pc, #8]	; (800f03c <raise+0xc>)
 800f032:	4601      	mov	r1, r0
 800f034:	6818      	ldr	r0, [r3, #0]
 800f036:	f7ff bfd3 	b.w	800efe0 <_raise_r>
 800f03a:	bf00      	nop
 800f03c:	2000000c 	.word	0x2000000c

0800f040 <_kill_r>:
 800f040:	b538      	push	{r3, r4, r5, lr}
 800f042:	4d07      	ldr	r5, [pc, #28]	; (800f060 <_kill_r+0x20>)
 800f044:	2300      	movs	r3, #0
 800f046:	4604      	mov	r4, r0
 800f048:	4608      	mov	r0, r1
 800f04a:	4611      	mov	r1, r2
 800f04c:	602b      	str	r3, [r5, #0]
 800f04e:	f7fa ff46 	bl	8009ede <_kill>
 800f052:	1c43      	adds	r3, r0, #1
 800f054:	d102      	bne.n	800f05c <_kill_r+0x1c>
 800f056:	682b      	ldr	r3, [r5, #0]
 800f058:	b103      	cbz	r3, 800f05c <_kill_r+0x1c>
 800f05a:	6023      	str	r3, [r4, #0]
 800f05c:	bd38      	pop	{r3, r4, r5, pc}
 800f05e:	bf00      	nop
 800f060:	20000310 	.word	0x20000310

0800f064 <_getpid_r>:
 800f064:	f7fa bf33 	b.w	8009ece <_getpid>

0800f068 <__sread>:
 800f068:	b510      	push	{r4, lr}
 800f06a:	460c      	mov	r4, r1
 800f06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f070:	f000 f894 	bl	800f19c <_read_r>
 800f074:	2800      	cmp	r0, #0
 800f076:	bfab      	itete	ge
 800f078:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f07a:	89a3      	ldrhlt	r3, [r4, #12]
 800f07c:	181b      	addge	r3, r3, r0
 800f07e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f082:	bfac      	ite	ge
 800f084:	6563      	strge	r3, [r4, #84]	; 0x54
 800f086:	81a3      	strhlt	r3, [r4, #12]
 800f088:	bd10      	pop	{r4, pc}

0800f08a <__swrite>:
 800f08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f08e:	461f      	mov	r7, r3
 800f090:	898b      	ldrh	r3, [r1, #12]
 800f092:	05db      	lsls	r3, r3, #23
 800f094:	4605      	mov	r5, r0
 800f096:	460c      	mov	r4, r1
 800f098:	4616      	mov	r6, r2
 800f09a:	d505      	bpl.n	800f0a8 <__swrite+0x1e>
 800f09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0a0:	2302      	movs	r3, #2
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	f000 f868 	bl	800f178 <_lseek_r>
 800f0a8:	89a3      	ldrh	r3, [r4, #12]
 800f0aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f0ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f0b2:	81a3      	strh	r3, [r4, #12]
 800f0b4:	4632      	mov	r2, r6
 800f0b6:	463b      	mov	r3, r7
 800f0b8:	4628      	mov	r0, r5
 800f0ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0be:	f000 b817 	b.w	800f0f0 <_write_r>

0800f0c2 <__sseek>:
 800f0c2:	b510      	push	{r4, lr}
 800f0c4:	460c      	mov	r4, r1
 800f0c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0ca:	f000 f855 	bl	800f178 <_lseek_r>
 800f0ce:	1c43      	adds	r3, r0, #1
 800f0d0:	89a3      	ldrh	r3, [r4, #12]
 800f0d2:	bf15      	itete	ne
 800f0d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f0d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f0da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f0de:	81a3      	strheq	r3, [r4, #12]
 800f0e0:	bf18      	it	ne
 800f0e2:	81a3      	strhne	r3, [r4, #12]
 800f0e4:	bd10      	pop	{r4, pc}

0800f0e6 <__sclose>:
 800f0e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0ea:	f000 b813 	b.w	800f114 <_close_r>
	...

0800f0f0 <_write_r>:
 800f0f0:	b538      	push	{r3, r4, r5, lr}
 800f0f2:	4d07      	ldr	r5, [pc, #28]	; (800f110 <_write_r+0x20>)
 800f0f4:	4604      	mov	r4, r0
 800f0f6:	4608      	mov	r0, r1
 800f0f8:	4611      	mov	r1, r2
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	602a      	str	r2, [r5, #0]
 800f0fe:	461a      	mov	r2, r3
 800f100:	f7fa ff24 	bl	8009f4c <_write>
 800f104:	1c43      	adds	r3, r0, #1
 800f106:	d102      	bne.n	800f10e <_write_r+0x1e>
 800f108:	682b      	ldr	r3, [r5, #0]
 800f10a:	b103      	cbz	r3, 800f10e <_write_r+0x1e>
 800f10c:	6023      	str	r3, [r4, #0]
 800f10e:	bd38      	pop	{r3, r4, r5, pc}
 800f110:	20000310 	.word	0x20000310

0800f114 <_close_r>:
 800f114:	b538      	push	{r3, r4, r5, lr}
 800f116:	4d06      	ldr	r5, [pc, #24]	; (800f130 <_close_r+0x1c>)
 800f118:	2300      	movs	r3, #0
 800f11a:	4604      	mov	r4, r0
 800f11c:	4608      	mov	r0, r1
 800f11e:	602b      	str	r3, [r5, #0]
 800f120:	f7fa ff30 	bl	8009f84 <_close>
 800f124:	1c43      	adds	r3, r0, #1
 800f126:	d102      	bne.n	800f12e <_close_r+0x1a>
 800f128:	682b      	ldr	r3, [r5, #0]
 800f12a:	b103      	cbz	r3, 800f12e <_close_r+0x1a>
 800f12c:	6023      	str	r3, [r4, #0]
 800f12e:	bd38      	pop	{r3, r4, r5, pc}
 800f130:	20000310 	.word	0x20000310

0800f134 <_fstat_r>:
 800f134:	b538      	push	{r3, r4, r5, lr}
 800f136:	4d07      	ldr	r5, [pc, #28]	; (800f154 <_fstat_r+0x20>)
 800f138:	2300      	movs	r3, #0
 800f13a:	4604      	mov	r4, r0
 800f13c:	4608      	mov	r0, r1
 800f13e:	4611      	mov	r1, r2
 800f140:	602b      	str	r3, [r5, #0]
 800f142:	f7fa ff2b 	bl	8009f9c <_fstat>
 800f146:	1c43      	adds	r3, r0, #1
 800f148:	d102      	bne.n	800f150 <_fstat_r+0x1c>
 800f14a:	682b      	ldr	r3, [r5, #0]
 800f14c:	b103      	cbz	r3, 800f150 <_fstat_r+0x1c>
 800f14e:	6023      	str	r3, [r4, #0]
 800f150:	bd38      	pop	{r3, r4, r5, pc}
 800f152:	bf00      	nop
 800f154:	20000310 	.word	0x20000310

0800f158 <_isatty_r>:
 800f158:	b538      	push	{r3, r4, r5, lr}
 800f15a:	4d06      	ldr	r5, [pc, #24]	; (800f174 <_isatty_r+0x1c>)
 800f15c:	2300      	movs	r3, #0
 800f15e:	4604      	mov	r4, r0
 800f160:	4608      	mov	r0, r1
 800f162:	602b      	str	r3, [r5, #0]
 800f164:	f7fa ff2a 	bl	8009fbc <_isatty>
 800f168:	1c43      	adds	r3, r0, #1
 800f16a:	d102      	bne.n	800f172 <_isatty_r+0x1a>
 800f16c:	682b      	ldr	r3, [r5, #0]
 800f16e:	b103      	cbz	r3, 800f172 <_isatty_r+0x1a>
 800f170:	6023      	str	r3, [r4, #0]
 800f172:	bd38      	pop	{r3, r4, r5, pc}
 800f174:	20000310 	.word	0x20000310

0800f178 <_lseek_r>:
 800f178:	b538      	push	{r3, r4, r5, lr}
 800f17a:	4d07      	ldr	r5, [pc, #28]	; (800f198 <_lseek_r+0x20>)
 800f17c:	4604      	mov	r4, r0
 800f17e:	4608      	mov	r0, r1
 800f180:	4611      	mov	r1, r2
 800f182:	2200      	movs	r2, #0
 800f184:	602a      	str	r2, [r5, #0]
 800f186:	461a      	mov	r2, r3
 800f188:	f7fa ff23 	bl	8009fd2 <_lseek>
 800f18c:	1c43      	adds	r3, r0, #1
 800f18e:	d102      	bne.n	800f196 <_lseek_r+0x1e>
 800f190:	682b      	ldr	r3, [r5, #0]
 800f192:	b103      	cbz	r3, 800f196 <_lseek_r+0x1e>
 800f194:	6023      	str	r3, [r4, #0]
 800f196:	bd38      	pop	{r3, r4, r5, pc}
 800f198:	20000310 	.word	0x20000310

0800f19c <_read_r>:
 800f19c:	b538      	push	{r3, r4, r5, lr}
 800f19e:	4d07      	ldr	r5, [pc, #28]	; (800f1bc <_read_r+0x20>)
 800f1a0:	4604      	mov	r4, r0
 800f1a2:	4608      	mov	r0, r1
 800f1a4:	4611      	mov	r1, r2
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	602a      	str	r2, [r5, #0]
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	f7fa feb1 	bl	8009f12 <_read>
 800f1b0:	1c43      	adds	r3, r0, #1
 800f1b2:	d102      	bne.n	800f1ba <_read_r+0x1e>
 800f1b4:	682b      	ldr	r3, [r5, #0]
 800f1b6:	b103      	cbz	r3, 800f1ba <_read_r+0x1e>
 800f1b8:	6023      	str	r3, [r4, #0]
 800f1ba:	bd38      	pop	{r3, r4, r5, pc}
 800f1bc:	20000310 	.word	0x20000310

0800f1c0 <_init>:
 800f1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1c2:	bf00      	nop
 800f1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1c6:	bc08      	pop	{r3}
 800f1c8:	469e      	mov	lr, r3
 800f1ca:	4770      	bx	lr

0800f1cc <_fini>:
 800f1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ce:	bf00      	nop
 800f1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1d2:	bc08      	pop	{r3}
 800f1d4:	469e      	mov	lr, r3
 800f1d6:	4770      	bx	lr

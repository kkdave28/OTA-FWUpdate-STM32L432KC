/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CRC_HandleTypeDef hcrc;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CRC_Init(void);
static void MX_USART1_UART_Init(void);
static void FW_Upgrade();
static void Delta_FW_Upgrade();
uint8_t transaction_buf [MAX_BLOCK_SZ];
static uint16_t UART_gets(uint8_t *buf);
static HAL_StatusTypeDef program_flash(uint8_t * data, uint16_t len, uint8_t page_num, uint8_t num_pages, uint32_t start_addr);
static void UART_getChunk(UART_HandleTypeDef *huart, uint8_t * buf, uint16_t len);
static void UART_putc(UART_HandleTypeDef *huart, uint8_t * ch);
static void UART_getc(UART_HandleTypeDef *huart, uint8_t * ch);
static void flash_mass_erase();
static void Error();
static void start_app(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_CRC_Init();
  MX_USART1_UART_Init();
  flash_mass_erase();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  unsigned char c = 0;
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	c = 's';
    /* USER CODE END WHILE */
	UART_putc(&huart1, &c);
	UART_getc(&huart1, &c);
	if(c == 'a')
		FW_Upgrade();
	else if (c == 'b')
		Delta_FW_Upgrade();
	else if (c == 'c')
		start_app();
	else
		continue;
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{

  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitTypeDef GPIO_InitStructure2;
  GPIO_InitStructure.Pin = GPIO_PIN_12;
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull = GPIO_NOPULL;
  GPIO_InitStructure.Alternate = GPIO_AF7_USART1;
  GPIO_InitStructure2.Pin = LED_PIN;
  GPIO_InitStructure2.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStructure2.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure2.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
  HAL_GPIO_Init(LED_PORT, &GPIO_InitStructure2);
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
static uint16_t UART_gets(uint8_t * buf)
{
	unsigned char c = 0;
	uint16_t index = 0;
	while(c != '\n')
	{
		HAL_UART_Receive(&huart1, &c, 1, 100);
		buf[index++] = c;
	}
	buf[index] = '\0';
	return index;
}
static void UART_putc(UART_HandleTypeDef *huart, uint8_t * ch)
{
	HAL_UART_Transmit(huart, ch, 1, 100);
}
static void UART_getc(UART_HandleTypeDef *huart, uint8_t * ch)
{
	HAL_UART_Receive(huart, ch, 1, 500);
}
static void UART_getChunk(UART_HandleTypeDef *huart, uint8_t * buf, uint16_t len)
{
	uint16_t index = 0;
	while(len > 0)
	{
		UART_getc(huart, buf+index);
		index++;
		len--;
	}
}
static void FW_Upgrade()
{
	unsigned char c = 0;
	uint32_t app_sz = 0;
	uint16_t chars_read = 0;
	uint8_t current_page = 255;
	HAL_StatusTypeDef ret_code = HAL_OK;
	uint32_t current_address = 0;
	uint16_t chunk_sz = 0;
	while(1)
	{
		UART_getc(&huart1, &c);
		if(c == 'l')
		{
			chars_read = UART_gets(transaction_buf);
			app_sz = atoi(transaction_buf);
			current_page = APP_INFO_PAGE_NUM;
			current_address = APP_INFO_ADDR;
			ret_code = program_flash((uint8_t *)&app_sz, sizeof(uint32_t), current_page, 1, current_address);
			current_page = 255;
			current_address = 0;
			memset(transaction_buf, 0, MAX_BLOCK_SZ);
			chunk_sz = (app_sz > MAX_BLOCK_SZ) ? MAX_BLOCK_SZ : app_sz;
			current_page = APP_PAGE_NUM_LOW;
			current_address = APP_START_ADDR;
			c = 'c';
			UART_putc(&huart1, &c);
			c = 'r';
			HAL_Delay(100);
			while(app_sz)
			{
				UART_putc(&huart1, &c);
				UART_getChunk(&huart1, transaction_buf, chunk_sz);
				ret_code = program_flash(transaction_buf, chunk_sz, current_page, 1, current_address);
				current_page++;
				current_address+=chunk_sz;
				app_sz -= app_sz > MAX_BLOCK_SZ ? MAX_BLOCK_SZ : app_sz;
				chunk_sz = app_sz > MAX_BLOCK_SZ ? MAX_BLOCK_SZ : app_sz;
//					c = 'r';
//					UART_putc(&huart1, &c);
			}
			start_app();

		}
		else
			continue;
	}
}

static void Delta_FW_Upgrade()
{
	unsigned char c = 0;
	uint8_t start_page = 0;
	uint16_t offset = 0;
	uint16_t chars_read = 0;
	uint16_t delta_sz = 0;
//uint8_t current_page = 255;
	HAL_StatusTypeDef ret_code = HAL_OK;
	//uint32_t current_address = 0;
	//uint16_t chunk_sz = 0;
	while(1)
		{
			UART_getc(&huart1, &c);
			if(c == 'l')
			{
				chars_read = UART_gets(transaction_buf);
				start_page = atoi(transaction_buf);
			}
			if( c == 'm')
			{
				chars_read = UART_gets(transaction_buf);
				offset = atoi(transaction_buf);
			}
			if( c == 'n')
			{
				chars_read = UART_gets(transaction_buf);
				delta_sz = atoi(transaction_buf);
				c = 'f';
				UART_putc(&huart1, &c);
				while(delta_sz)
				{
					c = 'r';
					UART_putc(&huart1, &c);
					UART_getChunk(&huart1, transaction_buf, delta_sz);
					//delta_sz = 0;
					uint8_t page_buffer [MAX_BLOCK_SZ];
					uint32_t page_start_addr = FLASH_START + (start_page * MAX_BLOCK_SZ);
					memcpy(page_buffer, page_start_addr, MAX_BLOCK_SZ);
					uint16_t index = 0;
					for(; index < delta_sz; index ++)
						page_buffer[index + offset] = transaction_buf[index];


				}
			}
		}

}

static HAL_StatusTypeDef program_flash(uint8_t * data, uint16_t len, uint8_t page_num, uint8_t num_pages, uint32_t start_addr)
{
	HAL_StatusTypeDef code;
	uint32_t Page_Error;
	uint64_t Program_Buf;
	uint16_t index = 0;
	code = HAL_FLASH_Unlock();

	if(code != HAL_OK)
	{
		//const char * s = "FLASH UNLOCK FAILED!\n";
		Error();
		return code;
	}

	FLASH_EraseInitTypeDef EStruct;
	EStruct.Banks = FLASH_BANK_1;
	EStruct.TypeErase = FLASH_TYPEERASE_PAGES;
	EStruct.Page = (uint32_t)page_num;
	EStruct.NbPages = (uint32_t) num_pages;
	code = HAL_FLASHEx_Erase(&EStruct, &Page_Error);

	if(code != HAL_OK)
	{
		//const char * s = "ERASE FLASH FAILED!\n";
		Error();
		return code;
	}
	for(; index < len; index+=8)
	{
		memset(&Program_Buf, 0, sizeof(uint64_t));
		memcpy(&Program_Buf, data+index, sizeof(uint64_t) > len - index ? len - index : sizeof(uint64_t));
		code = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, start_addr+index, Program_Buf);
		if(code != HAL_OK)
		{
			//const char * s = "PROGRAM FLASH FAILED!\n";
			Error();
			return code;
		}

	}
	code = HAL_FLASH_Lock();
	if(code != HAL_OK)
	{
		//const char * s = "FLASH LOCK FAILED!\n";
		Error();
		return code;
	}
	return code;

}
static void flash_mass_erase()
{
	FLASH_EraseInitTypeDef EStruct;
	HAL_StatusTypeDef code;
	uint32_t Page_Error;
	EStruct.Banks = FLASH_BANK_1;
	EStruct.TypeErase = FLASH_TYPEERASE_PAGES;
	EStruct.Page = (uint32_t)APP_INFO_PAGE_NUM;
	EStruct.NbPages = 112;
	code = HAL_FLASHEx_Erase(&EStruct, &Page_Error);
}
static void Error()
{
	while(1)
	{
		HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
		HAL_Delay(1000);
	}
}

static void start_app(void)
{
	void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*)(APP_START_ADDR + 4U)));
	if( app_reset_handler == (void*)0xFFFFFFFF )
	{
		Error();
	}
	__set_MSP(*(volatile uint32_t*) APP_START_ADDR);
	HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET );
	app_reset_handler();

}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
